{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mts","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StageUtils {\n\n    static mergeNumbers(v1, v2, p) {\n        return v1 * p + v2 * (1 - p);\n    };\n\n    static rgb(r, g, b) {\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\n    };\n\n    static rgba(r, g, b, a) {\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\n    };\n\n    static getRgbString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    static getRgbaString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        let a = ((color / 16777216) | 0) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaStringFromArray(color) {\n        let r = Math.floor(color[0] * 255);\n        let g = Math.floor(color[1] * 255);\n        let b = Math.floor(color[2] * 255);\n        let a = Math.floor(color[3] * 255) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r / 255, g / 255, b / 255, a / 255];\n    };\n\n    static getRgbComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        return [r / 255, g / 255, b / 255];\n    };\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static mergeMultiColors(c, p) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1 * p[i];\n            g += g1 * p[i];\n            b += b1 * p[i];\n            a += a1 * p[i];\n            t += p[i];\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeMultiColorsEqual(c) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1;\n            g += g1;\n            b += b1;\n            a += a1;\n            t += 1.0;\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeColorAlpha(c, alpha) {\n        let a = ((c / 16777216 | 0) * alpha) | 0;\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\n            (a << 24);\n    };\n\n    static rad(deg) {\n        return deg * (Math.PI / 180);\n    };\n\n    static getTimingBezier(a, b, c, d) {\n        let xc = 3.0 * a;\n        let xb = 3.0 * (c - a) - xc;\n        let xa = 1.0 - xc - xb;\n        let yc = 3.0 * b;\n        let yb = 3.0 * (d - b) - yc;\n        let ya = 1.0 - yc - yb;\n\n        return function (time) {\n            if (time >= 1.0) {\n                return 1;\n            }\n            if (time <= 0) {\n                return 0;\n            }\n\n            let t = 0.5, cbx, cbxd, dx;\n\n            for (let it = 0; it < 20; it++) {\n                cbx = t * (t * (t * xa + xb) + xc);\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                // Cubic bezier derivative.\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\n                    // Problematic. Fall back to binary search method.\n                    break;\n                }\n\n                t += dx / cbxd;\n            }\n\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n            let minT = 0;\n            let maxT = 1;\n            for (let it = 0; it < 20; it++) {\n                t = 0.5 * (minT + maxT);\n\n                cbx = t * (t * (t * xa + xb) + xc);\n\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    // Solution found!\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                if (dx < 0) {\n                    maxT = t;\n                } else {\n                    minT = t;\n                }\n            }\n\n        };\n    };\n\n    static getTimingFunction(str) {\n        switch (str) {\n            case \"linear\":\n                return function (time) {\n                    return time\n                };\n            case \"ease\":\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\n            case \"ease-in\":\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\n            case \"ease-out\":\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\n            case \"ease-in-out\":\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\n            case \"step-start\":\n                return function () {\n                    return 1\n                };\n            case \"step-end\":\n                return function (time) {\n                    return time === 1 ? 1 : 0;\n                };\n            default:\n                let s = \"cubic-bezier(\";\n                if (str && str.indexOf(s) === 0) {\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\n                    if (parts.length !== 4) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n                    let a = parseFloat(parts[0]);\n                    let b = parseFloat(parts[1]);\n                    let c = parseFloat(parts[2]);\n                    let d = parseFloat(parts[3]);\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n\n                    return StageUtils.getTimingBezier(a, b, c, d);\n                } else {\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time\n                    };\n                }\n        }\n    };\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value === 'string';\n    }\n\n    static clone(v) {\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\n            return Utils.getDeepClone(v);\n        } else {\n            // Copy by value.\n            return v;\n        }\n    }\n\n    static cloneObjShallow(obj) {\n        let keys = Object.keys(obj);\n        let clone = {}\n        for (let i = 0; i < keys.length; i++) {\n            clone[keys[i]] = obj[keys[i]];\n        }\n        return clone;\n    }\n\n    static merge(obj1, obj2) {\n        let keys = Object.keys(obj2);\n        for (let i = 0; i < keys.length; i++) {\n            obj1[keys[i]] = obj2[keys[i]];\n        }\n        return obj1;\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object' || type === 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object;\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static getModuloIndex(index, len) {\n        if (len === 0) return index;\n        while (index < 0) {\n            index += Math.ceil(-index / len) * len;\n        }\n        index = index % len;\n        return index;\n    }\n\n    static getDeepClone(obj) {\n        let i, c;\n        if (Utils.isFunction(obj)) {\n            // Copy functions by reference.\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            c = [];\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else if (Utils.isObject(obj)) {\n            c = {}\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else {\n            return obj;\n        }\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false;\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\n        } else {\n            return v1 === v2;\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false;\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false;\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static setToArray(s) {\n        let result = [];\n        s.forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    }\n\n    static iteratorToArray(iterator) {\n        let result = [];\n        let iteratorResult = iterator.next();\n        while (!iteratorResult.done) {\n            result.push(iteratorResult.value);\n            iteratorResult = iterator.next();\n        }\n        return result;\n    }\n\n    static isUcChar(charcode) {\n        return charcode >= 65 && charcode <= 90;\n    }\n\n}\n\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Base {\n\n    static defaultSetter(obj, name, value) {\n        obj[name] = value;\n    }\n\n    static patchObject(obj, settings) {\n        if (!Utils.isObjectLiteral(settings)) {\n            console.error(\"[Lightning] Settings must be object literal\");\n        } else {\n            let names = Object.keys(settings);\n            for (let i = 0, n = names.length; i < n; i++) {\n                let name = names[i];\n\n                this.patchObjectProperty(obj, name, settings[name]);\n            }\n        }\n    }\n\n    static patchObjectProperty(obj, name, value) {\n        let setter = obj.setSetting || Base.defaultSetter;\n\n        if (name.charAt(0) === \"_\") {\n            // Disallow patching private variables.\n            if (name !== \"__create\") {\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\n            }\n        } else if (name !== \"type\") {\n            // Type is a reserved keyword to specify the class type on creation.\n            if (Utils.isFunction(value) && value.__local) {\n                // Local function (Base.local(s => s.something))\n                value = value.__local(obj);\n            }\n\n            setter(obj, name, value);\n        }\n    }\n\n    static local(func) {\n        // This function can be used as an object setting, which is called with the target object.\n        func.__local = true;\n    }\n\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SpacingCalculator {\n\n    static getSpacing(mode, numberOfItems, remainingSpace) {\n        const itemGaps = (numberOfItems - 1);\n        let spacePerGap;\n\n        let spacingBefore, spacingBetween;\n\n        switch(mode) {\n            case \"flex-start\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            case \"flex-end\":\n                spacingBefore = remainingSpace;\n                spacingBetween = 0;\n                break;\n            case \"center\":\n                spacingBefore = remainingSpace / 2;\n                spacingBetween = 0;\n                break;\n            case \"space-between\":\n                spacingBefore = 0;\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\n                break;\n            case \"space-around\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 1);\n                    spacingBefore = 0.5 * spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"space-evenly\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 2);\n                    spacingBefore = spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"stretch\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            default:\n                throw new Error(\"Unknown mode: \" + mode);\n        }\n\n        return {spacingBefore, spacingBetween}\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\n\nexport default class ContentAligner {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._totalCrossAxisSize = 0;\n    }\n\n    get _lines() {\n        return this._layout._lines;\n    }\n\n    init() {\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\n    }\n\n    align() {\n        const crossAxisSize = this._layout.crossAxisSize;\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\n\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\n\n        const lines = this._lines;\n\n        const mode = this._layout._flexContainer.alignContent;\n        let growSize = 0;\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\n            growSize = remainingSpace / lines.length;\n        }\n\n        let currentPos = spacingBefore;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const crossAxisLayoutOffset = currentPos;\n            const aligner = lines[i].createItemAligner();\n\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\n\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\n\n            aligner.align();\n\n            if (aligner.recursiveResizeOccured) {\n                lines[i].setItemPositions();\n            }\n\n            currentPos += finalCrossAxisLayoutSize;\n            currentPos += spacingBetween;\n        }\n    }\n\n    get totalCrossAxisSize() {\n        return this._totalCrossAxisSize;\n    }\n\n    _getTotalCrossAxisSize() {\n        const lines = this._lines;\n        let total = 0;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const line = lines[i];\n            total += line.crossAxisLayoutSize;\n        }\n        return total;\n    }\n\n    _getSpacing(remainingSpace) {\n        const mode = this._layout._flexContainer.alignContent;\n        const numberOfItems = this._lines.length;\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class FlexUtils {\n\n    static getParentAxisSizeWithPadding(item, horizontal) {\n        const target = item.target;\n        const parent = target.getParent();\n        if (!parent) {\n            return 0;\n        } else {\n            const flexParent = item.flexParent;\n            if (flexParent) {\n                // Use pending layout size.\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\n            } else {\n                // Use 'absolute' size.\n                return horizontal ? parent.w : parent.h;\n            }\n        }\n    }\n\n    static getRelAxisSize(item, horizontal) {\n        if (horizontal) {\n            if (item.funcW) {\n                if (this._allowRelAxisSizeFunction(item, true)) {\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalWidth;\n            }\n        } else {\n            if (item.funcH) {\n                if (this._allowRelAxisSizeFunction(item, false)) {\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalHeight;\n            }\n        }\n    }\n\n    static _allowRelAxisSizeFunction(item, horizontal) {\n        const flexParent = item.flexParent;\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\n            return false;\n        }\n        return true;\n    }\n\n    static isZeroAxisSize(item, horizontal) {\n        if (horizontal) {\n            return !item.originalWidth && !item.funcW;\n        } else {\n            return !item.originalHeight && !item.funcH;\n        }\n    }\n\n    static getAxisLayoutPos(item, horizontal) {\n        return horizontal ? item.x : item.y;\n    }\n\n    static getAxisLayoutSize(item, horizontal) {\n        return horizontal ? item.w : item.h;\n    }\n\n    static setAxisLayoutPos(item, horizontal, pos) {\n        if (horizontal) {\n            item.x = pos;\n        } else {\n            item.y = pos;\n        }\n    }\n\n    static setAxisLayoutSize(item, horizontal, size) {\n        if (horizontal) {\n            item.w = size;\n        } else {\n            item.h = size;\n        }\n    }\n\n    static getAxisMinSize(item, horizontal) {\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\n\n        let flexItemMinSize = 0;\n        if (item.isFlexItemEnabled()) {\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\n        }\n\n        const hasLimitedMinSize = (flexItemMinSize > 0);\n        if (hasLimitedMinSize) {\n            minSize = Math.max(minSize, flexItemMinSize);\n        }\n        return minSize;\n    }\n\n    static getPlainAxisMinSize(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            return item._flex._layout.getAxisMinSize(horizontal);\n        } else {\n            const isShrinkable = (item.flexItem.shrink !== 0);\n            if (isShrinkable) {\n                return 0;\n            } else {\n                return this.getRelAxisSize(item, horizontal);\n            }\n        }\n    }\n\n    static resizeAxis(item, horizontal, size) {\n        if (item.isFlexEnabled()) {\n            const isMainAxis = (item._flex._horizontal === horizontal);\n            if (isMainAxis) {\n                item._flex._layout.resizeMainAxis(size);\n            } else {\n                item._flex._layout.resizeCrossAxis(size);\n            }\n        } else {\n            this.setAxisLayoutSize(item, horizontal, size);\n        }\n    }\n\n\n    static getPaddingOffset(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingLeft;\n            } else {\n                return flex.paddingTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalPadding(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingRight + flex.paddingLeft;\n            } else {\n                return flex.paddingTop + flex.paddingBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getMarginOffset(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalMargin(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginRight + flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop + flexItem.marginBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeShrinker {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._shrunkSize = 0;\n    }\n\n    shrink(amount) {\n        this._shrunkSize = 0;\n\n        this._amountRemaining = amount;\n        let totalShrinkAmount = this._getTotalShrinkAmount();\n        if (totalShrinkAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const shrinkAmount = flexItem.shrink;\n                    const isShrinkableItem = (shrinkAmount > 0);\n                    if (isShrinkableItem) {\n                        let shrink = shrinkAmount * amountPerShrink;\n                        const minSize = flexItem._getMainAxisMinSize();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (size > minSize) {\n                            const maxShrink = size - minSize;\n                            const isFullyShrunk = (shrink >= maxShrink);\n                            if (isFullyShrunk) {\n                                shrink = maxShrink;\n\n                                // Destribute remaining amount over the other flex items.\n                                totalShrinkAmount -= shrinkAmount;\n                            }\n\n                            const finalSize = size - shrink;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._shrunkSize += shrink;\n                            this._amountRemaining -= shrink;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalShrinkAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.shrink) {\n                const minSize = flexItem._getMainAxisMinSize();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully shrunk.\n                if (size > minSize) {\n                    total += flexItem.shrink;\n                }\n            }\n        }\n        return total;\n    }\n\n    getShrunkSize() {\n        return this._shrunkSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeGrower {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._grownSize = 0;\n    }\n\n    grow(amount) {\n        this._grownSize = 0;\n\n        this._amountRemaining = amount;\n        let totalGrowAmount = this._getTotalGrowAmount();\n        if (totalGrowAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const growAmount = flexItem.grow;\n                    const isGrowableItem = (growAmount > 0);\n                    if (isGrowableItem) {\n                        let grow = growAmount * amountPerGrow;\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (maxSize > 0) {\n                            if (size >= maxSize) {\n                                // Already fully grown.\n                                grow = 0;\n                            } else {\n                                const maxGrow = maxSize - size;\n                                const isFullyGrown = (grow >= maxGrow);\n                                if (isFullyGrown) {\n                                    grow = maxGrow;\n\n                                    // Destribute remaining amount over the other flex items.\n                                    totalGrowAmount -= growAmount;\n                                }\n                            }\n                        }\n\n                        if (grow > 0) {\n                            const finalSize = size + grow;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._grownSize += grow;\n                            this._amountRemaining -= grow;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalGrowAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.grow) {\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully grown.\n                if (maxSize === 0 || size < maxSize) {\n                    total += flexItem.grow;\n                }\n            }\n        }\n        return total;\n    }\n\n    getGrownSize() {\n        return this._grownSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\n\nexport default class ItemPositioner {\n\n    constructor(lineLayout) {\n        this._line = lineLayout;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    position() {\n        const {spacingBefore, spacingBetween} = this._getSpacing();\n\n        let currentPos = spacingBefore;\n\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n\n            item.flexItem._setMainAxisLayoutPos(currentPos);\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n            currentPos += spacingBetween;\n        }\n    }\n\n    _getSpacing() {\n        const remainingSpace = this._line._availableSpace;\n        let mode = this._layout._flexContainer.justifyContent;\n        const numberOfItems = this._line.numberOfItems;\n\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ItemAligner {\n\n    constructor(line) {\n        this._line = line;\n        this._crossAxisLayoutSize = 0;\n        this._crossAxisLayoutOffset = 0;\n        this._alignItemsSetting = null;\n        this._recursiveResizeOccured = false;\n        this._isCrossAxisFitToContents = false;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    setCrossAxisLayoutSize(size) {\n        this._crossAxisLayoutSize = size;\n    }\n\n    setCrossAxisLayoutOffset(offset) {\n        this._crossAxisLayoutOffset = offset;\n    }\n\n    align() {\n        this._alignItemsSetting = this._flexContainer.alignItems;\n\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\n\n        this._recursiveResizeOccured = false;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            this._alignItem(item);\n        }\n    }\n\n    get recursiveResizeOccured() {\n        return this._recursiveResizeOccured;\n    }\n\n    _alignItem(item) {\n        const flexItem = item.flexItem;\n        let align = flexItem.alignSelf || this._alignItemsSetting;\n\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\n            align = \"flex-start\";\n        }\n\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\n            if (flexItem._hasRelCrossAxisSize()) {\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\n                flexItem._resetCrossAxisLayoutSize();\n            }\n        }\n\n        switch(align) {\n            case \"flex-start\":\n                this._alignItemFlexStart(flexItem);\n                break;\n            case \"flex-end\":\n                this._alignItemFlexEnd(flexItem);\n                break;\n            case \"center\":\n                this._alignItemFlexCenter(flexItem);\n                break;\n            case \"stretch\":\n                this._alignItemStretch(flexItem);\n                break;\n        }\n    }\n\n    _alignItemFlexStart(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n    }\n\n    _alignItemFlexEnd(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\n    }\n\n    _alignItemFlexCenter(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\n    }\n\n    _alignItemStretch(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\n\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\n        if (crossAxisMinSizeSetting > 0) {\n            size = Math.max(size, crossAxisMinSizeSetting);\n        }\n\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\n        if (crossAxisMaxSizeSettingEnabled) {\n            size = Math.min(size, crossAxisMaxSizeSetting);\n        }\n\n        flexItem._resizeCrossAxis(size);\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\n\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\n        if (recursiveResize) {\n            // Recursive resize can happen when this flex item has the opposite direction than the container\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\n            // item may decrease. If it does so, we must re-justify-content the complete line.\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\n            // as slow layout or endless loops.\n            this._recursiveResizeOccured = true;\n        }\n    }\n\n    _preventStretch(flexItem) {\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\n        return hasFixedCrossAxisSize && !forceStretch;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SizeShrinker from \"./SizeShrinker.mjs\";\nimport SizeGrower from \"./SizeGrower.mjs\";\nimport ItemPositioner from \"./ItemPositioner.mjs\";\nimport ItemAligner from \"./ItemAligner.mjs\";\n\nexport default class LineLayout {\n\n    constructor(layout, startIndex, endIndex, availableSpace) {\n        this._layout = layout;\n        this.items = layout.items;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this._availableSpace = availableSpace;\n    }\n\n    performLayout() {\n        this._setItemSizes();\n        this.setItemPositions();\n        this._calcLayoutInfo();\n    }\n\n    _setItemSizes() {\n        if (this._availableSpace > 0) {\n            this._growItemSizes(this._availableSpace);\n        } else if (this._availableSpace < 0) {\n            this._shrinkItemSizes(-this._availableSpace);\n        }\n    }\n\n    _growItemSizes(amount) {\n        const grower = new SizeGrower(this);\n        grower.grow(amount);\n        this._availableSpace -= grower.getGrownSize();\n    }\n\n    _shrinkItemSizes(amount) {\n        const shrinker = new SizeShrinker(this);\n        shrinker.shrink(amount);\n        this._availableSpace += shrinker.getShrunkSize();\n    }\n\n    setItemPositions() {\n        const positioner = new ItemPositioner(this);\n        positioner.position();\n    }\n\n    createItemAligner() {\n        return new ItemAligner(this);\n    }\n\n    _calcLayoutInfo() {\n        this._calcCrossAxisMaxLayoutSize();\n    }\n\n    getMainAxisMinSize() {\n        let mainAxisMinSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\n        }\n        return mainAxisMinSize;\n    }\n    \n    get numberOfItems() {\n        return this.endIndex - this.startIndex + 1;\n    }\n\n    get crossAxisLayoutSize() {\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\n        if (shouldFitToContents) {\n            return this._crossAxisMaxLayoutSize;\n        } else {\n            return this._layout.crossAxisSize;\n        }\n    }\n\n    _calcCrossAxisMaxLayoutSize() {\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\n    }\n\n    _getCrossAxisMaxLayoutSize() {\n        let crossAxisMaxSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\n        }\n        return crossAxisMaxSize;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LineLayout from \"./line/LineLayout.mjs\";\n\n/**\n * Distributes items over layout lines.\n */\nexport default class LineLayouter {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    get lines() {\n        return this._lines;\n    }\n\n    get mainAxisMinSize() {\n        if (this._mainAxisMinSize === -1) {\n            this._mainAxisMinSize = this._getMainAxisMinSize();\n        }\n        return this._mainAxisMinSize;\n    }\n\n    get crossAxisMinSize() {\n        if (this._crossAxisMinSize === -1) {\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\n        }\n        return this._crossAxisMinSize;\n    }\n\n    get mainAxisContentSize() {\n        return this._mainAxisContentSize;\n    }\n\n    layoutLines() {\n        this._setup();\n        const items = this._layout.items;\n        const wrap = this._layout.isWrapping();\n\n        let startIndex = 0;\n        let i;\n        const n = items.length;\n        for (i = 0; i < n; i++) {\n            const item = items[i];\n\n            this._layoutFlexItem(item);\n\n            // Get predicted main axis size.\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n\n            if (wrap && (i > startIndex)) {\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\n                if (isOverflowing) {\n                    this._layoutLine(startIndex, i - 1);\n                    this._curMainAxisPos = 0;\n                    startIndex = i;\n                }\n            }\n\n            this._addToMainAxisPos(itemMainAxisSize);\n        }\n\n        if (startIndex < i) {\n            this._layoutLine(startIndex, i - 1);\n        }\n    }\n\n    _layoutFlexItem(item) {\n        if (item.isFlexEnabled()) {\n            item.flexLayout.updateTreeLayout();\n        } else {\n            item.flexItem._resetLayoutSize();\n        }\n    }\n\n    _setup() {\n        this._mainAxisSize = this._layout.mainAxisSize;\n        this._curMainAxisPos = 0;\n        this._maxMainAxisPos = 0;\n        this._lines = [];\n\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    _addToMainAxisPos(itemMainAxisSize) {\n        this._curMainAxisPos += itemMainAxisSize;\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\n            this._maxMainAxisPos = this._curMainAxisPos;\n        }\n    }\n\n    _layoutLine(startIndex, endIndex) {\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\n        line.performLayout();\n        this._lines.push(line);\n\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\n            this._mainAxisContentSize = this._curMainAxisPos;\n        }\n    }\n\n    _getAvailableMainAxisLayoutSpace() {\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\n            return 0;\n        } else {\n            return this._mainAxisSize - this._curMainAxisPos;\n        }\n    }\n\n    _getCrossAxisMinSize() {\n        let crossAxisMinSize = 0;\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\n        }\n        return crossAxisMinSize;\n    }\n\n    _getMainAxisMinSize() {\n        if (this._lines.length === 1) {\n            return this._lines[0].getMainAxisMinSize();\n        } else {\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\n            return this._layout.mainAxisSize;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexUtils from \"../FlexUtils.mjs\";\n\nexport default class ItemCoordinatesUpdater {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._isReverse = this._flexContainer._reverse;\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    finalize() {\n        const parentFlex = this._layout.getParentFlexContainer();\n        if (parentFlex) {\n            // We must update it from the parent to set padding offsets and reverse position.\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\n            updater._finalizeItemAndChildren(this._flexContainer.item);\n        } else {\n            this._finalizeRoot();\n            this._finalizeItems();\n        }\n    }\n\n    _finalizeRoot() {\n        const item = this._flexContainer.item;\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        w += this._layout._getHorizontalPadding();\n        h += this._layout._getVerticalPadding();\n\n        item.clearRecalcFlag();\n\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItems() {\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const validCache = this._validateItemCache(item);\n\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\n            this._finalizeItem(item);\n\n            if (!validCache) {\n                this._finalizeItemChildren(item);\n            }\n        }\n    }\n\n    _validateItemCache(item) {\n        if (item.recalc === 0) {\n            if (item.isFlexEnabled()) {\n                const layout = item._flex._layout;\n\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\n                if (dimensionsMatchPreviousResult) {\n                    // Cache is valid.\n                    return true;\n                } else {\n                    const crossAxisSize = layout.crossAxisSize;\n                    layout.performResizeMainAxis(layout.mainAxisSize);\n                    layout.performResizeCrossAxis(crossAxisSize);\n                }\n            }\n        }\n        return false;\n    }\n\n    _finalizeItemAndChildren(item) {\n        this._finalizeItem(item);\n        this._finalizeItemChildren(item);\n    }\n\n    _finalizeItem(item) {\n        if (this._isReverse) {\n            this._reverseMainAxisLayoutPos(item);\n        }\n\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        x += this._horizontalPaddingOffset;\n        y += this._verticalPaddingOffset;\n\n        const flex = item.flex;\n        if (flex) {\n            w += item._flex._layout._getHorizontalPadding();\n            h += item._flex._layout._getVerticalPadding();\n        }\n\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            x += flexItem._getHorizontalMarginOffset();\n            y += flexItem._getVerticalMarginOffset();\n        }\n\n        item.clearRecalcFlag();\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItemChildren(item) {\n        const flex = item._flex;\n        if (flex) {\n            const updater = new ItemCoordinatesUpdater(flex._layout);\n            updater._finalizeItems();\n        }\n    }\n\n    _reverseMainAxisLayoutPos(item) {\n        if (item._reversed && item._recalc == 0) {\n            item._reversed = false;\n        }\n        if (!item._reversed) {\n            const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\n            const reversedPos = this._layout.mainAxisSize - endPos;\n            item.flexItem._setMainAxisLayoutPos(reversedPos);\n            if (item._recalc != 0) {\n                item._reversed = true;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ContentAligner from \"./ContentAligner.mjs\";\nimport FlexUtils from \"../FlexUtils.mjs\";\nimport LineLayouter from \"./LineLayouter.mjs\";\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\n\n/**\n * Layouts a flex container (and descendants).\n */\nexport default class FlexLayout {\n\n    constructor(flexContainer) {\n        this._flexContainer = flexContainer;\n\n        this._lineLayouter = new LineLayouter(this);\n\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n\n        this._cachedMainAxisSizeAfterLayout = 0;\n        this._cachedCrossAxisSizeAfterLayout = 0;\n\n        this._shrunk = false;\n    }\n\n    get shrunk() {\n        return this._shrunk;\n    }\n\n    get recalc() {\n        return this.item.recalc;\n    }\n\n    layoutTree() {\n        const isSubTree = (this.item.flexParent !== null);\n        if (isSubTree) {\n            // Use the dimensions set by the parent flex tree.\n            this._updateSubTreeLayout();\n        } else {\n            this.updateTreeLayout();\n        }\n        this.updateItemCoords();\n    }\n\n    updateTreeLayout() {\n        if (this.recalc) {\n            this._performUpdateLayoutTree();\n        } else {\n            this._performUpdateLayoutTreeFromCache();\n        }\n    }\n\n    _performUpdateLayoutTree() {\n        this._setInitialAxisSizes();\n        this._layoutAxes();\n        this._refreshLayoutCache();\n    }\n\n    _refreshLayoutCache() {\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\n    }\n\n    _performUpdateLayoutTreeFromCache() {\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\n        if (sizeMightHaveChanged) {\n            // Update after all.\n            this.item.enableLocalRecalcFlag();\n            this._performUpdateLayoutTree();\n        } else {\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\n        }\n    }\n\n    updateItemCoords() {\n        const updater = new ItemCoordinatesUpdater(this);\n        updater.finalize();\n    }\n\n    _updateSubTreeLayout() {\n        // The dimensions of this container are guaranteed not to have changed.\n        // That's why we can safely 'reuse' those and re-layout the contents.\n        const crossAxisSize = this.crossAxisSize;\n        this._layoutMainAxis();\n        this.performResizeCrossAxis(crossAxisSize);\n    }\n\n    _setInitialAxisSizes() {\n        if (this.item.isFlexItemEnabled()) {\n            this.item.flexItem._resetLayoutSize();\n        } else {\n            this.mainAxisSize = this._getMainAxisBasis();\n            this.crossAxisSize = this._getCrossAxisBasis();\n        }\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n        this._shrunk = false;\n    }\n\n    _layoutAxes() {\n        this._layoutMainAxis();\n        this._layoutCrossAxis();\n    }\n\n    /**\n     * @pre mainAxisSize should exclude padding.\n     */\n    _layoutMainAxis() {\n        this._layoutLines();\n        this._fitMainAxisSizeToContents();\n    }\n\n    _layoutLines() {\n        this._lineLayouter.layoutLines();\n    }\n\n    get _lines() {\n        return this._lineLayouter.lines;\n    }\n\n    _fitMainAxisSizeToContents() {\n        if (!this._resizingMainAxis) {\n            if (this.isMainAxisFitToContents()) {\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\n            }\n        }\n    }\n\n    /**\n     * @pre crossAxisSize should exclude padding.\n     */\n    _layoutCrossAxis() {\n        const aligner = new ContentAligner(this);\n        aligner.init();\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\n        this._fitCrossAxisSizeToContents();\n        aligner.align();\n    }\n\n    _fitCrossAxisSizeToContents() {\n        if (!this._resizingCrossAxis) {\n            if (this.isCrossAxisFitToContents()) {\n                this.crossAxisSize = this._totalCrossAxisSize;\n            }\n        }\n    }\n\n    isWrapping() {\n        return this._flexContainer.wrap;\n    }\n\n    isAxisFitToContents(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this.isMainAxisFitToContents();\n        } else {\n            return this.isCrossAxisFitToContents();\n        }\n    }\n\n    isMainAxisFitToContents() {\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\n    }\n\n    isCrossAxisFitToContents() {\n        return !this._hasFixedCrossAxisBasis();\n    }\n\n    _hasFixedMainAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\n    }\n\n    _hasFixedCrossAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\n    }\n\n    getAxisMinSize(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this._getMainAxisMinSize();\n        } else {\n            return this._getCrossAxisMinSize();\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return this._lineLayouter.mainAxisMinSize;\n    }\n\n    _getCrossAxisMinSize() {\n        return this._lineLayouter.crossAxisMinSize;\n    }\n\n    resizeMainAxis(size) {\n        if (this.mainAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeMainAxis(size);\n            } else {\n                if (this._checkValidCacheMainAxisResize()) {\n                    this.mainAxisSize = size;\n                    this._fitCrossAxisSizeToContents();\n                } else {\n                    // Cache miss.\n                    this.item.enableLocalRecalcFlag();\n                    this.performResizeMainAxis(size);\n                }\n            }\n        }\n    }\n\n    _checkValidCacheMainAxisResize(size) {\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\n        if (isFinalMainAxisSize) {\n            return true;\n        }\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\n        if (canIgnoreCacheMiss) {\n            // Allow other main axis resizes and check if final resize matches the target main axis size\n            //  (ItemCoordinatesUpdater).\n            return true;\n        }\n        return false;\n    }\n\n    performResizeMainAxis(size) {\n        const isShrinking = (size < this.mainAxisSize);\n        this._shrunk = isShrinking;\n\n        this.mainAxisSize = size;\n\n        this._resizingMainAxis = true;\n        this._layoutAxes();\n        this._resizingMainAxis = false;\n    }\n\n    resizeCrossAxis(size) {\n        if (this.crossAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeCrossAxis(size);\n            } else {\n                this.crossAxisSize = size;\n            }\n        }\n    }\n\n    performResizeCrossAxis(size) {\n        this.crossAxisSize = size;\n\n        this._resizingCrossAxis = true;\n        this._layoutCrossAxis();\n        this._resizingCrossAxis = false;\n    }\n\n    get targetMainAxisSize() {\n        return this._horizontal ? this.item.target.w : this.item.target.h;\n    }\n\n    get targetCrossAxisSize() {\n        return this._horizontal ? this.item.target.h : this.item.target.w;\n    }\n\n    getParentFlexContainer() {\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\n    }\n\n    _getHorizontalPadding() {\n        return FlexUtils.getTotalPadding(this.item, true);\n    }\n\n    _getVerticalPadding() {\n        return FlexUtils.getTotalPadding(this.item, false);\n    }\n\n    _getHorizontalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, true);\n    }\n\n    _getVerticalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, false);\n    }\n\n    _getMainAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\n    }\n\n    _getCrossAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\n    }\n\n    get _horizontal() {\n        return this._flexContainer._horizontal;\n    }\n\n    get _reverse() {\n        return this._flexContainer._reverse;\n    }\n\n    get item() {\n        return this._flexContainer.item;\n    }\n\n    get items() {\n        return this.item.items;\n    }\n\n    get resizingMainAxis() {\n        return this._resizingMainAxis;\n    }\n\n    get resizingCrossAxis() {\n        return this._resizingCrossAxis;\n    }\n\n    get numberOfItems() {\n        return this.items.length;\n    }\n\n    get mainAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\n    }\n\n    get crossAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\n    }\n\n    set mainAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\n    }\n\n    set crossAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport Layout from \"./layout/FlexLayout.mjs\";\n\nexport default class FlexContainer {\n\n\n    constructor(item) {\n        this._item = item;\n\n        this._layout = new Layout(this);\n        this._horizontal = true;\n        this._reverse = false;\n        this._wrap = false;\n        this._alignItems = 'stretch';\n        this._justifyContent = 'flex-start';\n        this._alignContent = 'flex-start';\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    _changedDimensions() {\n        this._item.changedDimensions();\n    }\n\n    _changedContents() {\n        this._item.changedContents();\n    }\n\n    get direction() {\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\n    }\n\n    set direction(f) {\n        if (this.direction === f) return;\n\n        this._horizontal = (f === 'row' || f === 'row-reverse');\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\n\n        this._changedContents();\n    }\n\n    set wrap(v) {\n        this._wrap = v;\n        this._changedContents();\n    }\n\n    get wrap() {\n        return this._wrap;\n    }\n\n    get alignItems() {\n        return this._alignItems;\n    }\n\n    set alignItems(v) {\n        if (this._alignItems === v) return;\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n        }\n        this._alignItems = v;\n\n        this._changedContents();\n    }\n\n    get alignContent() {\n        return this._alignContent;\n    }\n\n    set alignContent(v) {\n        if (this._alignContent === v) return;\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\n        }\n        this._alignContent = v;\n\n        this._changedContents();\n    }\n\n    get justifyContent() {\n        return this._justifyContent;\n    }\n\n    set justifyContent(v) {\n        if (this._justifyContent === v) return;\n\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\n        }\n        this._justifyContent = v;\n\n        this._changedContents();\n    }\n\n    set padding(v) {\n        this.paddingLeft = v;\n        this.paddingTop = v;\n        this.paddingRight = v;\n        this.paddingBottom = v;\n    }\n\n    get padding() {\n        return this.paddingLeft;\n    }\n    \n    set paddingLeft(v) {\n        this._paddingLeft = v;\n        this._changedDimensions();\n    }\n    \n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingTop(v) {\n        this._paddingTop = v;\n        this._changedDimensions();\n    }\n\n    get paddingTop() {\n        return this._paddingTop;\n    }\n\n    set paddingRight(v) {\n        this._paddingRight = v;\n        this._changedDimensions();\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingBottom(v) {\n        this._paddingBottom = v;\n        this._changedDimensions();\n    }\n\n    get paddingBottom() {\n        return this._paddingBottom;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\nimport FlexContainer from \"./FlexContainer.mjs\";\n\nexport default class FlexItem {\n\n    constructor(item) {\n        this._ctr = null;\n        this._item = item;\n        this._grow = 0;\n        this._shrink = FlexItem.SHRINK_AUTO;\n        this._alignSelf = undefined;\n        this._minWidth = 0;\n        this._minHeight = 0;\n        this._maxWidth = 0;\n        this._maxHeight = 0;\n\n        this._marginLeft = 0;\n        this._marginTop = 0;\n        this._marginRight = 0;\n        this._marginBottom = 0;\n        this._reversed = false;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    get grow() {\n        return this._grow;\n    }\n\n    set grow(v) {\n        if (this._grow === v) return;\n\n        this._grow = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get shrink() {\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\n            return this._getDefaultShrink();\n        }\n        return this._shrink;\n    }\n\n    _getDefaultShrink() {\n        if (this.item.isFlexEnabled()) {\n            return 1;\n        } else {\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\n            return 0;\n        }\n    }\n\n    set shrink(v) {\n        if (this._shrink === v) return;\n\n        this._shrink = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get alignSelf() {\n        return this._alignSelf;\n    }\n\n    set alignSelf(v) {\n        if (this._alignSelf === v) return;\n\n        if (v === undefined) {\n            this._alignSelf = undefined;\n        } else {\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n            }\n            this._alignSelf = v;\n        }\n\n        this._changed();\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minWidth(v) {\n        this._minWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    set minHeight(v) {\n        this._minHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    get maxWidth() {\n        return this._maxWidth;\n    }\n\n    set maxWidth(v) {\n        this._maxWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get maxHeight() {\n        return this._maxHeight;\n    }\n\n    set maxHeight(v) {\n        this._maxHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    /**\n     * @note margins behave slightly different than in HTML with regard to shrinking.\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\n     */\n    set margin(v) {\n        this.marginLeft = v;\n        this.marginTop = v;\n        this.marginRight = v;\n        this.marginBottom = v;\n    }\n\n    get margin() {\n        return this.marginLeft;\n    }\n\n    set marginLeft(v) {\n        this._marginLeft = v;\n        this._changed();\n    }\n\n    get marginLeft() {\n        return this._marginLeft;\n    }\n\n    set marginTop(v) {\n        this._marginTop = v;\n        this._changed();\n    }\n\n    get marginTop() {\n        return this._marginTop;\n    }\n\n    set marginRight(v) {\n        this._marginRight = v;\n        this._changed();\n    }\n\n    get marginRight() {\n        return this._marginRight;\n    }\n\n    set marginBottom(v) {\n        this._marginBottom = v;\n        this._changed();\n    }\n\n    get marginBottom() {\n        return this._marginBottom;\n    }\n    \n    _changed() {\n        if (this.ctr) this.ctr._changedContents();\n    }\n\n    set ctr(v) {\n        this._ctr = v;\n    }\n\n    get ctr() {\n        return this._ctr;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    _resetLayoutSize() {\n        this._resetHorizontalAxisLayoutSize();\n        this._resetVerticalAxisLayoutSize();\n    }\n\n    _resetCrossAxisLayoutSize() {\n        if (this.ctr._horizontal) {\n            this._resetVerticalAxisLayoutSize();\n        } else {\n            this._resetHorizontalAxisLayoutSize();\n        }\n    }\n\n    _resetHorizontalAxisLayoutSize() {\n        let w = FlexUtils.getRelAxisSize(this.item, true);\n        if (this._minWidth) {\n            w = Math.max(this._minWidth, w);\n        }\n        if (this._maxWidth) {\n            w = Math.min(this._maxWidth, w);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\n    }\n\n    _resetVerticalAxisLayoutSize() {\n        let h = FlexUtils.getRelAxisSize(this.item, false);\n        if (this._minHeight) {\n            h = Math.max(this._minHeight, h);\n        }\n        if (this._maxHeight) {\n            h = Math.min(this._maxHeight, h);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\n    }\n\n    _getCrossAxisMinSizeSetting() {\n        return this._getMinSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getCrossAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getMainAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(this.ctr._horizontal);\n    }\n\n    _getMinSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._minWidth;\n        } else {\n            return this._minHeight;\n        }\n    }\n\n    _getMaxSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._maxWidth;\n        } else {\n            return this._maxHeight;\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutPos() {\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\n    }\n\n    _setMainAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\n    }\n\n    _setCrossAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\n    }\n\n    _getCrossAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\n    }\n\n    _resizeCrossAxis(size) {\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\n    }\n\n    _resizeMainAxis(size) {\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\n    }\n\n    _getMainAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\n    }\n\n    _getHorizontalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, true);\n    }\n\n    _getVerticalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, false);\n    }\n\n    _getMainAxisMinSizeWithPaddingAndMargin() {\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _hasFixedCrossAxisSize() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\n    }\n\n    _hasRelCrossAxisSize() {\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\n    }\n\n}\n\n\nFlexItem.SHRINK_AUTO = -1;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexContainer from \"./FlexContainer.mjs\";\nimport FlexItem from \"./FlexItem.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\n\n/**\n * This is the connection between the render tree with the layout tree of this flex container/item.\n */\nexport default class FlexTarget {\n\n    constructor(target) {\n        this._target = target;\n\n        /**\n         * Possible values (only in case of container):\n         * bit 0: has changed or contains items with changes\n         * bit 1: width changed\n         * bit 2: height changed\n         */\n        this._recalc = 0;\n        \n        this._enabled = false;\n\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n\n        this._originalX = 0;\n        this._originalY = 0;\n        this._originalWidth = 0;\n        this._originalHeight = 0;\n\n        this._flex = null;\n        this._flexItem = null;\n        this._flexItemDisabled = false;\n\n        this._items = null;\n    }\n\n    get flexLayout() {\n        return this.flex ? this.flex._layout : null;\n    }\n\n    layoutFlexTree() {\n        if (this.isFlexEnabled() && this.isChanged()) {\n            this.flexLayout.layoutTree();\n        }\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get flex() {\n        return this._flex;\n    }\n\n    set flex(v) {\n        if (!v) {\n            if (this.isFlexEnabled()) {\n                this._disableFlex();\n            }\n        } else {\n            if (!this.isFlexEnabled()) {\n                this._enableFlex();\n            }\n            this._flex.patch(v);\n        }\n    }\n\n    get flexItem() {\n        if (this._flexItemDisabled) {\n            return false;\n        }\n        this._ensureFlexItem();\n        return this._flexItem;\n    }\n\n    set flexItem(v) {\n        if (v === false) {\n            if (!this._flexItemDisabled) {\n                const parent = this.flexParent;\n                this._flexItemDisabled = true;\n                this._checkEnabled();\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        } else {\n            this._ensureFlexItem();\n\n            this._flexItem.patch(v);\n\n            if (this._flexItemDisabled) {\n                this._flexItemDisabled = false;\n                this._checkEnabled();\n                const parent = this.flexParent;\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        }\n    }\n\n    _enableFlex() {\n        this._flex = new FlexContainer(this);\n        this._checkEnabled();\n        this.changedDimensions();\n        this._enableChildrenAsFlexItems();\n    }\n\n    _disableFlex() {\n        this.changedDimensions();\n        this._flex = null;\n        this._checkEnabled();\n        this._disableChildrenAsFlexItems();\n    }\n\n    _enableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._enableFlexItem();\n            }\n        }\n    }\n\n    _disableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._disableFlexItem();\n            }\n        }\n    }\n\n    _enableFlexItem() {\n        this._ensureFlexItem();\n        const flexParent = this._target._parent._layout;\n        this._flexItem.ctr = flexParent._flex;\n        flexParent.changedContents();\n        this._checkEnabled();\n    }\n\n    _disableFlexItem() {\n        if (this._flexItem) {\n            this._flexItem.ctr = null;\n        }\n\n        // We keep the flexItem object because it may contain custom settings.\n        this._checkEnabled();\n\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\n        this._resetOffsets();\n    }\n\n    _resetOffsets() {\n        this.x = 0;\n        this.y = 0;\n    }\n\n    _ensureFlexItem() {\n        if (!this._flexItem) {\n            this._flexItem = new FlexItem(this);\n        }\n    }\n\n    _checkEnabled() {\n        const enabled = this.isEnabled();\n        if (this._enabled !== enabled) {\n            if (enabled) {\n                this._enable();\n            } else {\n                this._disable();\n            }\n            this._enabled = enabled;\n        }\n    }\n    \n    _enable() {\n        this._setupTargetForFlex();\n        this._target.enableFlexLayout();\n    }\n\n    _disable() {\n        this._restoreTargetToNonFlex();\n        this._target.disableFlexLayout();\n    }\n\n    isEnabled() {\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\n    }\n\n    isFlexEnabled() {\n        return this._flex !== null;\n    }\n\n    isFlexItemEnabled() {\n        return this.flexParent !== null;\n    }\n\n    _restoreTargetToNonFlex() {\n        const target = this._target;\n        target.x = this._originalX;\n        target.y = this._originalY;\n        target.setDimensions(this._originalWidth, this._originalHeight);\n    }\n\n    _setupTargetForFlex() {\n        const target = this._target;\n        this._originalX = target._x;\n        this._originalY = target._y;\n        this._originalWidth = target._w;\n        this._originalHeight = target._h;\n    }\n    \n    setParent(from, to) {\n        if (from && from.isFlexContainer()) {\n            from._layout._changedChildren();\n        }\n\n        if (to && to.isFlexContainer()) {\n            this._enableFlexItem();\n            to._layout._changedChildren();\n        }\n        this._checkEnabled();\n    }\n\n    get flexParent() {\n        if (this._flexItemDisabled) {\n            return null;\n        }\n\n        const parent = this._target._parent;\n        if (parent && parent.isFlexContainer()) {\n            return parent._layout;\n        }\n        return null;\n    }\n\n    setVisible(v) {\n        const parent = this.flexParent;\n        if (parent) {\n            parent._changedChildren();\n        }\n    }\n\n    get items() {\n        if (!this._items) {\n            this._items = this._getFlexItems();\n        }\n        return this._items;\n    }\n\n    _getFlexItems() {\n        const items = [];\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const item = children[i];\n                if (item.visible) {\n                    if (item.isFlexItem()) {\n                        items.push(item.layout);\n                    }\n                }\n            }\n        }\n        return items;\n    }\n\n    _changedChildren() {\n        this._clearFlexItemsCache();\n        this.changedContents();\n    }\n\n    _clearFlexItemsCache() {\n        this._items = null;\n    }\n\n    setLayout(x, y, w, h) {\n        let originalX = this._originalX;\n        let originalY = this._originalY;\n        if (this.funcX) {\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\n        }\n        if (this.funcY) {\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\n        }\n\n        if (this.isFlexItemEnabled()) {\n            this.target.setLayout(x + originalX, y + originalY, w, h);\n        } else {\n            // Reuse the x,y 'settings'.\n            this.target.setLayout(originalX, originalY, w, h);\n        }\n    }\n\n    changedDimensions(changeWidth = true, changeHeight = true) {\n        this._updateRecalc(changeWidth, changeHeight);\n    }\n\n    changedContents() {\n        this._updateRecalc();\n    }\n\n    forceLayout() {\n        this._updateRecalc();\n    }\n\n    isChanged() {\n        return this._recalc > 0;\n    }\n\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\n        if (this.isFlexEnabled()) {\n            const layout = this._flex._layout;\n\n            // When something internal changes, it can have effect on the external dimensions.\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\n        }\n\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\n        this._recalc |= recalc;\n        if (newRecalcFlags > 1) {\n            if (this.flexParent) {\n                this.flexParent._updateRecalcBottomUp(recalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    getNewRecalcFlags(flags) {\n        return (7 - this._recalc) & flags;\n    }\n\n    _updateRecalcBottomUp(childRecalc) {\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\n        this._recalc |= newRecalc;\n        if (newRecalcFlags > 1) {\n            const flexParent = this.flexParent;\n            if (flexParent) {\n                flexParent._updateRecalcBottomUp(newRecalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    _getRecalcFromChangedChildRecalc(childRecalc) {\n        const layout = this._flex._layout;\n\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\n\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\n        if (!crossAxisDimensionsChangedInChild) {\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\n            if (mainAxisDimensionsChangedInChild) {\n                const mainAxisIsWrapping = layout.isWrapping();\n                if (mainAxisIsWrapping) {\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\n                    if (crossAxisIsFitToContents) {\n                        // Special case: due to wrapping, the cross axis size may be changed.\n                        childRecalc += crossAxisRecalcFlag;\n                    }\n                }\n            }\n        }\n\n        let isWidthDynamic = layout.isAxisFitToContents(true);\n        let isHeightDynamic = layout.isAxisFitToContents(false);\n\n        if (layout.shrunk) {\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\n            if (layout._horizontal) {\n                isWidthDynamic = true;\n            } else {\n                isHeightDynamic = true;\n            }\n        }\n\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\n\n        const combinedRecalc = childRecalc & localRecalc;\n        return combinedRecalc;\n    }\n\n    get recalc() {\n        return this._recalc;\n    }\n\n    clearRecalcFlag() {\n        this._recalc = 0;\n    }\n\n    enableLocalRecalcFlag() {\n        this._recalc = 1;\n    }\n\n    get originalX() {\n        return this._originalX;\n    }\n\n    setOriginalXWithoutUpdatingLayout(v) {\n        this._originalX = v;\n    }\n\n    get originalY() {\n        return this._originalY;\n    }\n\n    setOriginalYWithoutUpdatingLayout(v) {\n        this._originalY = v;\n    }\n\n    get originalWidth() {\n        return this._originalWidth;\n    }\n\n    set originalWidth(v) {\n        if (this._originalWidth !== v) {\n            this._originalWidth = v;\n            this.changedDimensions(true, false);\n        }\n    }\n\n    get originalHeight() {\n        return this._originalHeight;\n    }\n\n    set originalHeight(v) {\n        if (this._originalHeight !== v) {\n            this._originalHeight = v;\n            this.changedDimensions(false, true);\n        }\n    }\n\n    get funcX() {\n        return this._target.funcX;\n    }\n\n    get funcY() {\n        return this._target.funcY;\n    }\n\n    get funcW() {\n        return this._target.funcW;\n    }\n\n    get funcH() {\n        return this._target.funcH;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TextureSource {\n\n    constructor(manager, loader = null) {\n        this.id = TextureSource.id++;\n\n        this.manager = manager;\n\n        this.stage = manager.stage;\n\n        /**\n         * All enabled textures (textures that are used by visible elements).\n         * @type {Set<Texture>}\n         */\n        this.textures = new Set();\n\n        /**\n         * The number of active textures (textures that have at least one active element).\n         * @type {number}\n         * @private\n         */\n        this._activeTextureCount = 0;\n\n        /**\n         * The factory for the source of this texture.\n         * @type {Function}\n         */\n        this.loader = loader;\n\n        /**\n         * Identifier for reuse.\n         * @type {String}\n         */\n        this.lookupId = null;\n\n        /**\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\n         * @type {Function}\n         */\n        this._cancelCb = null;\n\n        /**\n         * Loading since timestamp in millis.\n         * @type {number}\n         */\n        this.loadingSince = 0;\n\n        this.w = 0;\n        this.h = 0;\n\n        this._nativeTexture = null;\n\n        /**\n         * If true, then this.texture source is never freed from memory during garbage collection.\n         * @type {boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Sub-object with texture-specific rendering information.\n         * For images, contains the src property, for texts, contains handy rendering information.\n         * @type {Object}\n         */\n        this.renderInfo = null;\n\n        /**\n         * Generated for 'renderToTexture'.\n         * @type {boolean}\n         * @private\n         */\n        this._isResultTexture = !this.loader;\n\n        /**\n         * Contains the load error, if the texture source could previously not be loaded.\n         * @type {object}\n         * @private\n         */\n        this._loadError = null;\n\n        /**\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\n         * @type {object}\n         * @private\n         */\n        this._imageRef = null;\n\n\n        /**\n         * Track whether or not there is an alpha channel in this source\n         * @type {boolean}\n         * @private\n         */\n         this._hasAlpha = false;\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    get loadError() {\n        return this._loadError;\n    }\n\n    addTexture(v) {\n        if (!this.textures.has(v)) {\n            this.textures.add(v);\n        }\n    }\n\n    removeTexture(v) {\n        this.textures.delete(v);\n    }\n\n    incActiveTextureCount() {\n        this._activeTextureCount++;\n        if (this._activeTextureCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveTextureCount() {\n        this._activeTextureCount--;\n        if (this._activeTextureCount === 0) {\n            this.becomesUnused();\n        }\n    }\n\n    get isResultTexture() {\n        return this._isResultTexture;\n    }\n\n    set isResultTexture(v) {\n        this._isResultTexture = v;\n    }\n\n    forEachEnabledElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(cb);\n        });\n    }\n\n    hasEnabledElements() {\n        return this.textures.size > 0;\n    }\n\n    forEachActiveElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(element => {\n                if (element.active) {\n                    cb(element);\n                }\n            });\n        });\n    }\n\n    getRenderWidth() {\n        return this.w;\n    }\n\n    getRenderHeight() {\n        return this.h;\n    }\n\n    allowCleanup() {\n        return !this.permanent && !this.isUsed();\n    }\n\n    becomesUsed() {\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\n        this.load();\n    }\n\n    becomesUnused() {\n        this.cancel();\n    }\n\n    cancel() {\n        if (this.isLoading()) {\n            if (this._cancelCb) {\n                this._cancelCb(this);\n\n                // Clear callback to avoid memory leaks.\n                this._cancelCb = null;\n            }\n            this.loadingSince = 0;\n        }\n    }\n\n    isLoaded() {\n        return !!this._nativeTexture;\n    }\n\n    isLoading() {\n        return (this.loadingSince > 0);\n    }\n\n    isError() {\n        return !!this._loadError;\n    }\n\n    reload() {\n        this.free();\n        if (this.isUsed()) {\n            this.load();\n        }\n    }\n\n    load(forceSync = false) {\n        // From the moment of loading (when a texture source becomes used by active elements)\n        if (this.isResultTexture) {\n            // Element result texture source, for which the loading is managed by the core.\n            return;\n        }\n\n        if (!this._nativeTexture && !this.isLoading()) {\n            this.loadingSince = (new Date()).getTime();\n            this._cancelCb = this.loader((err, options) => {\n                // Ignore loads that come in after a cancel.\n                if (this.isLoading()) {\n                    // Clear callback to avoid memory leaks.\n                    this._cancelCb = null;\n\n                    if (this.manager.stage.destroyed) {\n                        // Ignore async load when stage is destroyed.\n                        return;\n                    }\n                    if (err) {\n                        // Emit txError.\n                        this.onError(err);\n                    } else if (options && options.source) {\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\n                            const textureThrottler = this.stage.textureThrottler;\n                            this._cancelCb = textureThrottler.genericCancelCb;\n                            textureThrottler.add(this, options);\n                        } else {\n                            this.processLoadedSource(options);\n                        }\n                    }\n                }\n            }, this);\n        }\n    }\n\n    processLoadedSource(options) {\n        this.loadingSince = 0;\n        this.setSource(options);\n    }\n\n    setSource(options) {\n        const source = options.source;\n\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\n        this.w = source.width || (options && options.w) || 0;\n        this.h = source.height || (options && options.h) || 0;\n\n        if (options && options.renderInfo) {\n            // Assign to id in cache so that it can be reused.\n            this.renderInfo = options.renderInfo;\n        }\n\n        this.permanent = !!options.permanent;\n\n        if (options && options.imageRef)\n            this._imageRef = options.imageRef;\n        if (options && options.flipTextureY) {\n            this._flipTextureY = options.flipTextureY;\n        } else {\n            this._flipTextureY = false;\n        }\n\n        if (this._isNativeTexture(source)) {\n            // Texture managed by caller.\n            this._nativeTexture = source;\n\n            this.w = this.w || source.w;\n            this.h = this.h || source.h;\n\n            // WebGLTexture objects are by default;\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\n        } else {\n            this.manager.uploadTextureSource(this, options);\n        }\n\n        // Must be cleared when reload is succesful.\n        this._loadError = null;\n\n        this.onLoad();\n    }\n\n    isUsed() {\n        return this._activeTextureCount > 0;\n    }\n\n    onLoad() {\n        if (this.isUsed()) {\n            this.textures.forEach(texture => {\n                texture.onLoad();\n            });\n        }\n    }\n\n    forceRenderUpdate() {\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\n        //  (using tex[Sub]Image2d for example).\n\n        if (this._nativeTexture) {\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\n            this._nativeTexture.update = this.stage.frameCounter;\n        }\n\n        this.forEachActiveElement(function (element) {\n            element.forceRenderUpdate();\n        });\n\n    }\n\n    forceUpdateRenderCoords() {\n        this.forEachActiveElement(function (element) {\n            element._updateTextureCoords();\n        });\n    }\n\n    get nativeTexture() {\n        return this._nativeTexture;\n    }\n\n    clearNativeTexture() {\n        this._nativeTexture = null;\n        //also clear the reference to the texture variable.\n        this._imageRef = null;\n    }\n\n    /**\n     * Used for result textures.\n     */\n    replaceNativeTexture(newNativeTexture, w, h) {\n        let prevNativeTexture = this._nativeTexture;\n        // Loaded by core.\n        this._nativeTexture = newNativeTexture;\n        this.w = w;\n        this.h = h;\n\n        if (!prevNativeTexture && this._nativeTexture) {\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\n        }\n\n        if (!this._nativeTexture) {\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\n        }\n\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\n        this.forEachEnabledElement(element => element._updateDimensions());\n\n        // Notice that the sprite map must never contain render textures.\n    }\n\n    onError(e) {\n        this._loadError = e;\n        this.loadingSince = 0;\n        console.error('[Lightning] texture load error', e, this.lookupId);\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\n    }\n\n    free() {\n        if (this.isLoaded()) {\n            this.manager.freeTextureSource(this);\n        }\n    }\n\n    _isNativeTexture(source) {\n        if (Utils.isNode) {\n            return source.constructor.name === \"WebGLTexture\";\n        }\n\n        if ('WebGLTexture' in window) {\n            return source instanceof WebGLTexture;\n        }\n\n        return false;\n    }\n\n}\n\nTextureSource.prototype.isTextureSource = true;\n\nTextureSource.id = 1;\n\nimport Utils from \"./Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from '../TextureSource.mjs';\n\nexport default class ElementTexturizer {\n\n    constructor(elementCore) {\n\n        this._element = elementCore.element;\n        this._core = elementCore;\n\n        this.ctx = this._core.ctx;\n\n        this._enabled = false;\n        this.lazy = false;\n        this._colorize = false;\n\n        this._renderTexture = null;\n\n        this._renderTextureReused = false;\n\n        this._resultTextureSource = null;\n\n        this._renderOffscreen = false;\n\n        this.empty = false;\n    }\n\n    get enabled() {\n        return this._enabled;\n    }\n\n    set enabled(v) {\n        this._enabled = v;\n        this._core.updateRenderToTextureEnabled();\n    }\n\n    get renderOffscreen() {\n        return this._renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this._renderOffscreen = v;\n        this._core.setHasRenderUpdates(1);\n\n        // This enforces rechecking the 'within bounds'.\n        this._core._setRecalc(6);\n    }\n\n    get colorize() {\n        return this._colorize;\n    }\n\n    set colorize(v) {\n        if (this._colorize !== v) {\n            this._colorize = v;\n\n            // Only affects the finally drawn quad.\n            this._core.setHasRenderUpdates(1);\n        }\n    }\n\n    _getTextureSource() {\n        if (!this._resultTextureSource) {\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\n            this.updateResultTexture();\n        }\n        return this._resultTextureSource;\n    }\n\n    hasResultTexture() {\n        return !!this._resultTextureSource;\n    }\n\n    resultTextureInUse() {\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\n    }\n\n    updateResultTexture() {\n        let resultTexture = this.getResultTexture();\n        if (this._resultTextureSource) {\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\n                let w = resultTexture ? resultTexture.w : 0;\n                let h = resultTexture ? resultTexture.h : 0;\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\n            }\n\n            // Texture will be updated: all elements using the source need to be updated as well.\n            this._resultTextureSource.forEachEnabledElement(element => {\n                element._updateDimensions();\n                element.core.setHasRenderUpdates(3);\n            });\n        }\n    }\n\n    mustRenderToTexture() {\n        // Check if we must really render as texture.\n        if (this._enabled && !this.lazy) {\n            return true;\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\n            return true;\n        }\n        return false;\n    }\n\n    deactivate() {\n        this.release();\n    }\n\n    get renderTextureReused() {\n        return this._renderTextureReused;\n    }\n\n    release() {\n        this.releaseRenderTexture();\n    }\n\n    releaseRenderTexture() {\n        if (this._renderTexture) {\n            if (!this._renderTextureReused) {\n                this.ctx.releaseRenderTexture(this._renderTexture);\n            }\n            this._renderTexture = null;\n            this._renderTextureReused = false;\n            this.updateResultTexture();\n        }\n    }\n\n    // Reuses the specified texture as the render texture (in ancestor).\n    reuseTextureAsRenderTexture(nativeTexture) {\n        if (this._renderTexture !== nativeTexture) {\n            this.releaseRenderTexture();\n            this._renderTexture = nativeTexture;\n            this._renderTextureReused = true;\n        }\n    }\n\n    hasRenderTexture() {\n        return !!this._renderTexture;\n    }\n\n    getRenderTexture() {\n        if (!this._renderTexture) {\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\n            this._renderTextureReused = false;\n        }\n        return this._renderTexture;\n    }\n\n    getResultTexture() {\n        return this._renderTexture;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\n\nexport default class ElementCore {\n\n    constructor(element) {\n        this._element = element;\n\n        this.ctx = element.stage.ctx;\n\n        // The memory layout of the internal variables is affected by their position in the constructor.\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\n\n        this._recalc = 0;\n\n        this._parent = null;\n\n        this._onUpdate = null;\n\n        this._pRecalc = 0;\n\n        this._worldContext = new ElementCoreContext();\n\n        this._hasUpdates = false;\n\n        this._localAlpha = 1;\n\n        this._onAfterCalcs = null;\n\n        this._onAfterUpdate = null;\n\n        // All local translation/transform updates: directly propagated from x/y/w/h/scale/whatever.\n        this.isRTL = this.ctx.stage.getOption('RTL');\n        \n        this._localPx = 0;\n        this._localPy = 0;\n\n        this._localTa = 1;\n        this._localTb = 0;\n        this._localTc = 0;\n        this._localTd = 1;\n\n        this._isComplex = false;\n\n        this._dimsUnknown = false;\n\n        this._clipping = false;\n\n        // Used by both update and render.\n        this._zSort = false;\n\n        this._outOfBounds = 0;\n\n        /**\n         * The texture source to be displayed.\n         * @type {TextureSource}\n         */\n        this._displayedTextureSource = null;\n\n        this._zContextUsage = 0;\n\n        this._children = null;\n\n        this._hasRenderUpdates = 0;\n\n        this._zIndexedChildren = null;\n\n        this._renderContext = this._worldContext;\n\n        this.renderState = this.ctx.renderState;\n\n        this._scissor = null;\n\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\n        this._shaderOwner = null;\n\n\n        this._updateTreeOrder = 0;\n\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\n\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n\n        this._optFlags = 0;\n        this._funcX = null;\n        this._funcY = null;\n        this._funcW = null;\n        this._funcH = null;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n        this._pivotX = 0.5;\n        this._pivotY = 0.5;\n        this._mountX = 0;\n        this._mountY = 0;\n        this._rotation = 0;\n\n        this._alpha = 1;\n        this._visible = true;\n\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n\n        this._zIndex = 0;\n        this._forceZIndexContext = false;\n        this._zParent = null;\n\n        this._isRoot = false;\n\n        /**\n         * Iff true, during zSort, this element should be 're-sorted' because either:\n         * - zIndex did chang\n         * - zParent did change\n         * - element was moved in the render tree\n         * @type {boolean}\n         */\n        this._zIndexResort = false;\n\n        this._shader = null;\n\n        // Element is rendered on another texture.\n        this._renderToTextureEnabled = false;\n\n        this._texturizer = null;\n\n        this._useRenderToTexture = false;\n\n        this._boundsMargin = null;\n\n        this._recBoundsMargin = null;\n\n        this._withinBoundsMargin = false;\n\n        this._viewport = null;\n\n        this._clipbox = true;\n\n        this.render = this._renderSimple;\n\n        this._layout = null;\n    }\n\n    get offsetX() {\n        if (this._funcX) {\n            return this._funcX;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalX;\n            } else {\n                return this._x;\n            }\n        }\n    }\n\n    set offsetX(v) {\n        if (Utils.isFunction(v)) {\n            this.funcX = v;\n        } else {\n            this._disableFuncX();\n            if (this.hasFlexLayout()) {\n                this.x += (v - this._layout.originalX);\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\n            } else {\n                this.x = v;\n            }\n        }\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        if (v !== this._x) {\n            this._updateLocalTranslateDelta(v - this._x, 0);\n            this._x = v;\n        }\n    }\n\n    get funcX() {\n        return (this._optFlags & 1 ? this._funcX : null);\n    }\n\n    set funcX(v) {\n        if (this._funcX !== v) {\n            this._optFlags |= 1;\n            this._funcX = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._x = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncX() {\n        this._optFlags = this._optFlags & (0xFFFF - 1);\n        this._funcX = null;\n    }\n\n    get offsetY() {\n        if (this._funcY) {\n            return this._funcY;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalY;\n            } else {\n                return this._y;\n            }\n        }\n    }\n\n    set offsetY(v) {\n        if (Utils.isFunction(v)) {\n            this.funcY = v;\n        } else {\n            this._disableFuncY();\n            if (this.hasFlexLayout()) {\n                this.y += (v - this._layout.originalY);\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\n            } else {\n                this.y = v;\n            }\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        if (v !== this._y) {\n            this._updateLocalTranslateDelta(0, v - this._y);\n            this._y = v;\n        }\n    }\n\n    get funcY() {\n        return (this._optFlags & 2 ? this._funcY : null);\n    }\n\n    set funcY(v) {\n        if (this._funcY !== v) {\n            this._optFlags |= 2;\n            this._funcY = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._y = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncY() {\n        this._optFlags = this._optFlags & (0xFFFF - 2);\n        this._funcY = null;\n    }\n\n    get funcW() {\n        return (this._optFlags & 4 ? this._funcW : null);\n    }\n\n    set funcW(v) {\n        if (this._funcW !== v) {\n            this._optFlags |= 4;\n            this._funcW = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalWidth = 0;\n                this.layout.changedDimensions(true, false);\n            } else {\n                this._w = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncW() {\n        this._optFlags = this._optFlags & (0xFFFF - 4);\n        this._funcW = null;\n    }\n\n    get funcH() {\n        return (this._optFlags & 8 ? this._funcH : null);\n    }\n\n    set funcH(v) {\n        if (this._funcH !== v) {\n            this._optFlags |= 8;\n            this._funcH = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalHeight = 0;\n                this.layout.changedDimensions(false, true);\n            } else {\n                this._h = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncH() {\n        this._optFlags = this._optFlags & (0xFFFF - 8);\n        this._funcH = null;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    getRenderWidth() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalWidth;\n        } else {\n            return this._w;\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    getRenderHeight() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalHeight;\n        } else {\n            return this._h;\n        }\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(v) {\n        if (this._scaleX !== v) {\n            this._scaleX = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(v) {\n        if (this._scaleY !== v) {\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scale() {\n        return this.scaleX;\n    }\n\n    set scale(v) {\n        if (this._scaleX !== v || this._scaleY !== v) {\n            this._scaleX = v;\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        if (this._pivotX !== v) {\n            this._pivotX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        if (this._pivotY !== v) {\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivot() {\n        return this._pivotX;\n    }\n\n    set pivot(v) {\n        if (this._pivotX !== v || this._pivotY !== v) {\n            this._pivotX = v;\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountX() {\n        return this._mountX;\n    }\n\n    set mountX(v) {\n        if (this._mountX !== v) {\n            this._mountX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountY() {\n        return this._mountY;\n    }\n\n    set mountY(v) {\n        if (this._mountY !== v) {\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mount() {\n        return this._mountX;\n    }\n\n    set mount(v) {\n        if (this._mountX !== v || this._mountY !== v) {\n            this._mountX = v;\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(v) {\n        if (this._rotation !== v) {\n            this._rotation = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get alpha() {\n        return this._alpha;\n    }\n\n    set alpha(v) {\n        // Account for rounding errors.\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\n        if (this._alpha !== v) {\n            let prev = this._alpha;\n            this._alpha = v;\n            this._updateLocalAlpha();\n            if ((prev === 0) !== (v === 0)) {\n                this._element._updateEnabledFlag();\n            }\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (this._visible !== v) {\n            this._visible = v;\n            this._updateLocalAlpha();\n            this._element._updateEnabledFlag();\n\n            if (this.hasFlexLayout()) {\n                this.layout.setVisible(v);\n            }\n        }\n    }\n\n    _updateLocalTransform() {\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\n            let _sr = Math.sin(this._rotation);\n            let _cr = Math.cos(this._rotation);\n\n            this._setLocalTransform(\n                _cr * this._scaleX,\n                -_sr * this._scaleY,\n                _sr * this._scaleX,\n                _cr * this._scaleY\n            );\n        } else {\n            this._setLocalTransform(\n                this._scaleX,\n                0,\n                0,\n                this._scaleY\n            );\n        }\n        this._updateLocalTranslate();\n    };\n\n    _updateLocalTranslate() {\n        this._recalcLocalTranslate();\n        this._triggerRecalcTranslate();\n    };\n\n    _recalcLocalTranslate() {\n        let pivotXMul = this._pivotX * this._w;\n        let pivotYMul = this._pivotY * this._h;\n        let px;\n        if (this.isRTL) {\n            px = this._x + (pivotXMul * this._localTa + pivotYMul * this._localTb) - pivotXMul;\n        } else {\n            px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\n        }\n\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\n        px -= this._mountX * this._w;\n        py -= this._mountY * this._h;\n        this._localPx = px;\n        this._localPy = py;\n    }\n\n    _updateLocalTranslateDelta(dx, dy) {\n        this._addLocalTranslate(dx, dy);\n    };\n\n    _updateLocalAlpha() {\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\n    };\n\n    /**\n     * @param {number} type\n     * 0: no updates\n     * 1: re-invoke shader\n     * 3: re-create render texture and re-invoke shader\n     */\n    setHasRenderUpdates(type) {\n        if (this._worldContext.alpha) {\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\n            let p = this;\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\n                p._hasRenderUpdates = 3;\n            }\n        }\n    }\n\n    /**\n     * @param {Number} type\n     *   1: alpha\n     *   2: translate\n     *   4: transform\n     * 128: becomes visible\n     * 256: flex layout updated\n     */\n    _setRecalc(type) {\n        this._recalc |= type;\n\n        this._setHasUpdates();\n\n        // Any changes in descendants should trigger texture updates.\n        if (this._parent) {\n            this._parent.setHasRenderUpdates(3);\n        }\n    }\n\n    _setHasUpdates() {\n        let p = this;\n        while (p && !p._hasUpdates) {\n            p._hasUpdates = true;\n            p = p._parent;\n        }\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(parent) {\n        if (parent !== this._parent) {\n            let prevIsZContext = this.isZContext();\n            let prevParent = this._parent;\n            this._parent = parent;\n\n            // Notify flex layout engine.\n            if (this._layout || (parent && parent.isFlexContainer())) {\n                this.layout.setParent(prevParent, parent);\n            }\n\n            if (prevParent) {\n                // When elements are deleted, the render texture must be re-rendered.\n                prevParent.setHasRenderUpdates(3);\n            }\n\n            this._setRecalc(1 + 2 + 4);\n\n            if (this._parent) {\n                // Force parent to propagate hasUpdates flag.\n                this._parent._setHasUpdates();\n            }\n\n            if (this._zIndex === 0) {\n                this.setZParent(parent);\n            } else {\n                this.setZParent(parent ? parent.findZContext() : null);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(prevParent.findZContext());\n                }\n            }\n\n            // Tree order did change: even if zParent stays the same, we must resort.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n\n            if (!this._shader) {\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\n                if (newShaderOwner !== this._shaderOwner) {\n                    this.setHasRenderUpdates(1);\n                    this._setShaderOwnerRecursive(newShaderOwner);\n                }\n            }\n        }\n    };\n\n    enableZSort(force = false) {\n        if (!this._zSort && this._zContextUsage > 0) {\n            this._zSort = true;\n            if (force) {\n                // ZSort must be done, even if this element is invisible.\n                // This is done to prevent memory leaks when removing element from inactive render branches.\n                this.ctx.forceZSort(this);\n            }\n        }\n    }\n\n    addChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children.splice(index, 0, child);\n        child.setParent(this);\n    };\n\n    setChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children[index].setParent(null);\n        this._children[index] = child;\n        child.setParent(this);\n    }\n\n    removeChildAt(index) {\n        let child = this._children[index];\n        this._children.splice(index, 1);\n        child.setParent(null);\n    };\n\n    removeChildren() {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i].setParent(null);\n            }\n\n            this._children.splice(0);\n\n            if (this._zIndexedChildren) {\n                this._zIndexedChildren.splice(0);\n            }\n        }\n    };\n\n    syncChildren(removed, added, order) {\n        this._children = order;\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i].setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            added[i].setParent(this);\n        }\n    }\n\n    moveChild(fromIndex, toIndex) {\n        let c = this._children[fromIndex];\n        this._children.splice(fromIndex, 1);\n        this._children.splice(toIndex, 0, c);\n\n        // Tree order changed: must resort!;\n        this._zIndexResort = true;\n        if (this._zParent) {\n            this._zParent.enableZSort();\n        }\n    }\n\n    _setLocalTransform(a, b, c, d) {\n        this._setRecalc(4);\n        this._localTa = a;\n        this._localTb = b;\n        this._localTc = c;\n        this._localTd = d;\n\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\n    };\n\n    _addLocalTranslate(dx, dy) {\n        this._localPx += dx;\n        this._localPy += dy;\n        this._triggerRecalcTranslate();\n    }\n\n    _setLocalAlpha(a) {\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\n            // Element is becoming visible. We need to force update.\n            this._setRecalc(1 + 128);\n        } else {\n            this._setRecalc(1);\n        }\n\n        if (a < 1e-14) {\n            // Tiny rounding errors may cause failing visibility tests.\n            a = 0;\n        }\n\n        this._localAlpha = a;\n    };\n\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\n        // In case of an estimation, the update loop should perform different bound checks.\n        this._dimsUnknown = isEstimate;\n\n        if (this.hasFlexLayout()) {\n            this._layout.originalWidth = w;\n            this._layout.originalHeight = h;\n        } else {\n            if (this._w !== w || this._h !== h) {\n                this._updateDimensions(w, h);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _updateDimensions(w, h) {\n        if (this._w !== w || this._h !== h) {\n            this._w = w;\n            this._h = h;\n\n            this._triggerRecalcTranslate();\n\n            if (this._texturizer) {\n                this._texturizer.releaseRenderTexture();\n                this._texturizer.updateResultTexture();\n            }\n            // Due to width/height change: update the translation vector.\n            this._updateLocalTranslate();\n        }\n    }\n\n    setTextureCoords(ulx, uly, brx, bry) {\n        this.setHasRenderUpdates(3);\n\n        this._ulx = ulx;\n        this._uly = uly;\n        this._brx = brx;\n        this._bry = bry;\n    };\n\n    get displayedTextureSource() {\n        return this._displayedTextureSource;\n    }\n\n    setDisplayedTextureSource(textureSource) {\n        this.setHasRenderUpdates(3);\n        this._displayedTextureSource = textureSource;\n    };\n\n    get isRoot() {\n        return this._isRoot;\n    }\n\n    setAsRoot() {\n        // Use parent dummy.\n        this._parent = new ElementCore(this._element);\n\n        // After setting root, make sure it's updated.\n        this._parent._hasRenderUpdates = 3;\n        this._parent._hasUpdates = true;\n\n        // Root is, and will always be, the primary zContext.\n        this._isRoot = true;\n\n        this.ctx.root = this;\n\n        // Set scissor area of 'fake parent' to stage's viewport.\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\n        this._parent._scissor = this._parent._viewport;\n\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\n        this._parent._recBoundsMargin = null;\n\n        this._setRecalc(1 + 2 + 4);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while (p = p._parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    isZContext() {\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\n    };\n\n    findZContext() {\n        if (this.isZContext()) {\n            return this;\n        } else {\n            return this._parent.findZContext();\n        }\n    };\n\n    setZParent(newZParent) {\n        if (this._zParent !== newZParent) {\n            if (this._zParent !== null) {\n                if (this._zIndex !== 0) {\n                    this._zParent.decZContextUsage();\n                }\n\n                // We must filter out this item upon the next resort.\n                this._zParent.enableZSort();\n            }\n\n            if (newZParent !== null) {\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\n\n                // @pre: new parent's children array has already been modified.\n                if (this._zIndex !== 0) {\n                    newZParent.incZContextUsage();\n                }\n\n                if (newZParent._zContextUsage > 0) {\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\n                        // This child was already in the children list.\n                        // Do not add double.\n                    } else {\n                        // Add new child to array.\n                        newZParent._zIndexedChildren.push(this);\n                    }\n\n                    // Order should be checked.\n                    newZParent.enableZSort();\n                }\n            }\n\n            this._zParent = newZParent;\n\n            // Newly added element must be marked for resort.\n            this._zIndexResort = true;\n        }\n    };\n\n    incZContextUsage() {\n        this._zContextUsage++;\n        if (this._zContextUsage === 1) {\n            if (!this._zIndexedChildren) {\n                this._zIndexedChildren = [];\n            }\n            if (this._children) {\n                // Copy.\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._zIndexedChildren.push(this._children[i]);\n                }\n                // Initially, children are already sorted properly (tree order).\n                this._zSort = false;\n            }\n        }\n    };\n\n    decZContextUsage() {\n        this._zContextUsage--;\n        if (this._zContextUsage === 0) {\n            this._zSort = false;\n            this._zIndexedChildren.splice(0);\n        }\n    };\n\n    get zIndex() {\n        return this._zIndex;\n    }\n\n    set zIndex(zIndex) {\n        if (this._zIndex !== zIndex) {\n            this.setHasRenderUpdates(1);\n\n            let newZParent = this._zParent;\n\n            let prevIsZContext = this.isZContext();\n            if (zIndex === 0 && this._zIndex !== 0) {\n                if (this._parent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.decZContextUsage();\n                    }\n                } else {\n                    newZParent = this._parent;\n                }\n            } else if (zIndex !== 0 && this._zIndex === 0) {\n                newZParent = this._parent ? this._parent.findZContext() : null;\n                if (newZParent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.incZContextUsage();\n                        this._zParent.enableZSort();\n                    }\n                }\n            } else if (zIndex !== this._zIndex) {\n                if (this._zParent && this._zParent._zContextUsage) {\n                    this._zParent.enableZSort();\n                }\n            }\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(null);\n            }\n\n            this._zIndex = zIndex;\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(newZParent);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(this._parent.findZContext());\n                }\n            }\n\n            // Make sure that resort is done.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n        }\n    };\n\n    get forceZIndexContext() {\n        return this._forceZIndexContext;\n    }\n\n    set forceZIndexContext(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevIsZContext = this.isZContext();\n        this._forceZIndexContext = v;\n\n        if (prevIsZContext !== this.isZContext()) {\n            if (!this.isZContext()) {\n                this.disableZContext();\n            } else {\n                this.enableZContext(this._parent.findZContext());\n            }\n        }\n    };\n\n    enableZContext(prevZContext) {\n        if (prevZContext && prevZContext._zContextUsage > 0) {\n            // Transfer from upper z context to this z context.\n            const results = this._getZIndexedDescs();\n            results.forEach((c) => {\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\n                    c.setZParent(this);\n                }\n            });\n        }\n    }\n\n    _getZIndexedDescs() {\n        const results = [];\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n        return results;\n    }\n\n    _getZIndexedDescsRec(results) {\n        if (this._zIndex) {\n            results.push(this);\n        } else if (this._children && !this.isZContext()) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n    }\n\n    disableZContext() {\n        // Transfer from this z context to upper z context.\n        if (this._zContextUsage > 0) {\n            let newZParent = this._parent.findZContext();\n\n            // Make sure that z-indexed children are up to date (old ones removed).\n            if (this._zSort) {\n                this.sortZIndexedChildren();\n            }\n\n            this._zIndexedChildren.slice().forEach(function (c) {\n                if (c._zIndex !== 0) {\n                    c.setZParent(newZParent);\n                }\n            });\n        }\n    };\n\n    get colorUl() {\n        return this._colorUl;\n    }\n\n    set colorUl(color) {\n        if (this._colorUl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUl = color;\n        }\n    }\n\n    get colorUr() {\n        return this._colorUr;\n    }\n\n    set colorUr(color) {\n        if (this._colorUr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUr = color;\n        }\n    };\n\n    get colorBl() {\n        return this._colorBl;\n    }\n\n    set colorBl(color) {\n        if (this._colorBl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBl = color;\n        }\n    };\n\n    get colorBr() {\n        return this._colorBr;\n    }\n\n    set colorBr(color) {\n        if (this._colorBr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBr = color;\n        }\n    };\n\n\n    set onUpdate(f) {\n        this._onUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterUpdate(f) {\n        this._onAfterUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterCalcs(f) {\n        this._onAfterCalcs = f;\n        this._setRecalc(7);\n    }\n\n    get shader() {\n        return this._shader;\n    }\n\n    set shader(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevShader = this._shader;\n        this._shader = v;\n        if (!v && prevShader) {\n            // Disabled shader.\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\n            this._setShaderOwnerRecursive(newShaderOwner);\n        } else if (v) {\n            // Enabled shader.\n            this._setShaderOwnerRecursive(this);\n        }\n    }\n\n    get activeShader() {\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\n    }\n\n    get activeShaderOwner() {\n        return this._shaderOwner;\n    }\n\n    get clipping() {\n        return this._clipping;\n    }\n\n    set clipping(v) {\n        if (this._clipping !== v) {\n            this._clipping = v;\n\n            // Force update of scissor by updating translate.\n            // Alpha must also be updated because the scissor area may have been empty.\n            this._setRecalc(1 + 2);\n        }\n    }\n\n    get clipbox() {\n        return this._clipbox;\n    }\n\n    set clipbox(v) {\n        // In case of out-of-bounds element, all children will also be ignored.\n        // It will save us from executing the update/render loops for those.\n        // The optimization will be used immediately during the next frame.\n        this._clipbox = v;\n    }\n\n    _setShaderOwnerRecursive(elementCore) {\n        this._shaderOwner = elementCore;\n\n        if (this._children && !this._renderToTextureEnabled) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _setShaderOwnerChildrenRecursive(elementCore) {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _hasRenderContext() {\n        return this._renderContext !== this._worldContext;\n    }\n\n    get renderContext() {\n        return this._renderContext;\n    }\n\n    updateRenderToTextureEnabled() {\n        // Enforce texturizer initialisation.\n        let v = this.texturizer._enabled;\n\n        if (v) {\n            this._enableRenderToTexture();\n        } else {\n            this._disableRenderToTexture();\n            this._texturizer.releaseRenderTexture();\n        }\n    }\n\n    _enableRenderToTexture() {\n        if (!this._renderToTextureEnabled) {\n            let prevIsZContext = this.isZContext();\n\n            this._renderToTextureEnabled = true;\n\n            this._renderContext = new ElementCoreContext();\n\n            // If render to texture is active, a new shader context is started.\n            this._setShaderOwnerChildrenRecursive(null);\n\n            if (!prevIsZContext) {\n                // Render context forces z context.\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\n            }\n\n            this.setHasRenderUpdates(3);\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.render = this._renderAdvanced;\n        }\n    }\n\n    _disableRenderToTexture() {\n        if (this._renderToTextureEnabled) {\n            this._renderToTextureEnabled = false;\n\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\n\n            this._renderContext = this._worldContext;\n\n            if (!this.isZContext()) {\n                this.disableZContext();\n            }\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.setHasRenderUpdates(3);\n\n            this.render = this._renderSimple;\n        }\n    }\n\n    isWhite() {\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\n    }\n\n    hasSimpleTexCoords() {\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\n    }\n\n    _stashTexCoords() {\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n    }\n\n    _unstashTexCoords() {\n        this._ulx = this._stashedTexCoords[0];\n        this._uly = this._stashedTexCoords[1];\n        this._brx = this._stashedTexCoords[2];\n        this._bry = this._stashedTexCoords[3];\n        this._stashedTexCoords = null;\n    }\n\n    _stashColors() {\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\n        this._colorUl = 0xFFFFFFFF;\n        this._colorUr = 0xFFFFFFFF;\n        this._colorBr = 0xFFFFFFFF;\n        this._colorBl = 0xFFFFFFFF;\n    }\n\n    _unstashColors() {\n        this._colorUl = this._stashedColors[0];\n        this._colorUr = this._stashedColors[1];\n        this._colorBr = this._stashedColors[2];\n        this._colorBl = this._stashedColors[3];\n        this._stashedColors = null;\n    }\n\n    isVisible() {\n        return (this._localAlpha > 1e-14);\n    };\n\n    get outOfBounds() {\n        return this._outOfBounds;\n    }\n\n    set boundsMargin(v) {\n\n        /**\n         *  null: inherit from parent.\n         *  number[4]: specific margins: left, top, right, bottom.\n         */\n        this._boundsMargin = v ? v.slice() : null;\n\n        // We force recalc in order to set all boundsMargin recursively during the next update.\n        this._triggerRecalcTranslate();\n    }\n\n    get boundsMargin() {\n        return this._boundsMargin;\n    }\n\n    update() {\n        this._recalc |= this._parent._pRecalc;\n\n        if (this._layout && this._layout.isEnabled()) {\n            if (this._recalc & 256) {\n                this._layout.layoutFlexTree();\n            }\n        } else if ((this._recalc & 2) && this._optFlags) {\n            this._applyRelativeDimFuncs();\n        }\n\n        if (this._onUpdate) {\n            // Block all 'upwards' updates when changing things in this branch.\n            this._hasUpdates = true;\n            this._onUpdate(this.element, this);\n        }\n\n        const pw = this._parent._worldContext;\n        let w = this._worldContext;\n        const visible = (pw.alpha && this._localAlpha);\n\n        /**\n         * We must update if:\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\n         * - there are (inherited) updates and this branch is visible\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\n         */\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\n            let recalc = this._recalc;\n\n            // Update world coords/alpha.\n            if (recalc & 1) {\n                if (!w.alpha && visible) {\n                    // Becomes visible.\n                    this._hasRenderUpdates = 3;\n                }\n                w.alpha = pw.alpha * this._localAlpha;\n\n                if (w.alpha < 1e-14) {\n                    // Tiny rounding errors may cause failing visibility tests.\n                    w.alpha = 0;\n                }\n            }\n\n            if (recalc & 6) {\n                let calculatedX = this._localPx;\n                if (this.isRTL) {\n                    const parentW = this._element.__parent ? this._parent.w || 0 : this.ctx.stage.getOption('w');\n                    calculatedX = parentW - (this._w || 0) - this._localPx;\n                }\n\n                w.px = pw.px + calculatedX * pw.ta;\n                w.py = pw.py + this._localPy * pw.td;\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\n                if (pw.tc !== 0) w.py += calculatedX * pw.tc;\n            }\n\n            if (recalc & 4) {\n                w.ta = this._localTa * pw.ta;\n                w.tb = this._localTd * pw.tb;\n                w.tc = this._localTa * pw.tc;\n                w.td = this._localTd * pw.td;\n\n                if (this._isComplex) {\n                    w.ta += this._localTc * pw.tb;\n                    w.tb += this._localTb * pw.ta;\n                    w.tc += this._localTc * pw.td;\n                    w.td += this._localTb * pw.tc;\n                }\n            }\n\n            // Update render coords/alpha.\n            const pr = this._parent._renderContext;\n            if (this._parent._hasRenderContext()) {\n                const init = this._renderContext === this._worldContext;\n                if (init) {\n                    // First render context build: make sure that it is fully initialized correctly.\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\n                    this._renderContext = new ElementCoreContext();\n                }\n\n                const r = this._renderContext;\n\n                // Update world coords/alpha.\n                if (init || (recalc & 1)) {\n                    r.alpha = pr.alpha * this._localAlpha;\n\n                    if (r.alpha < 1e-14) {\n                        r.alpha = 0;\n                    }\n                }\n\n                if (init || (recalc & 6)) {\n                    let calculatedX = this._localPx;\n                    if (this.isRTL) {\n                      const parentW = this._element.__parent\n                        ? this._parent.w || 0\n                        : this.ctx.stage.getOption(\"w\");\n                      calculatedX = parentW - (this._w || 0) - this._localPx;\n                    }\n                    \n                    r.px = pr.px + calculatedX * pr.ta;\n                    r.py = pr.py + this._localPy * pr.td;\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\n                    if (pr.tc !== 0) r.py += calculatedX * pr.tc;\n                }\n\n                if (init) {\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\n                    recalc |= 2;\n                }\n\n                if (init || (recalc & 4)) {\n                    r.ta = this._localTa * pr.ta;\n                    r.tb = this._localTd * pr.tb;\n                    r.tc = this._localTa * pr.tc;\n                    r.td = this._localTd * pr.td;\n\n                    if (this._isComplex) {\n                        r.ta += this._localTc * pr.tb;\n                        r.tb += this._localTb * pr.ta;\n                        r.tc += this._localTc * pr.td;\n                        r.td += this._localTb * pr.tc;\n                    }\n                }\n            } else {\n                this._renderContext = this._worldContext;\n            }\n\n            if (this.ctx.updateTreeOrder === -1) {\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\n            } else {\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\n            }\n\n            // Determine whether we must use a 'renderTexture'.\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\n            if (this._useRenderToTexture !== useRenderToTexture) {\n                // Coords must be changed.\n                this._recalc |= 2 + 4;\n\n                // Scissor may change: force update.\n                recalc |= 2;\n\n                if (!this._useRenderToTexture) {\n                    // We must release the texture.\n                    this._texturizer.release();\n                }\n            }\n            this._useRenderToTexture = useRenderToTexture;\n\n            const r = this._renderContext;\n\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\n\n            // Calculate a bbox for this element.\n            let sx, sy, ex, ey;\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\n            if (rComplex) {\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n            } else {\n                sx = r.px;\n                ex = r.px + r.ta * bboxW;\n                sy = r.py;\n                ey = r.py + r.td * bboxH;\n            }\n\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                if (nx < sx) sx = nx;\n                if (ny < sy) sy = ny;\n                if (nx > ex) ex = nx;\n                if (ny > ey) ey = ny;\n            }\n\n            if (recalc & 6 || !this._scissor /* initial */) {\n                // Determine whether we must 'clip'.\n                if (this._clipping && r.isSquare()) {\n                    // If the parent renders to a texture, it's scissor should be ignored;\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                    if (area) {\n                        // Merge scissor areas.\n                        const lx = Math.max(area[0], sx);\n                        const ly = Math.max(area[1], sy);\n                        this._scissor = [\n                            lx,\n                            ly,\n                            Math.min(area[2] + area[0], ex) - lx,\n                            Math.min(area[3] + area[1], ey) - ly\n                        ];\n                    } else {\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\n                    }\n                } else {\n                    // No clipping: reuse parent scissor.\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                }\n            }\n\n            // Calculate the outOfBounds margin.\n            if (this._boundsMargin) {\n                this._recBoundsMargin = this._boundsMargin;\n            } else {\n                this._recBoundsMargin = this._parent._recBoundsMargin;\n            }\n\n            if (this._onAfterCalcs) {\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\n                if (this._onAfterCalcs(this.element)) {\n                    // Recalculate bbox.\n                    if (rComplex) {\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                    } else {\n                        sx = r.px;\n                        ex = r.px + r.ta * bboxW;\n                        sy = r.py;\n                        ey = r.py + r.td * bboxH;\n                    }\n\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                        if (nx < sx) sx = nx;\n                        if (ny < sy) sy = ny;\n                        if (nx > ex) ex = nx;\n                        if (ny > ey) ey = ny;\n                    }\n                }\n            }\n\n            if (this._parent._outOfBounds === 2) {\n                // Inherit parent out of boundsness.\n                this._outOfBounds = 2;\n\n                if (this._withinBoundsMargin) {\n                    this._withinBoundsMargin = false;\n                    this.element._disableWithinBoundsMargin();\n                }\n            } else {\n                if (recalc & 6) {\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\n                    this._outOfBounds = 0;\n                    let withinMargin = true;\n\n                    // Offscreens are always rendered as long as the parent is within bounds.\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\n                            // Empty scissor area.\n                            this._outOfBounds = 2;\n                        } else {\n                            // Use bbox to check out-of-boundness.\n                            if ((this._scissor[0] > ex) ||\n                                (this._scissor[1] > ey) ||\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\n                                (sy > (this._scissor[1] + this._scissor[3]))\n                            ) {\n                                this._outOfBounds = 1;\n                            }\n\n                            if (this._outOfBounds) {\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\n                                    this._outOfBounds = 2;\n                                }\n                            }\n                        }\n\n                        withinMargin = (this._outOfBounds === 0);\n                        if (!withinMargin) {\n                            // Re-test, now with margins.\n                            if (this._recBoundsMargin) {\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\n                            } else {\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\n                                    (ey < this._scissor[1] - 100) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\n                            }\n                            if (withinMargin && this._outOfBounds === 2) {\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\n                                this._outOfBounds = 1;\n                            }\n                        }\n                    }\n\n                    if (this._withinBoundsMargin !== withinMargin) {\n                        this._withinBoundsMargin = withinMargin;\n\n                        if (this._withinBoundsMargin) {\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\n\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\n                            // _recalc directly.\n\n                            // Changes in descendants are automatically executed within the current update loop, though we must\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\n                            this._hasUpdates = true;\n\n                            const recalc = this._recalc;\n                            this._recalc = 0;\n                            this.element._enableWithinBoundsMargin();\n\n                            if (this._recalc) {\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\n                                return this.update();\n                            }\n\n                            this._recalc = recalc;\n                        } else {\n                            this.element._disableWithinBoundsMargin();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                // Set viewport necessary for children scissor calculation.\n                if (this._viewport) {\n                    this._viewport[2] = bboxW;\n                    this._viewport[3] = bboxH;\n                } else {\n                    this._viewport = [0, 0, bboxW, bboxH];\n                }\n            }\n\n            // Filter out bits that should not be copied to the children (currently all are).\n            this._pRecalc = (this._recalc & 135);\n\n            // Clear flags so that future updates are properly detected.\n            this._recalc = 0;\n            this._hasUpdates = false;\n\n            if (this._outOfBounds < 2) {\n                if (this._useRenderToTexture) {\n                    if (this._worldContext.isIdentity()) {\n                        // Optimization.\n                        // The world context is already identity: use the world context as render context to prevents the\n                        // ancestors from having to update the render context.\n                        this._renderContext = this._worldContext;\n                    } else {\n                        // Temporarily replace the render coord attribs by the identity matrix.\n                        // This allows the children to calculate the render context.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n                    }\n                }\n\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        this._children[i].update();\n                    }\n                }\n\n                if (this._useRenderToTexture) {\n                    this._renderContext = r;\n                }\n            } else {\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._hasUpdates) {\n                            this._children[i].update();\n                        } else {\n                            // Make sure we don't lose the 'inherited' updates.\n                            this._children[i]._recalc |= this._pRecalc;\n                            this._children[i].updateOutOfBounds();\n                        }\n                    }\n                }\n            }\n\n            if (this._onAfterUpdate) {\n                this._onAfterUpdate(this.element);\n            }\n        } else {\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\n                this.ctx.updateTreeOrder = -1;\n            } else {\n                this.updateTreeOrder();\n            }\n        }\n    }\n\n    _applyRelativeDimFuncs() {\n        if (this._optFlags & 1) {\n            const x = this._funcX(this._parent.w);\n            if (x !== this._x) {\n                this._localPx += (x - this._x);\n                this._x = x;\n            }\n        }\n        if (this._optFlags & 2) {\n            const y = this._funcY(this._parent.h);\n            if (y !== this._y) {\n                this._localPy += (y - this._y);\n                this._y = y;\n            }\n        }\n\n        let changedDims = false;\n        if (this._optFlags & 4) {\n            const w = this._funcW(this._parent.w);\n            if (w !== this._w) {\n                this._w = w;\n                changedDims = true;\n            }\n        }\n        if (this._optFlags & 8) {\n            const h = this._funcH(this._parent.h);\n            if (h !== this._h) {\n                this._h = h;\n                changedDims = true;\n            }\n        }\n\n        if (changedDims) {\n            // Recalc mount, scale position.\n            this._recalcLocalTranslate();\n\n            this.element.onDimensionsChanged(this._w, this._h);\n        }\n    }\n\n    updateOutOfBounds() {\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\n\n            // Inherit parent out of boundsness.\n            this._outOfBounds = 2;\n\n            if (this._withinBoundsMargin) {\n                this._withinBoundsMargin = false;\n                this.element._disableWithinBoundsMargin();\n            }\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateOutOfBounds();\n                }\n            }\n        }\n    }\n\n    updateTreeOrder() {\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateTreeOrder();\n                }\n            }\n        }\n    }\n\n    _renderSimple() {\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                renderState.setShader(this.activeShader, this._shaderOwner);\n                renderState.setScissor(this._scissor);\n                this.renderState.addQuad(this);\n            }\n\n            // Also add children to the VBO.\n            if (this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n\n    _renderAdvanced() {\n        const hasRenderUpdates = this._hasRenderUpdates;\n\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            let mustRenderChildren = true;\n            let renderTextureInfo;\n            let prevRenderTextureInfo;\n            if (this._useRenderToTexture) {\n                if (this._w === 0 || this._h === 0) {\n                    // Ignore this branch and don't draw anything.\n                    return;\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\n                    this.ctx.renderToTextureCount++;\n                    // Switch to default shader for building up the render texture.\n                    renderState.setShader(renderState.defaultShader, this);\n\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\n\n                    renderTextureInfo = {\n                        nativeTexture: null,\n                        offset: 0,  // Set by CoreRenderState.\n                        w: this._w,\n                        h: this._h,\n                        empty: true,\n                        cleared: false,\n                        ignore: false,\n                        cache: false\n                    };\n\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\n                        /**\n                         * We don't always cache render textures.\n                         *\n                         * The rule is, that caching for a specific render texture is only enabled if:\n                         * - There is a result texture to be updated.\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\n                         *   change while a lower one is not, that lower level will be cached instead.\n                         *\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\n                         * of GPU memory!\n                         *\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\n                         * noticable effect on performance as less render textures need to be allocated.\n                         */\n                        renderTextureInfo.cache = true;\n                        renderState.isCachingTexturizer = true;\n                    }\n\n                    if (!this._texturizer.hasResultTexture()) {\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\n                        //  render-to-texture layer.\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\n                        //  that result texture being filled.\n                        this._texturizer.releaseRenderTexture();\n                    }\n\n                    renderState.setRenderTextureInfo(renderTextureInfo);\n                    renderState.setScissor(null);\n\n                    if (this._displayedTextureSource) {\n                        let r = this._renderContext;\n\n                        // Use an identity context for drawing the displayed texture to the render texture.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n\n                        // Add displayed texture source in local coordinates.\n                        this.renderState.addQuad(this);\n\n                        this._renderContext = r;\n                    }\n                } else {\n                    mustRenderChildren = false;\n                }\n            } else {\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                    renderState.setShader(this.activeShader, this._shaderOwner);\n                    renderState.setScissor(this._scissor);\n                    this.renderState.addQuad(this);\n                }\n            }\n\n            // Also add children to the VBO.\n            if (mustRenderChildren && this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                let updateResultTexture = false;\n                if (mustRenderChildren) {\n                    // Finished refreshing renderTexture.\n                    renderState.finishedRenderTexture();\n\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\n                    //  render-to-texture and filtering.\n                    this._texturizer.empty = renderTextureInfo.empty;\n\n                    if (renderTextureInfo.empty) {\n                        // We ignore empty render textures and do not draw the final quad.\n\n                        // The following cleans up memory and enforces that the result texture is also cleared.\n                        this._texturizer.releaseRenderTexture();\n                    } else if (renderTextureInfo.nativeTexture) {\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\n\n                        renderTextureInfo.ignore = true;\n                    } else {\n                        if (this._texturizer.renderTextureReused) {\n                            // Quad operations must be written to a render texture actually owned.\n                            this._texturizer.releaseRenderTexture();\n                        }\n                        // Just create the render texture.\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\n                    }\n\n                    // Restore the parent's render texture.\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\n\n                    updateResultTexture = true;\n                }\n\n                if (!this._texturizer.empty) {\n                    let resultTexture = this._texturizer.getResultTexture();\n                    if (updateResultTexture) {\n                        if (resultTexture) {\n                            // Logging the update frame can be handy for userland.\n                            resultTexture.update = renderState.stage.frameCounter;\n                        }\n                        this._texturizer.updateResultTexture();\n                    }\n\n                    if (!this._texturizer.renderOffscreen) {\n                        // Render result texture to the actual render target.\n                        renderState.setShader(this.activeShader, this._shaderOwner);\n                        renderState.setScissor(this._scissor);\n\n                        // If no render texture info is set, the cache can be reused.\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\n\n                        renderState.setTexturizer(this._texturizer, cache);\n                        this._stashTexCoords();\n                        if (!this._texturizer.colorize) this._stashColors();\n                        this.renderState.addQuad(this, true);\n                        if (!this._texturizer.colorize) this._unstashColors();\n                        this._unstashTexCoords();\n                        renderState.setTexturizer(null);\n                    }\n                }\n            }\n\n            if (renderTextureInfo && renderTextureInfo.cache) {\n                // Allow siblings to cache.\n                renderState.isCachingTexturizer = false;\n            }\n        }\n    }\n\n    get zSort() {\n        return this._zSort;\n    }\n\n    sortZIndexedChildren() {\n        /**\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\n         * - filtering out elements with a different zParent than this (were removed)\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\n         * - then, finally, we merge-sort both the new array and the 'old' one\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\n         */\n\n        const n = this._zIndexedChildren.length;\n        let ptr = 0;\n        const a = this._zIndexedChildren;\n\n        // Notice that items may occur multiple times due to z-index changing.\n        const b = [];\n        for (let i = 0; i < n; i++) {\n            if (a[i]._zParent === this) {\n                if (a[i]._zIndexResort) {\n                    b.push(a[i]);\n                } else {\n                    if (ptr !== i) {\n                        a[ptr] = a[i];\n                    }\n                    ptr++;\n                }\n            }\n        }\n\n        const m = b.length;\n        if (m) {\n            for (let j = 0; j < m; j++) {\n                b[j]._zIndexResort = false;\n            }\n\n            b.sort(ElementCore.sortZIndexedChildren);\n            const n = ptr;\n            if (!n) {\n                ptr = 0;\n                let j = 0;\n                do {\n                    a[ptr++] = b[j++];\n                } while (j < m);\n\n                if (a.length > ptr) {\n                    // Slice old (unnecessary) part off array.\n                    a.splice(ptr);\n                }\n            } else {\n                a.splice(n); // Remove items that were sorted in b array, so that we can sort a\n+               // Beware that the function passed here to Array.sort must be stable\n+               a.sort(ElementCore.sortZIndexedChildren); // Needed because items with same _zIndex may not be ordered by _updateTreeOrder\n                // Merge-sort arrays;\n                ptr = 0;\n                let i = 0;\n                let j = 0;\n                const mergeResult = [];\n                do {\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\n\n                    const add = v > 0 ? b[j++] : a[i++];\n\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                        mergeResult[ptr++] = add;\n                    }\n\n                    if (i >= n) {\n                        do {\n                            const add = b[j++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (j < m);\n                        break;\n                    } else if (j >= m) {\n                        do {\n                            const add = a[i++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (i < n);\n                        break;\n                    }\n                } while (true);\n\n                this._zIndexedChildren = mergeResult;\n            }\n        } else {\n            if (a.length > ptr) {\n                // Slice old (unnecessary) part off array.\n                a.splice(ptr);\n            }\n        }\n\n        this._zSort = false;\n    };\n\n    get localTa() {\n        return this._localTa;\n    };\n\n    get localTb() {\n        return this._localTb;\n    };\n\n    get localTc() {\n        return this._localTc;\n    };\n\n    get localTd() {\n        return this._localTd;\n    };\n\n    get element() {\n        return this._element;\n    }\n\n    get renderUpdates() {\n        return this._hasRenderUpdates;\n    }\n\n    get texturizer() {\n        if (!this._texturizer) {\n            this._texturizer = new ElementTexturizer(this);\n        }\n        return this._texturizer;\n    }\n\n    getCornerPoints() {\n        let w = this._worldContext;\n\n        return [\n            w.px,\n            w.py,\n            w.px + this._w * w.ta,\n            w.py + this._w * w.tc,\n            w.px + this._w * w.ta + this._h * w.tb,\n            w.py + this._w * w.tc + this._h * w.td,\n            w.px + this._h * w.tb,\n            w.py + this._h * w.td\n        ];\n    };\n\n    getRenderTextureCoords(relX, relY) {\n        let r = this._renderContext;\n        return [\n            r.px + r.ta * relX + r.tb * relY,\n            r.py + r.tc * relX + r.td * relY\n        ];\n    }\n\n    getAbsoluteCoords(relX, relY) {\n        let w = this._renderContext;\n        return [\n            w.px + w.ta * relX + w.tb * relY,\n            w.py + w.tc * relX + w.td * relY\n        ];\n    }\n\n    collectAtCoord(x, y, children) {\n        // return when branch is hidden\n        if (this._renderContext.alpha === 0) {\n            return;\n        }\n\n        if (this.inBound(x, y)) {\n            if (this._scissor) {\n                if (this.inScissor()) {\n                    children.push(this);\n                }\n            } else {\n                children.push(this);\n            }\n        }\n\n        if (this._children) {\n            const j = this._children.length;\n            for (let i = 0; i < j; i++) {\n                this._children[i].collectAtCoord(x, y, children);\n            }\n        }\n\n        return children.sort(ElementCore.sortZIndexedChildren);\n    }\n\n    inBound(tx, ty) {\n        const c = this.getCornerPoints();\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\n    }\n\n    inScissor() {\n        const sc = this._scissor;\n        const c = this.getCornerPoints();\n\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\n    }\n\n    get layout() {\n        this._ensureLayout();\n        return this._layout;\n    }\n\n    get flex() {\n        return this._layout ? this._layout.flex : null;\n    }\n\n    set flex(v) {\n        this.layout.flex = v;\n    }\n\n    get flexItem() {\n        return this._layout ? this._layout.flexItem : null;\n    }\n\n    set flexItem(v) {\n        this.layout.flexItem = v;\n    }\n\n    isFlexItem() {\n        return !!this._layout && this._layout.isFlexItemEnabled();\n    }\n\n    isFlexContainer() {\n        return !!this._layout && this._layout.isFlexEnabled();\n    }\n\n    enableFlexLayout() {\n        this._ensureLayout();\n    }\n\n    _ensureLayout() {\n        if (!this._layout) {\n            this._layout = new FlexTarget(this);\n        }\n    }\n\n    disableFlexLayout() {\n        this._triggerRecalcTranslate();\n    }\n\n    hasFlexLayout() {\n        return (this._layout && this._layout.isEnabled());\n    }\n\n    setLayout(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this._updateDimensions(w, h);\n    }\n\n    triggerLayout() {\n        this._setRecalc(256);\n    }\n\n    _triggerRecalcTranslate() {\n        this._setRecalc(2);\n    }\n\n}\n\nclass ElementCoreContext {\n\n    constructor() {\n        this.alpha = 1;\n\n        this.px = 0;\n        this.py = 0;\n\n        this.ta = 1;\n        this.tb = 0;\n        this.tc = 0;\n        this.td = 1;\n    }\n\n    isIdentity() {\n        return this.alpha === 1 &&\n            this.px === 0 &&\n            this.py === 0 &&\n            this.ta === 1 &&\n            this.tb === 0 &&\n            this.tc === 0 &&\n            this.td === 1;\n    }\n\n    isSquare() {\n        return this.tb === 0 && this.tc === 0;\n    }\n\n}\n\nElementCoreContext.IDENTITY = new ElementCoreContext();\nElementCore.sortZIndexedChildren = function (a, b) {\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\n};\n\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\nimport Utils from \"../Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a partial (and more efficient) implementation of the event emitter.\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\n * Only if there are multiple listeners, they are combined in an array.\n */\nexport default class EventEmitter {\n\n    constructor() {\n        // This is set (and kept) to true when events are used at all.\n        this._hasEventListeners = false;\n    }\n\n    on(name, listener) {\n        if (!this._hasEventListeners) {\n            this._eventFunction = {}\n            this._eventListeners = {}\n            this._hasEventListeners = true;\n        }\n\n        const current = this._eventFunction[name];\n        if (!current) {\n            this._eventFunction[name] = listener;\n        } else {\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\n                this._eventListeners[name] = [this._eventFunction[name], listener];\n                this._eventFunction[name] = EventEmitter.combiner;\n            } else {\n                this._eventListeners[name].push(listener);\n            }\n        }\n    }\n\n    once(name, listener) {\n        const wrapper = (arg1, arg2, arg3) => {\n            listener(arg1, arg2, arg3);\n            this.off(name, wrapper);\n        }\n        wrapper.__originalFunc = listener;\n        this.on(name, wrapper);\n    }\n\n    has(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    for (const l of listeners) {\n                        if (l === listener || l.__originalFunc == listener) {\n                            return true;\n                        }\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    off(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    let index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    if (listeners.length === 1) {\n                        this._eventFunction[name] = listeners[0];\n                        this._eventListeners[name] = undefined;\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    this._eventFunction[name] = undefined;\n                }\n            }\n        }\n    }\n\n    removeListener(name, listener) {\n        this.off(name, listener);\n    }\n\n    emit(name, arg1, arg2, arg3) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    func(this, name, arg1, arg2, arg3);\n                } else {\n                    func(arg1, arg2, arg3);\n                }\n            }\n        }\n    }\n\n    listenerCount(name) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    return this._eventListeners[name].length;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    removeAllListeners(name) {\n        if (this._hasEventListeners) {\n            delete this._eventFunction[name];\n            delete this._eventListeners[name];\n        }\n    }\n\n}\n\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\n    const listeners = object._eventListeners[name];\n    if (listeners) {\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\n           we need to create a copy to loop over it */\n        for (const listener of [...listeners]) {\n            listener(arg1, arg2, arg3);\n        }\n    }\n}\n\nEventEmitter.addAsMixin = function(cls) {\n    cls.prototype.on = EventEmitter.prototype.on;\n    cls.prototype.once = EventEmitter.prototype.once;\n    cls.prototype.has = EventEmitter.prototype.has;\n    cls.prototype.off = EventEmitter.prototype.off;\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\n    cls.prototype.emit = EventEmitter.prototype.emit;\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"./Utils.mjs\";\nimport Base from \"./Base.mjs\";\n\nexport default class Shader {\n\n    constructor(coreContext) {\n        this._initialized = false;\n\n        this.ctx = coreContext;\n\n        /**\n         * The (enabled) elements that use this shader.\n         * @type {Set<ElementCore>}\n         */\n        this._elements = new Set();\n    }\n\n    static create(stage, v) {\n        let shader;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                shader = stage.renderer.createShader(stage.ctx, v);\n            } else {\n                shader = this.shader;\n            }\n\n            if (shader) {\n                Base.patchObject(shader, v);\n            }\n        } else if (v === null) {\n            shader = stage.ctx.renderState.defaultShader;\n        } else if (v === undefined) {\n            shader = null;\n        } else {\n            if (v.isShader) {\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\n                    console.error(\"[Lightning] Invalid shader type\");\n                    v = null;\n                }\n                shader = v;\n            } else {\n                console.error(\"[Lightning] Please specify a shader type.\");\n                return;\n            }\n        }\n\n        return shader;\n    }\n\n    static getWebGL() {\n        return undefined;\n    }\n\n    static getC2d() {\n        return undefined;\n    }\n\n    addElement(elementCore) {\n        this._elements.add(elementCore);\n    }\n\n    removeElement(elementCore) {\n        this._elements.delete(elementCore);\n        if (!this._elements) {\n            this.cleanup();\n        }\n    }\n\n    redraw() {\n        this._elements.forEach(elementCore => {\n            elementCore.setHasRenderUpdates(2);\n        });\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    useDefault() {\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\n        return false;\n    }\n\n    addEmpty() {\n        // Draws this shader even if there are no quads to be added.\n        // This is handy for custom shaders.\n        return false;\n    }\n\n    cleanup() {\n        // Called when no more enabled elements have this shader.\n    }\n\n    get isShader() {\n        return true;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Texture {\n\n    /**\n     * @param {Stage} stage\n     */\n    constructor(stage) {\n        this.stage = stage;\n\n        this.manager = this.stage.textureManager;\n\n        this.id = Texture.id++;\n\n        /**\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\n         * @type {Set<Element>}\n         */\n        this.elements = new Set();\n\n        /**\n         * The number of enabled elements that are active.\n         * @type {number}\n         */\n        this._activeCount = 0;\n\n        /**\n         * The associated texture source.\n         * Should not be changed.\n         * @type {TextureSource}\n         */\n        this._source = null;\n\n        /**\n         * A resize mode can be set to cover or contain a certain area.\n         * It will reset the texture clipping settings.\n         * When manual texture clipping is performed, the resizeMode is reset.\n         * @type {{type: string, width: number, height: number}}\n         * @private\n         */\n        this._resizeMode = null;\n\n        /**\n         * The texture clipping x-offset.\n         * @type {number}\n         */\n        this._x = 0;\n\n        /**\n         * The texture clipping y-offset.\n         * @type {number}\n         */\n        this._y = 0;\n\n        /**\n         * The texture clipping width. If 0 then full width.\n         * @type {number}\n         */\n        this._w = 0;\n\n        /**\n         * The texture clipping height. If 0 then full height.\n         * @type {number}\n         */\n        this._h = 0;\n\n        /**\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\n         * @type {number}\n         * @private\n         */\n        this._precision = 1;\n\n        /**\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mw = 0;\n\n        /**\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mh = 0;\n\n        /**\n         * Indicates if Texture.prototype.texture uses clipping.\n         * @type {boolean}\n         */\n        this.clipping = false;\n\n        /**\n         * Indicates whether this texture must update (when it becomes used again).\n         * @type {boolean}\n         * @private\n         */\n        this._mustUpdate = true;\n\n    }\n\n    get source() {\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\n            this._performUpdateSource(true);\n            this.stage.removeUpdateSourceTexture(this);\n        }\n        return this._source;\n    }\n\n    addElement(v) {\n        if (!this.elements.has(v)) {\n            this.elements.add(v);\n\n            if (this.elements.size === 1) {\n                if (this._source) {\n                    this._source.addTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.incActiveCount();\n            }\n        }\n    }\n\n    removeElement(v) {\n        if (this.elements.delete(v)) {\n            if (this.elements.size === 0) {\n                if (this._source) {\n                    this._source.removeTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.decActiveCount();\n            }\n        }\n    }\n\n    incActiveCount() {\n        // Ensure that texture source's activeCount has transferred ownership.\n        const source = this.source;\n\n        if (source) {\n            this._checkForNewerReusableTextureSource();\n        }\n\n        this._activeCount++;\n        if (this._activeCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveCount() {\n        const source = this.source; // Force updating the source.\n        this._activeCount--;\n        if (!this._activeCount) {\n            this.becomesUnused();\n        }\n    }\n\n    becomesUsed() {\n        if (this.source) {\n            this.source.incActiveTextureCount();\n        }\n    }\n\n    onLoad() {\n        if (this._resizeMode) {\n            this._applyResizeMode();\n        }\n\n        this.elements.forEach(element => {\n            if (element.active) {\n                element.onTextureSourceLoaded();\n            }\n        });\n    }\n\n    _checkForNewerReusableTextureSource() {\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\n        // In the meantime another texture may have been generated loaded with the same lookup id.\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\n        const source = this.source;\n        if (!source.isLoaded()) {\n            const reusable = this._getReusableTextureSource();\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\n                this._replaceTextureSource(reusable);\n            }\n        } else {\n            if (this._resizeMode) {\n                this._applyResizeMode();\n            }\n        }\n    }\n\n    becomesUnused() {\n        if (this.source) {\n            this.source.decActiveTextureCount();\n        }\n    }\n\n    isUsed() {\n        return this._activeCount > 0;\n    }\n\n    /**\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\n     * @returns {string|null}\n     */\n    _getLookupId() {\n        // Default: do not reuse texture.\n        return null;\n    }\n\n    /**\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\n     * It should return a function that receives a single callback argument.\n     * That callback should be called with the following arguments:\n     *   - err\n     *   - options: object\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\n     *     - w: Number\n     *     - h: Number\n     *     - permanent: Boolean\n     *     - hasAlpha: boolean\n     *     - permultiplyAlpha: boolean\n     *     - flipBlueRed: boolean\n     *     - renderInfo: object\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\n     * to stop fetching an image when it is no longer in element, for example.\n     */\n    _getSourceLoader() {\n        throw new Error(\"Texture.generate must be implemented.\");\n    }\n\n    get isValid() {\n        return this._getIsValid();\n    }\n\n    /**\n     * If texture is not 'valid', no source can be created for it.\n     * @returns {boolean}\n     */\n    _getIsValid() {\n        return true;\n    }\n\n    /**\n     * This must be called when the texture source must be re-generated.\n     */\n    _changed() {\n        // If no element is actively using this texture, ignore it altogether.\n        if (this.isUsed()) {\n            this._updateSource();\n        } else {\n            this._mustUpdate = true;\n        }\n    }\n\n    _updateSource() {\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\n        // properties.\n        this.stage.addUpdateSourceTexture(this);\n    }\n\n    _performUpdateSource(force = false) {\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\n        // again.\n        if (force || this.isUsed()) {\n            this._mustUpdate = false;\n            let source = this._getTextureSource();\n            this._replaceTextureSource(source);\n        }\n    }\n\n    _getTextureSource() {\n        let source = null;\n        if (this._getIsValid()) {\n            const lookupId = this._getLookupId();\n            source = this._getReusableTextureSource(lookupId);\n            if (!source) {\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\n            }\n        }\n        return source;\n    }\n\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\n        if (this._getIsValid()) {\n            if (lookupId) {\n                return this.manager.getReusableTextureSource(lookupId);\n            }\n        }\n        return null;\n    }\n\n    _replaceTextureSource(newSource = null) {\n        let oldSource = this._source;\n\n        this._source = newSource;\n\n        if (this.elements.size) {\n            if (oldSource) {\n                if (this._activeCount) {\n                    oldSource.decActiveTextureCount();\n                }\n\n                oldSource.removeTexture(this);\n\n                // free up unused TextTextures immediately as they are not reused anyway\n                if(this['text'] && !oldSource.isUsed()) {\n                    this.manager.freeTextureSource(oldSource);\n                }\n            }\n\n            if (newSource) {\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\n                newSource.addTexture(this);\n                if (this._activeCount) {\n                    newSource.incActiveTextureCount();\n                }\n            }\n        }\n\n        if (this.isUsed()) {\n            if (newSource) {\n                if (newSource.isLoaded()) {\n\n                    // Apply resizeMode\n                    if (this._resizeMode) {\n                        this._applyResizeMode();\n                    }\n\n                    this.elements.forEach(element => {\n                        if (element.active) {\n                            element._setDisplayedTexture(this);\n                        }\n                    });\n                } else {\n                    const loadError = newSource.loadError;\n                    if (loadError) {\n                        this.elements.forEach(element => {\n                            if (element.active) {\n                                element.onTextureSourceLoadError(loadError);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.elements.forEach(element => {\n                    if (element.active) {\n                        element._setDisplayedTexture(null);\n                    }\n                });\n            }\n        }\n    }\n\n    load() {\n        // Make sure that source is up to date.\n        if (this.source) {\n            if (!this.isLoaded()) {\n                this.source.load(true);\n            }\n        }\n    }\n\n    isLoaded() {\n        return this._source && this._source.isLoaded();\n    }\n\n    get loadError() {\n        return this._source && this._source.loadError;\n    }\n\n    free() {\n        if (this._source) {\n            this._source.free();\n        }\n    }\n\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\n        this._resizeMode = {type, w, h, clipX, clipY};\n        if (this.isLoaded()) {\n            this._applyResizeMode();\n        }\n    }\n\n    get resizeMode() {\n        return this._resizeMode;\n    }\n\n    _clearResizeMode() {\n        this._resizeMode = null;\n    }\n\n    _applyResizeMode() {\n        if (this._resizeMode.type === \"cover\") {\n            this._applyResizeCover();\n        } else if (this._resizeMode.type === \"contain\") {\n            this._applyResizeContain();\n        }\n        this._updatePrecision();\n        this._updateClipping();\n    }\n\n    _applyResizeCover() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = Math.max(scaleX, scaleY);\n        if (!scale) return;\n        this._precision = 1/scale;\n        if (scaleX && scaleX < scale) {\n            const desiredSize = this._precision * this._resizeMode.w;\n            const choppedOffPixels = this._source.w - desiredSize;\n            this._x = choppedOffPixels * this._resizeMode.clipX;\n            this._w = this._source.w - choppedOffPixels;\n        }\n        if (scaleY && scaleY < scale) {\n            const desiredSize = this._precision * this._resizeMode.h;\n            const choppedOffPixels = this._source.h - desiredSize;\n            this._y = choppedOffPixels * this._resizeMode.clipY;\n            this._h = this._source.h - choppedOffPixels;\n        }\n    }\n\n    _applyResizeContain() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = scaleX;\n        if (!scale || scaleY < scale) {\n            scale = scaleY;\n        }\n        if (!scale) return;\n        this._precision = 1/scale;\n    }\n\n    enableClipping(x, y, w, h) {\n        this._clearResizeMode();\n\n        x *= this._precision;\n        y *= this._precision;\n        w *= this._precision;\n        h *= this._precision;\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\n            this._x = x;\n            this._y = y;\n            this._w = w;\n            this._h = h;\n\n            this._updateClipping(true);\n        }\n    }\n\n    disableClipping() {\n        this._clearResizeMode();\n\n        if (this._x || this._y || this._w || this._h) {\n            this._x = 0;\n            this._y = 0;\n            this._w = 0;\n            this._h = 0;\n\n            this._updateClipping();\n        }\n    }\n\n    _updateClipping() {\n        this.clipping = !!(this._x || this._y || this._w || this._h);\n\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onDisplayedTextureClippingChanged();\n            }\n        });\n    }\n\n    _updatePrecision() {\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onPrecisionChanged();\n            }\n        });\n    }\n\n    getNonDefaults() {\n        let nonDefaults = {};\n        nonDefaults['type'] = this.constructor.name;\n        if (this.x !== 0) nonDefaults['x'] = this.x;\n        if (this.y !== 0) nonDefaults['y'] = this.y;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\n        return nonDefaults;\n    }\n\n    get px() {\n        return this._x;\n    }\n\n    get py() {\n        return this._y;\n    }\n\n    get pw() {\n        return this._w;\n    }\n\n    get ph() {\n        return this._h;\n    }\n\n    get x() {\n        return this._x / this._precision;\n    }\n    set x(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._x !== v) {\n            this._x = v;\n            this._updateClipping();\n        }\n    }\n\n    get y() {\n        return this._y / this._precision;\n    }\n    set y(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._y !== v) {\n            this._y = v;\n            this._updateClipping();\n        }\n    }\n\n    get w() {\n        return this._w / this._precision;\n    }\n\n    set w(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._w !== v) {\n            this._w = v;\n            this._updateClipping();\n        }\n    }\n\n    get h() {\n        return this._h / this._precision;\n    }\n\n    set h(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._h !== v) {\n            this._h = v;\n            this._updateClipping();\n        }\n    }\n\n    get precision() {\n        return this._precision;\n    }\n\n    set precision(v) {\n        this._clearResizeMode();\n        if (this._precision !== v) {\n            this._precision = v;\n            this._updatePrecision();\n        }\n    }\n\n    isAutosizeTexture() {\n        return true;\n    }\n\n    getRenderWidth() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\n    }\n\n    getRenderHeight() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nTexture.prototype.isTexture = true;\n\nTexture.id = 0;\n\nimport Base from \"./Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class ImageTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._src = undefined;\n        this._hasAlpha = false;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set src(v) {\n        if (this._src !== v) {\n            this._src = v;\n            this._changed();\n        }\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    set hasAlpha(v) {\n        if (this._hasAlpha !== v) {\n            this._hasAlpha = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this._src;\n    }\n\n    _getLookupId() {\n        return this._src;\n    }\n\n    _getSourceLoader() {\n        let src = this._src;\n        let hasAlpha = this._hasAlpha;\n        if (this.stage.getOption('srcBasePath')) {\n            var fc = src.charCodeAt(0);\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\n                // Alphabetical or dot: prepend base path.\n                src = this.stage.getOption('srcBasePath') + src;\n            }\n        }\n\n        return (cb) => {\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\n        }\n    }\n\n    getNonDefaults() {\n        const obj = super.getNonDefaults();\n        if (this._src) {\n            obj.src = this._src;\n        }\n        return obj;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns CSS font setting string for use in canvas context.\n *\n * @param fontFace\n * @param fontStyle\n * @param fontSize\n * @param precision\n * @param defaultFontFace\n * @returns\n */\nexport function getFontSetting(\n    fontFace: string | string[],\n    fontStyle: string,\n    fontSize: number,\n    precision: number,\n    defaultFontFace: string\n): string {\n    let ff = fontFace;\n\n    if (!Array.isArray(ff)) {\n        ff = [ff];\n    }\n\n    let ffs = [];\n    for (let i = 0, n = ff.length; i < n; i++) {\n        let curFf = ff[i];\n        // Replace the default font face `null` with the actual default font face set\n        // on the stage.\n        if (curFf === null) {\n            curFf = defaultFontFace;\n        }\n        if (curFf === \"serif\" || curFf === \"sans-serif\") {\n            ffs.push(curFf);\n        } else {\n            ffs.push(`\"${curFf}\"`);\n        }\n    }\n\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\n}\n\n/**\n * Returns true if the given character is a zero-width space.\n *\n * @param space\n */\nexport function isZeroWidthSpace(space: string): boolean {\n    return space === '' || space === '\\u200B';\n}\n\n/**\n * Returns true if the given character is a zero-width space or a regular space.\n *\n * @param space\n */\nexport function isSpace(space: string): boolean {\n    return isZeroWidthSpace(space) || space === ' ';\n}\n\n/**\n * Converts a string into an array of tokens and the words between them.\n *\n * @param tokenRegex\n * @param text\n */\nexport function tokenizeString(tokenRegex: RegExp, text: string): string[] {\n    const delimeters = text.match(tokenRegex) || [];\n    const words = text.split(tokenRegex) || [];\n\n    let final: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        final.push(words[i]!, delimeters[i]!)\n    }\n    final.pop()\n    return final.filter((word) => word != '');\n}\n\n/**\n * Measure the width of a string accounting for letter spacing.\n *\n * @param context\n * @param word\n * @param space\n */\nexport function measureText(context: CanvasRenderingContext2D, word: string, space: number = 0): number {\n    if (!space) {\n        return context.measureText(word).width;\n    }\n    return word.split('').reduce((acc, char) => {\n        // Zero-width spaces should not include letter spacing.\n        // And since we know the width of a zero-width space is 0, we can skip\n        // measuring it.\n        if (isZeroWidthSpace(char)) {\n            return acc;\n        }\n        return acc + context.measureText(char).width + space;\n    }, 0);\n}\n\nexport interface WrapTextResult {\n    l: string[];\n    n: number[];\n}\n\n/**\n * Applies newlines to a string to have it optimally fit into the horizontal\n * bounds set by the Text object's wordWrapWidth property.\n *\n * @param context\n * @param text\n * @param wordWrapWidth\n * @param letterSpacing\n * @param indent\n */\nexport function wrapText(\n    context: CanvasRenderingContext2D,\n    text: string,\n    wordWrapWidth: number,\n    letterSpacing: number,\n    indent: number\n): WrapTextResult {\n    // Greedy wrapping algorithm that will wrap words as the line grows longer.\n    // than its horizontal bounds.\n    const spaceRegex = / |\\u200B/g;\n    let lines = text.split(/\\r?\\n/g);\n    let allLines: string[] = [];\n    let realNewlines: number[] = [];\n    for (let i = 0; i < lines.length; i++) {\n        let resultLines: string[] = [];\n        let result = '';\n        let spaceLeft = wordWrapWidth - indent;\n        let words = lines[i]!.split(spaceRegex);\n        let spaces = lines[i]!.match(spaceRegex) || [];\n        for (let j = 0; j < words.length; j++) {\n            const space = spaces[j - 1] || '';\n            const word = words[j]!;\n            const wordWidth = measureText(context, word, letterSpacing);\n            const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);\n            if (j === 0 || wordWidthWithSpace > spaceLeft) {\n                // Skip printing the newline if it's the first word of the line that is.\n                // greater than the word wrap width.\n                if (j > 0) {\n                    resultLines.push(result);\n                    result = '';\n                }\n                result += word;\n                spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\n            }\n            else {\n                spaceLeft -= wordWidthWithSpace;\n                result += space + word;\n            }\n        }\n\n        resultLines.push(result);\n        result = '';\n\n        allLines = allLines.concat(resultLines);\n\n        if (i < lines.length - 1) {\n            realNewlines.push(allLines.length);\n        }\n    }\n\n    return {l: allLines, n: realNewlines};\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, measureText, wrapText } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRenderer {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        this._context.font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n            this._settings.fontWeight,\n        );\n        this._context.textBaseline = this._settings.textBaseline;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace'),\n                this._settings.fontWeight,\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('[Lightning] Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('[Lightning] Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        let lineHeight = this._settings.lineHeight * precision;\n        const w = this._settings.w * precision;\n        const h = this._settings.h * precision;\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\n        const textIndent = this._settings.textIndent * precision;\n\n        // Set font properties.\n        this.setFontProperties();\n\n        // Total width.\n        let width = w || this._stage.getOption('w');\n\n        // Inner width.\n        let innerWidth = width - (paddingLeft);\n        if (innerWidth < 10) {\n            width += (10 - innerWidth);\n            innerWidth = 10;\n        }\n\n        if (!wordWrapWidth) {\n            wordWrapWidth = innerWidth\n        }\n\n        // Text overflow\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix)\n        }\n\n        // word wrap\n        // preserve original text\n        let linesInfo;\n        if (this._settings.wordWrap) {\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\n        } else {\n            linesInfo = {l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: []};\n            let i, n = linesInfo.l.length;\n            for (let i = 0; i < n - 1; i++) {\n                linesInfo.n.push(i);\n            }\n        }\n        let lines = linesInfo.l;\n\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\n            let usedLines = lines.slice(0, this._settings.maxLines);\n\n            let otherLines = null;\n            if (this._settings.maxLinesSuffix) {\n                // Wrap again with max lines suffix enabled.\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\n            } else {\n                otherLines = [''];\n            }\n\n            // Re-assemble the remaining text.\n            let i, n = lines.length;\n            let j = 0;\n            let m = linesInfo.n.length;\n            for (i = this._settings.maxLines; i < n; i++) {\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\n                if (i + 1 < m && linesInfo.n[i + 1]) {\n                    j++;\n                }\n            }\n\n            renderInfo.remainingText = otherLines.join(\"\\n\");\n\n            renderInfo.moreTextLines = true;\n\n            lines = usedLines;\n        } else {\n            renderInfo.moreTextLines = false;\n            renderInfo.remainingText = \"\";\n        }\n\n        // calculate text width\n        let maxLineWidth = 0;\n        let lineWidths = [];\n        for (let i = 0; i < lines.length; i++) {\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\n            lineWidths.push(lineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        renderInfo.lineWidths = lineWidths;\n\n        if (!w) {\n            // Auto-set width to max text length.\n            width = maxLineWidth + paddingLeft + paddingRight;\n            innerWidth = maxLineWidth;\n        }\n\n        // calculate text height\n        lineHeight = lineHeight || fontSize;\n\n        let height;\n        if (h) {\n            height = h;\n        } else {\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\n        }\n\n        if (offsetY === null) {\n            offsetY = fontSize;\n        }\n\n        renderInfo.w = width;\n        renderInfo.h = height;\n        renderInfo.lines = lines;\n        renderInfo.precision = precision;\n\n        if (!width) {\n            // To prevent canvas errors.\n            width = 1;\n        }\n\n        if (!height) {\n            // To prevent canvas errors.\n            height = 1;\n        }\n\n        if (cutSx || cutEx) {\n            width = Math.min(width, cutEx - cutSx);\n        }\n\n        if (cutSy || cutEy) {\n            height = Math.min(height, cutEy - cutSy);\n        }\n\n        renderInfo.width = width;\n        renderInfo.innerWidth = innerWidth;\n        renderInfo.height = height;\n        renderInfo.fontSize = fontSize;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutEy = cutEy;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.lineWidths = lineWidths;\n        renderInfo.offsetY = offsetY;\n        renderInfo.paddingLeft = paddingLeft;\n        renderInfo.paddingRight = paddingRight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textIndent = textIndent;\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n\n        // Add extra margin to prevent issue with clipped text when scaling.\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(renderInfo.height);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n        if (this._stage.getOption('RTL')) {\n            this._context.direction = 'rtl';\n            this._context.textAlign = 'left';\n        }\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        let linePositionX;\n        let linePositionY;\n\n        let drawLines = [];\n\n        // Draw lines line by line.\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\n\n            // By default, text is aligned to top\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\n\n            if (this._settings.verticalAlign == 'middle') {\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\n            } else if (this._settings.verticalAlign == 'bottom') {\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\n            }\n\n            if (this._settings.textAlign === 'right') {\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\n            } else if (this._settings.textAlign === 'center') {\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\n            }\n            linePositionX += renderInfo.paddingLeft;\n\n            drawLines.push({text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i]});\n        }\n\n        // Highlight.\n        if (this._settings.highlight) {\n            let color = this._settings.highlightColor || 0x00000000;\n\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\n            const offset = this._settings.highlightOffset * precision;\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(color);\n            for (let i = 0; i < drawLines.length; i++) {\n                let drawLine = drawLines[i];\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\n        for (let i = 0, n = drawLines.length; i < n; i++) {\n            let drawLine = drawLines[i];\n\n            if (renderInfo.letterSpacing === 0) {\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y);\n            } else {\n                const textSplit = drawLine.text.split('');\n                let x = drawLine.x;\n                for (let i = 0, j = textSplit.length; i < j; i++) {\n                    this._context.fillText(textSplit[i], x, drawLine.y);\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\n                }\n            }\n        }\n\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        this.renderInfo = renderInfo;\n    };\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\n    }\n\n    /**\n     * See {@link wrapText}\n     *\n     * @param {string} text\n     * @param {number} wordWrapWidth\n     * @param {number} letterSpacing\n     * @param {number} indent\n     * @returns\n     */\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\n        return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isSpace, measureText, tokenizeString } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRendererAdvanced {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        const font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n            this._settings.fontWeight,\n        );\n        this._context.font = font;\n        this._context.textBaseline = this._settings.textBaseline;\n        return font;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace'),\n                this._settings.fontWeight,\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\n        // const h = this._settings.h * precision;\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = this._settings.letterSpacing || 0;\n\n        // Set font properties.\n        renderInfo.baseFont = this.setFontProperties();\n\n        renderInfo.w = w;\n        renderInfo.width = w;\n        renderInfo.text = this._settings.text;\n        renderInfo.precision = precision;\n        renderInfo.fontSize = fontSize;\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textAlign = this._settings.textAlign;\n        renderInfo.textColor = this._settings.textColor;\n        renderInfo.verticalAlign = this._settings.verticalAlign;\n        renderInfo.highlight = this._settings.highlight;\n        renderInfo.highlightColor = this._settings.highlightColor;\n        renderInfo.highlightHeight = this._settings.highlightHeight;\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\n        renderInfo.highlightOffset = this._settings.highlightOffset;\n        renderInfo.paddingLeft = this._settings.paddingLeft;\n        renderInfo.paddingRight = this._settings.paddingRight;\n        renderInfo.maxLines = this._settings.maxLines;\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\n        renderInfo.textOverflow = this._settings.textOverflow;\n        renderInfo.wordWrap = this._settings.wordWrap;\n        renderInfo.wordWrapWidth = wordWrapWidth;\n        renderInfo.shadow = this._settings.shadow;\n        renderInfo.shadowColor = this._settings.shadowColor;\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\n        renderInfo.shadowBlur = this._settings.shadowBlur;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEy = cutEy;\n        renderInfo.textIndent = this._settings.textIndent * precision;\n        renderInfo.wordBreak = this._settings.wordBreak;\n\n        let text = renderInfo.text;\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\n\n        // Text overflow\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\n        }\n\n        text = this.tokenize(text);\n        text = this.parse(text);\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\n\n        if (renderInfo.textIndent) {\n            text = this.indent(text, renderInfo.textIndent);\n        }\n\n        if (renderInfo.wordBreak) {\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\n            this.resetFontStyle()\n        }\n\n        // Calculate detailed drawing information\n        let x = paddingLeft;\n        let lineNo = 0;\n\n        for (const t of text) {\n            // Wrap text\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\n                x = paddingLeft;\n                lineNo += 1;\n            }\n            t.lineNo = lineNo;\n\n            if (t.text == '\\n') {\n                continue;\n            }\n\n            t.x = x;\n            x += t.width;\n        }\n        renderInfo.lineNum = lineNo + 1;\n\n        if (this._settings.h) {\n            renderInfo.h = this._settings.h;\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\n        } else {\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\n        }\n\n        // This calculates the baseline offset in pixels from the font size.\n        // To retrieve this ratio, you would do this calculation:\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\n        //\n        // This give you the ratio for the baseline, which is then used to figure out\n        // where the baseline is relative to the bottom of the text bounding box.\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\n\n        // Vertical align\n        let vaOffset = 0;\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\n            vaOffset = -baselineOffsetInPx;\n        } else if (renderInfo.verticalAlign == 'middle') {\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\n        } else if (this._settings.verticalAlign == 'bottom') {\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\n        }\n\n        // Calculate lines information\n        renderInfo.lines = []\n        for (let i = 0; i < renderInfo.lineNum; i++) {\n            renderInfo.lines[i] = {\n                width: 0,\n                x: 0,\n                y: renderInfo.lineHeight * i + vaOffset,\n                text: [],\n            }\n        }\n\n        for (let t of text) {\n            renderInfo.lines[t.lineNo].text.push(t);\n        }\n\n        // Filter out white spaces at beginning and end of each line\n        for (const l of renderInfo.lines) {\n            if (l.text.length == 0) {\n                continue;\n            }\n\n            const firstWord = l.text[0].text;\n            const lastWord = l.text[l.text.length - 1].text;\n\n            if (firstWord == '\\n') {\n                l.text.shift();\n            }\n            if (isSpace(lastWord) || lastWord == '\\n') {\n                l.text.pop();\n            }\n        }\n\n\n        // Calculate line width\n        for (let l of renderInfo.lines) {\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\n        }\n\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\n        renderInfo.w = renderInfo.width;\n\n        // Apply maxLinesSuffix\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\n            const index = renderInfo.maxLines - 1;\n            let lastLineText = text.filter((t) => t.lineNo == index)\n            let suffix = renderInfo.maxLinesSuffix;\n            suffix = this.tokenize(suffix);\n            suffix = this.parse(suffix);\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\n            for (const s of suffix) {\n                s.lineNo = index;\n                s.x = 0;\n                lastLineText.push(s)\n            }\n\n            const spl = suffix.length + 1\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\n                lastLineText.splice(lastLineText.length - spl, 1);\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n                if (lastLineText.length < spl) {\n                    break;\n                }\n            }\n            this.alignLine(lastLineText, lastLineText[0].x)\n\n            renderInfo.lines[index].text = lastLineText;\n            renderInfo.lines[index].width = _w;\n        }\n\n        // Horizontal alignment offset\n        if (renderInfo.textAlign == 'center') {\n            for (let l of renderInfo.lines) {\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\n            }\n        } else if (renderInfo.textAlign == 'right') {\n            for (let l of renderInfo.lines) {\n                l.x = renderInfo.width - l.width - paddingLeft;\n            }\n        }\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n        const paddingLeft = renderInfo.paddingLeft * precision;\n\n        // Set canvas dimensions\n        let canvasWidth = renderInfo.w || renderInfo.width;\n        if (renderInfo.cutSx || renderInfo.cutEx) {\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\n        }\n\n        let canvasHeight = renderInfo.h;\n        if (renderInfo.cutSy || renderInfo.cutEy) {\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\n        }\n\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(canvasHeight);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        // Cut\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        // Highlight\n        if (renderInfo.highlight) {\n            const hlColor = renderInfo.highlightColor || 0x00000000;\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\n            for (let i = 0; i < lineNum; i++) {\n                const l = renderInfo.lines[i];\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        // Draw text\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\n        let currentColor = defaultColor;\n        this._context.fillStyle = defaultColor;\n        for (const line of renderInfo.lines) {\n            for (const t of line.text) {\n                let lx = 0;\n\n                if (t.text == '\\n') {\n                    continue;\n                }\n\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\n                    continue;\n                }\n\n                if (t.color != currentColor) {\n                    currentColor = t.color;\n                    this._context.fillStyle = currentColor;\n                }\n\n                this._context.font = t.fontStyle;\n\n                // Draw with letter spacing\n                if (t.letters) {\n                    for (let l of t.letters) {\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                        lx += l.width;\n                    }\n                // Standard drawing\n                } else {\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                }\n            }\n        }\n\n        // Reset text shadow\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        // Reset cut translation\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        // Postprocess renderInfo.lines to be compatible with standard version\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\n        if (renderInfo.maxLines) {\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\n        }\n\n\n        this.renderInfo = renderInfo;\n\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n    tokenize(text) {\n        return tokenizeString(/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g, text);\n    }\n\n    parse(tokens) {\n        let italic = 0;\n        let bold = 0;\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\n        let color = 0;\n\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\n\n        return tokens.map((t) => {\n            if (t == '<i>') {\n                italic += 1;\n                t = '';\n            } else if (t == '</i>' && italic > 0) {\n                italic -= 1;\n                t = '';\n            } else if (t == '<b>') {\n                bold += 1;\n                t = '';\n            } else if (t == '</b>' && bold > 0) {\n                bold -= 1;\n                t = '';\n            } else if (t == '</color>') {\n                if (colorStack.length > 1) {\n                    color -= 1;\n                    colorStack.pop();\n                }\n                t = '';\n            } else if (colorRegexp.test(t)) {\n                const matched = colorRegexp.exec(t);\n                colorStack.push(\n                    StageUtils.getRgbaString(parseInt(matched[1]))\n                );\n                color += 1;\n                t = '';\n\n            }\n\n            return {\n                text: t,\n                italic: italic,\n                bold: bold,\n                color: colorStack[color],\n            }\n        })\n        .filter((o) => o.text != '');\n    }\n\n    applyFontStyle(word, baseFont) {\n        let font = baseFont;\n        if (word.bold) {\n            font = 'bold ' + font;\n        }\n        if (word.italic) {\n            font = 'italic ' + font;\n        }\n        this._context.font = font\n        word.fontStyle = font;\n    }\n\n    resetFontStyle(baseFont) {\n        this._context.font = baseFont;\n    }\n\n    measure(parsed, letterSpacing = 0, baseFont) {\n        for (const p of parsed) {\n            this.applyFontStyle(p, baseFont);\n            p.width = this.measureText(p.text, letterSpacing);\n\n            // Letter by letter detail for letter spacing\n            if (letterSpacing > 0) {\n                p.letters = p.text.split('').map((l) => {return {text: l}});\n                for (let l of p.letters) {\n                    l.width = this.measureText(l.text, letterSpacing);\n                }\n            }\n\n        }\n        this.resetFontStyle(baseFont);\n        return parsed;\n    }\n\n    indent(parsed, textIndent) {\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\n        return parsed;\n    }\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\n    }\n\n    _getBreakIndex(word, width) {\n        const wordLen = word.length;\n        const wordWidth = this.measureText(word);\n\n        if (wordWidth <= width) {\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\n        }\n\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > width) {\n            while (breakIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth > width) {\n                    breakIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (breakIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth < width) {\n                    breakIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    breakIndex -=1;\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                    break;\n                }\n            }\n        }\n        return {breakIndex, truncWordWidth};\n\n    }\n\n    wordBreak(word, width, baseFont) {\n        if (!word.text) {\n            return word\n        }\n        this.applyFontStyle(word, baseFont)\n        const parts = [];\n        let text = word.text;\n        if (!word.letters) {\n            while (true) {\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = truncWordWidth;\n\n                if (breakIndex === text.length) {\n                    break;\n                }\n\n                text = text.slice(breakIndex);\n            }\n        } else {\n            let totalWidth = 0;\n            let letters = [];\n            let breakIndex = 0;\n            for (const l of word.letters) {\n                if (totalWidth + l.width >= width) {\n                    parts.push({...word});\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\n                    parts[parts.length - 1].width = totalWidth;\n                    parts[parts.length - 1].letters = letters;\n                    text = text.slice(breakIndex);\n                    totalWidth = 0;\n                    letters = [];\n                    breakIndex = 0;\n\n                } else {\n                    breakIndex += 1;\n                    letters.push(l);\n                    totalWidth += l.width;\n                }\n            }\n\n            if (totalWidth > 0) {\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = totalWidth;\n                parts[parts.length - 1].letters = letters;\n            }\n        }\n\n        return parts;\n    }\n\n    alignLine(parsed, initialX = 0) {\n        let prevWidth = 0;\n        let prevX = initialX;\n        for (const word of parsed) {\n            if (word.text == '\\n') {\n                continue;\n            }\n            word.x = prevX + prevWidth;\n            prevX = word.x;\n            prevWidth = word.width;\n        }\n\n    }\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class TextTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        // We use the stage precision as the default precision in case of a text texture.\n        this._precision = this.stage.getOption('precision');\n    }\n\n    static renderer(stage, canvas, settings) {\n        if (this.advancedRenderer) {\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\n        } else {\n            return new TextTextureRenderer(stage, canvas, settings);\n        }\n    }\n\n    get text() {\n        return this._text;\n    }\n\n    set text(v) {\n        if (this._text !== v) {\n            this._text = \"\" + v;\n            this._changed();\n        }\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (this._w !== v) {\n            this._w = v;\n            this._changed();\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (this._h !== v) {\n            this._h = v;\n            this._changed();\n        }\n    }\n\n    get fontStyle() {\n        return this._fontStyle;\n    }\n\n    set fontStyle(v) {\n        if (this._fontStyle !== v) {\n            this._fontStyle = v;\n            this._changed();\n        }\n    }\n\n    get fontBaselineRatio() {\n        return this._fontBaselineRatio;\n    }\n    \n    set fontBaselineRatio(v) {\n        if (this._fontBaselineRatio !== v) {\n            this._fontBaselineRatio = v;\n            this._changed();\n        }\n    }\n\n    get fontSize() {\n        return this._fontSize;\n    }\n\n    set fontSize(v) {\n        if (this._fontSize !== v) {\n            this._fontSize = v;\n            this._changed();\n        }\n    }\n\n    get fontWeight() {\n        return this._fontWeight;\n    }\n\n    set fontWeight(v) {\n        if (this._fontWeight !== v) {\n            this._fontWeight = v;\n            this._changed();\n        }\n    }\n\n    get fontFace() {\n        return this._fontFace;\n    }\n\n    set fontFace(v) {\n        if (this._fontFace !== v) {\n            this._fontFace = v;\n            this._changed();\n        }\n    }\n\n    get wordWrap() {\n        return this._wordWrap;\n    }\n\n    set wordWrap(v) {\n        if (this._wordWrap !== v) {\n            this._wordWrap = v;\n            this._changed();\n        }\n    }\n\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n\n    set wordWrapWidth(v) {\n        if (this._wordWrapWidth !== v) {\n            this._wordWrapWidth = v;\n            this._changed();\n        }\n    }\n\n    get wordBreak() {\n        return this._wordBreak;\n    }\n\n    set wordBreak(v) {\n        if (this._wordBreak !== v) {\n            this._wordBreak = v;\n            this._changed();\n        }\n    }\n\n    get textOverflow() {\n        return this._textOverflow;\n    }\n\n    set textOverflow(v) {\n        if (v != this._textOverflow) {\n            this._textOverflow = v;\n            this._changed();\n        }\n    }\n\n    get lineHeight() {\n        return this._lineHeight;\n    }\n\n    set lineHeight(v) {\n        if (this._lineHeight !== v) {\n            this._lineHeight = v;\n            this._changed();\n        }\n    }\n\n    get textBaseline() {\n        return this._textBaseline;\n    }\n\n    set textBaseline(v) {\n        if (this._textBaseline !== v) {\n            this._textBaseline = v;\n            this._changed();\n        }\n    }\n\n    get textAlign() {\n        return this._textAlign;\n    }\n\n    set textAlign(v) {\n        if (v != 'center' && this.stage.getOption('RTL')) {\n            v = v == \"right\" ? \"left\" : \"right\";\n        }\n        if (this._textAlign !== v) {\n            this._textAlign = v;\n            this._changed();\n        }\n    }\n\n    get verticalAlign() {\n        return this._verticalAlign;\n    }\n\n    set verticalAlign(v) {\n        if (this._verticalAlign !== v) {\n            this._verticalAlign = v;\n            this._changed();\n        }\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        if (this._offsetY !== v) {\n            this._offsetY = v;\n            this._changed();\n        }\n    }\n\n    get maxLines() {\n        return this._maxLines;\n    }\n\n    set maxLines(v) {\n        if (this._maxLines !== v) {\n            this._maxLines = v;\n            this._changed();\n        }\n    }\n\n    get maxLinesSuffix() {\n        return this._maxLinesSuffix;\n    }\n\n    set maxLinesSuffix(v) {\n        if (this._maxLinesSuffix !== v) {\n            this._maxLinesSuffix = v;\n            this._changed();\n        }\n    }\n\n    get textColor() {\n        return this._textColor;\n    }\n\n    set textColor(v) {\n        if (this._textColor !== v) {\n            this._textColor = v;\n            this._changed();\n        }\n    }\n\n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingLeft(v) {\n        if (this._paddingLeft !== v) {\n            this._paddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingRight(v) {\n        if (this._paddingRight !== v) {\n            this._paddingRight = v;\n            this._changed();\n        }\n    }\n\n    get shadow() {\n        return this._shadow;\n    }\n\n    set shadow(v) {\n        if (this._shadow !== v) {\n            this._shadow = v;\n            this._changed();\n        }\n    }\n\n    get shadowColor() {\n        return this._shadowColor;\n    }\n\n    set shadowColor(v) {\n        if (this._shadowColor !== v) {\n            this._shadowColor = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(v) {\n        if (this._shadowOffsetX !== v) {\n            this._shadowOffsetX = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(v) {\n        if (this._shadowOffsetY !== v) {\n            this._shadowOffsetY = v;\n            this._changed();\n        }\n    }\n\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(v) {\n        if (this._shadowBlur !== v) {\n            this._shadowBlur = v;\n            this._changed();\n        }\n    }\n\n    get highlight() {\n        return this._highlight;\n    }\n\n    set highlight(v) {\n        if (this._highlight !== v) {\n            this._highlight = v;\n            this._changed();\n        }\n    }\n\n    get highlightHeight() {\n        return this._highlightHeight;\n    }\n\n    set highlightHeight(v) {\n        if (this._highlightHeight !== v) {\n            this._highlightHeight = v;\n            this._changed();\n        }\n    }\n\n    get highlightColor() {\n        return this._highlightColor;\n    }\n\n    set highlightColor(v) {\n        if (this._highlightColor !== v) {\n            this._highlightColor = v;\n            this._changed();\n        }\n    }\n\n    get highlightOffset() {\n        return this._highlightOffset;\n    }\n\n    set highlightOffset(v) {\n        if (this._highlightOffset !== v) {\n            this._highlightOffset = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingLeft() {\n        return this._highlightPaddingLeft;\n    }\n\n    set highlightPaddingLeft(v) {\n        if (this._highlightPaddingLeft !== v) {\n            this._highlightPaddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingRight() {\n        return this._highlightPaddingRight;\n    }\n\n    set highlightPaddingRight(v) {\n        if (this._highlightPaddingRight !== v) {\n            this._highlightPaddingRight = v;\n            this._changed();\n        }\n    }\n\n    get cutSx() {\n        return this._cutSx;\n    }\n\n    set cutSx(v) {\n        if (this._cutSx !== v) {\n            this._cutSx = v;\n            this._changed();\n        }\n    }\n\n    get cutEx() {\n        return this._cutEx;\n    }\n\n    set cutEx(v) {\n        if (this._cutEx !== v) {\n            this._cutEx = v;\n            this._changed();\n        }\n    }\n\n    get cutSy() {\n        return this._cutSy;\n    }\n\n    set cutSy(v) {\n        if (this._cutSy !== v) {\n            this._cutSy = v;\n            this._changed();\n        }\n    }\n\n    get cutEy() {\n        return this._cutEy;\n    }\n\n    set cutEy(v) {\n        if (this._cutEy !== v) {\n            this._cutEy = v;\n            this._changed();\n        }\n    }\n\n    get advancedRenderer() {\n        return this._advancedRenderer;\n    }\n\n    set advancedRenderer(v) {\n        if (this._advancedRenderer !== v) {\n            this._advancedRenderer = v;\n            this._changed();\n        }\n    }\n\n    set letterSpacing(v) {\n        if (this._letterSpacing !== v) {\n            this._letterSpacing = v;\n            this._changed();\n        }\n    }\n\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n\n    set textIndent(v) {\n        if (this._textIndent !== v) {\n            this._textIndent = v;\n            this._changed();\n        }\n    }\n\n    get textIndent() {\n        return this._textIndent;\n    }\n\n    get precision() {\n        return super.precision;\n    }\n\n    set precision(v) {\n        // We actually draw differently when the precision changes.\n        if (this.precision !== v) {\n            super.precision = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this.text;\n    }\n\n    _getLookupId() {\n        let parts = [];\n\n        if (this.w !== 0) parts.push(\"w \" + this.w);\n        if (this.h !== 0) parts.push(\"h \" + this.h);\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\n        if (this.fontWeight !== 'normal') parts.push(\"fw\" + this.fontWeight);\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\n        parts.push(\"pc\" + this.precision);\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\n\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\n\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\n\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\n        return id;\n    }\n\n    _getSourceLoader() {\n        const args = this.cloneArgs();\n\n        const gl = this.stage.gl;\n\n        return function (cb) {\n            const canvas = this.stage.platform.getDrawingCanvas();\n            const renderer = (args.advancedRenderer)\n              ? new TextTextureRendererAdvanced(this.stage, canvas, args)\n              : new TextTextureRenderer(this.stage, canvas, args);\n            \n            const p = renderer.draw();\n\n            const texParams = {};\n\n            const sharpCfg = this.stage.getOption('fontSharp');\n            let sharpen = false;\n\n            // Prevent text blur when text texture is downscaled\n            if (Utils.isBoolean(sharpCfg)) {\n                sharpen = sharpCfg;\n            } else if (Utils.isObject(sharpCfg)) {\n                const precision = this.stage.getRenderPrecision();\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\n            }\n\n            if (gl && sharpen) {\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            if (p) {\n                p.then(() => {\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\n                    cb(null, Object.assign({\n                        renderInfo: renderer.renderInfo,\n                        throttle: false,\n                        texParams: texParams,\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n                }).catch((err) => {\n                    cb(err);\n                });\n            } else {\n                cb(null, Object.assign({\n                    renderInfo: renderer.renderInfo,\n                    throttle: false,\n                    texParams: texParams,\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n            }\n        };\n    }\n\n\n    getNonDefaults() {\n        const nonDefaults = super.getNonDefaults();\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\n        if (this.fontWeight !== \"normal\") nonDefaults[\"fontWeight\"] = this.fontWeight;\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\n\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\n\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\n        return nonDefaults;\n    }\n\n    cloneArgs() {\n        let obj = {};\n        obj.text = this._text;\n        obj.w = this._w;\n        obj.h = this._h;\n        obj.fontStyle = this._fontStyle;\n        obj.fontSize = this._fontSize;\n        obj.fontWeight = this._fontWeight;\n        obj.fontBaselineRatio = this._fontBaselineRatio;\n        obj.fontFace = this._fontFace;\n        obj.wordWrap = this._wordWrap;\n        obj.wordWrapWidth = this._wordWrapWidth;\n        obj.wordBreak = this._wordBreak;\n        obj.textOverflow = this._textOverflow;\n        obj.lineHeight = this._lineHeight;\n        obj.textBaseline = this._textBaseline;\n        obj.textAlign = this._textAlign;\n        obj.verticalAlign = this._verticalAlign;\n        obj.offsetY = this._offsetY;\n        obj.maxLines = this._maxLines;\n        obj.maxLinesSuffix = this._maxLinesSuffix;\n        obj.precision = this._precision;\n        obj.textColor = this._textColor;\n        obj.paddingLeft = this._paddingLeft;\n        obj.paddingRight = this._paddingRight;\n        obj.shadow = this._shadow;\n        obj.shadowColor = this._shadowColor;\n        obj.shadowOffsetX = this._shadowOffsetX;\n        obj.shadowOffsetY = this._shadowOffsetY;\n        obj.shadowBlur = this._shadowBlur;\n        obj.highlight = this._highlight;\n        obj.highlightHeight = this._highlightHeight;\n        obj.highlightColor = this._highlightColor;\n        obj.highlightOffset = this._highlightOffset;\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\n        obj.highlightPaddingRight = this._highlightPaddingRight;\n        obj.letterSpacing = this._letterSpacing;\n        obj.textIndent = this._textIndent;\n        obj.cutSx = this._cutSx;\n        obj.cutEx = this._cutEx;\n        obj.cutSy = this._cutSy;\n        obj.cutEy = this._cutEy;\n        obj.advancedRenderer = this._advancedRenderer;\n        return obj;\n    }\n\n\n}\n\n// Because there are so many properties, we prefer to use the prototype for default values.\n// This causes a decrease in performance, but also a decrease in memory usage.\nlet proto = TextTexture.prototype;\nproto._text = \"\";\nproto._w = 0;\nproto._h = 0;\nproto._fontStyle = \"normal\";\nproto._fontSize = 40;\nproto._fontWeight = \"normal\";\nproto._fontFace = null;\nproto._wordWrap = true;\nproto._wordWrapWidth = 0;\nproto._wordBreak = false;\nproto._textOverflow = \"\";\nproto._lineHeight = null;\nproto._textBaseline = \"alphabetic\";\nproto._textAlign = \"left\";\nproto._verticalAlign = \"top\";\nproto._offsetY = null;\nproto._maxLines = 0;\nproto._maxLinesSuffix = \"..\";\nproto._textColor = 0xFFFFFFFF;\nproto._paddingLeft = 0;\nproto._paddingRight = 0;\nproto._shadow = false;\nproto._shadowColor = 0xFF000000;\nproto._shadowOffsetX = 0;\nproto._shadowOffsetY = 0;\nproto._shadowBlur = 5;\nproto._highlight = false;\nproto._highlightHeight = 0;\nproto._highlightColor = 0xFF000000;\nproto._highlightOffset = 0;\nproto._highlightPaddingLeft = 0;\nproto._highlightPaddingRight = 0;\nproto._letterSpacing = 0;\nproto._textIndent = 0;\nproto._cutSx = 0;\nproto._cutEx = 0;\nproto._cutSy = 0;\nproto._cutEy = 0;\nproto._advancedRenderer = false;\nproto._fontBaselineRatio = 0;\n\n\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class SourceTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._textureSource = undefined;\n    }\n\n    get textureSource() {\n        return this._textureSource;\n    }\n\n    set textureSource(v) {\n        if (v !== this._textureSource) {\n            if (v.isResultTexture) {\n                // In case of a result texture, automatically inherit the precision.\n                this._precision = this.stage.getRenderPrecision();\n            }\n            this._textureSource = v;\n            this._changed();\n        }\n    }\n\n    _getTextureSource() {\n        return this._textureSource;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\n\nexport default class Transition extends EventEmitter {\n\n    constructor(manager, settings, element, property) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._getter = element.constructor.getGetter(property);\n        this._setter = element.constructor.getSetter(property);\n\n        this._merger = settings.merger;\n\n        if (!this._merger) {\n            this._merger = element.constructor.getMerger(property);\n        }\n\n        this._startValue = this._getter(this._element);\n        this._targetValue = this._startValue;\n\n        this._p = 1;\n        this._delayLeft = 0;\n    }\n\n    start(targetValue) {\n        this._startValue = this._getter(this._element);\n\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            if (targetValue === this._startValue) {\n                this.reset(targetValue, 1);\n            } else {\n                this._targetValue = targetValue;\n                this._p = 0;\n                this._delayLeft = this._settings.delay;\n                this.emit('start');\n                this.add();\n            }\n        }\n    }\n\n    finish() {\n        if (this._p < 1) {\n            // Value setting and will must be invoked (async) upon next transition cycle.\n            this._p = 1;\n        }\n    }\n\n    stop() {\n        // Just stop where the transition is at.\n        this.emit('stop');\n        this.manager.removeActive(this);\n    }\n\n    pause() {\n        this.stop();\n    }\n\n    play() {\n        this.manager.addActive(this);\n    }\n\n    reset(targetValue, p) {\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = p;\n            this.add();\n        }\n    }\n\n    _updateDrawValue() {\n        this._setter(this._element, this.getDrawValue());\n    }\n\n    add() {\n        this.manager.addActive(this);\n    }\n\n    isAttached() {\n        return this._element.attached;\n    }\n\n    isRunning() {\n        return (this._p < 1.0);\n    }\n\n    progress(dt) {\n        if (!this.isAttached()) {\n            // Skip to end of transition so that it is removed.\n            this._p = 1;\n        }\n\n        if (this.p < 1) {\n            if (this.delayLeft > 0) {\n                this._delayLeft -= dt;\n\n                if (this.delayLeft < 0) {\n                    dt = -this.delayLeft;\n                    this._delayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n\n            if (this._settings.duration == 0) {\n                this._p = 1;\n            } else {\n                this._p += dt / this._settings.duration;\n            }\n            if (this._p >= 1) {\n                // Finished!;\n                this._p = 1;\n            }\n        }\n\n        this._updateDrawValue();\n\n        this.invokeListeners();\n    }\n\n    invokeListeners() {\n        this.emit('progress', this.p);\n        if (this.p === 1) {\n            this.emit('finish');\n        }\n    }\n\n    updateTargetValue(targetValue) {\n        let t = this._settings.timingFunctionImpl(this.p);\n        if (t === 1) {\n            this._targetValue = targetValue;\n        } else if (t === 0) {\n            this._startValue = this._targetValue;\n            this._targetValue = targetValue;\n        } else {\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\n            this._targetValue = targetValue;\n        }\n    }\n\n    getDrawValue() {\n        if (this.p >= 1) {\n            return this.targetValue;\n        } else {\n            let v = this._settings._timingFunctionImpl(this.p);\n            return this._merger(this.targetValue, this.startValue, v);\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n    }\n\n    get startValue() {\n        return this._startValue;\n    }\n\n    get targetValue() {\n        return this._targetValue;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    set settings(v) {\n        this._settings = v;\n    }\n\n}\n\nTransition.prototype.isTransition = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages a list of objects.\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\n */\nexport default class ObjectList {\n\n    constructor() {\n        this._items = [];\n        this._refs = {}\n    }\n\n    get() {\n        return this._items;\n    }\n\n    get first() {\n        return this._items[0];\n    }\n\n    get last() {\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\n    }\n\n    add(item) {\n        this.addAt(item, this._items.length);\n    }\n\n    addAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex === index) {\n                return item;\n            }\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            if (currentIndex != -1) {\n                this.setAt(item, index);\n            } else {\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n                this._items.splice(index, 0, item);\n                this.onAdd(item, index);\n            }\n        } else {\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    replaceByRef(item) {\n        if (item.ref) {\n            const existingItem = this.getByRef(item.ref);\n            if (!existingItem) {\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\n            }\n            this.replace(item, existingItem);\n        } else {\n            throw new Error('replaceByRef: no ref specified in item');\n        }\n        this.addAt(item, this._items.length);\n\n    }\n\n    replace(item, prevItem) {\n        const index = this.getIndex(prevItem);\n        if (index === -1) {\n            throw new Error('replace: The previous item does not exist');\n        }\n        this.setAt(item, index);\n    }\n\n    setAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex != -1) {\n                if (currentIndex !== index) {\n                    const fromIndex = currentIndex;\n                    if (fromIndex !== index) {\n                        this._items.splice(fromIndex, 1);\n                        this._items.splice(index, 0, item);\n                        this.onMove(item, fromIndex, index);\n                    }\n                }\n            } else {\n                if( index < this._items.length){\n\n                    if (this._items[index].ref) {\n                        this._refs[this._items[index].ref] = undefined;\n                    }\n\n                    const prevItem = this._items[index];\n\n                    // Doesn't exist yet: overwrite current.\n                    this._items[index] = item;\n\n                    if (item.ref) {\n                        this._refs[item.ref] = item;\n                    }\n\n                    this.onSet(item, index, prevItem);\n                } else {\n                    throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n                }\n            }\n        } else {\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    getAt(index) {\n        return this._items[index];\n    }\n\n    getIndex(item) {\n        return this._items.indexOf(item);\n    }\n\n    remove(item) {\n        let index = this._items.indexOf(item);\n\n        if (index !== -1) {\n            this.removeAt(index);\n        }\n    };\n\n    removeAt(index) {\n        if (index >= 0 && index < this._items.length) {\n            const item = this._items[index];\n\n            if (item.ref) {\n                this._refs[item.ref] = undefined;\n            }\n\n            this._items.splice(index, 1);\n\n            this.onRemove(item, index);\n\n            return item;\n        } else {\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\n        }\n    };\n\n    clear() {\n        let n = this._items.length;\n        if (n) {\n            let prev = this._items;\n            this._items = [];\n            this._refs = {}\n            this.onSync(prev, [], []);\n        }\n    };\n\n    a(o) {\n        if (Utils.isObjectLiteral(o)) {\n            let c = this.createItem(o);\n            c.patch(o);\n            this.add(c);\n            return c;\n        } else if (Array.isArray(o)) {\n            for (let i = 0, n = o.length; i < n; i++) {\n                this.a(o[i]);\n            }\n            return null;\n        } else if (this.isItem(o)) {\n            this.add(o);\n            return o;\n        }\n    };\n\n    get length() {\n        return this._items.length;\n    }\n\n    _getRefs() {\n        return this._refs;\n    }\n\n    getByRef(ref) {\n        return this._refs[ref];\n    }\n\n    clearRef(ref) {\n        delete this._refs[ref];\n    }\n\n    setRef(ref, child) {\n        this._refs[ref] = child;\n    }\n\n    patch(settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            this._setByObject(settings);\n        } else if (Array.isArray(settings)) {\n            this._setByArray(settings);\n        }\n    }\n\n    _setByObject(settings) {\n        // Overrule settings of known referenced items.\n        let refs = this._getRefs();\n        let crefs = Object.keys(settings);\n        for (let i = 0, n = crefs.length; i < n; i++) {\n            let cref = crefs[i];\n            let s = settings[cref];\n\n            let c = refs[cref];\n            if (!c) {\n                if (this.isItem(s)) {\n                    // Replace previous item;\n                    s.ref = cref;\n                    this.add(s);\n                } else {\n                    // Create new item.\n                    c = this.createItem(s);\n                    c.ref = cref;\n                    c.patch(s);\n                    this.add(c);\n                }\n            } else {\n                if (this.isItem(s)) {\n                    if (c !== s) {\n                        // Replace previous item;\n                        let idx = this.getIndex(c);\n                        s.ref = cref;\n                        this.setAt(s, idx);\n                    }\n                } else {\n                    c.patch(s);\n                }\n            }\n        }\n    }\n\n    _equalsArray(array) {\n        let same = true;\n        if (array.length === this._items.length) {\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\n                same = same && (this._items[i] === array[i]);\n            }\n        } else {\n            same = false;\n        }\n        return same;\n    }\n\n    _setByArray(array) {\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\n        if (this._equalsArray(array)) {\n            return;\n        }\n\n        for (let i = 0, n = this._items.length; i < n; i++) {\n            this._items[i].marker = true;\n        }\n\n        let refs;\n        let newItems = [];\n        for (let i = 0, n = array.length; i < n; i++) {\n            let s = array[i];\n            if (this.isItem(s)) {\n                s.marker = false;\n                newItems.push(s);\n            } else {\n                let cref = s.ref;\n                let c;\n                if (cref) {\n                    if (!refs) refs = this._getRefs();\n                    c = refs[cref];\n                }\n\n                if (!c) {\n                    // Create new item.\n                    c = this.createItem(s);\n                } else {\n                    c.marker = false;\n                }\n\n                if (Utils.isObjectLiteral(s)) {\n                    c.patch(s);\n                }\n\n                newItems.push(c);\n            }\n        }\n\n        this._setItems(newItems);\n    }\n\n    _setItems(newItems) {\n        let prevItems = this._items;\n        this._items = newItems;\n\n        // Remove the items.\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\n\n        if (removed.length || added.length) {\n            // Recalculate refs.\n            this._refs = {}\n            for (let i = 0, n = this._items.length; i < n; i++) {\n                let ref = this._items[i].ref;\n                if (ref) {\n                    this._refs[ref] = this._items[i];\n                }\n            }\n        }\n\n        this.onSync(removed, added, newItems);\n    }\n\n    sort(f) {\n        const items = this._items.slice();\n        items.sort(f);\n        this._setByArray(items);\n    }\n\n    onAdd(item, index) {\n    }\n\n    onRemove(item, index) {\n    }\n\n    onSync(removed, added, order) {\n    }\n\n    onSet(item, index, prevItem) {\n    }\n\n    onMove(item, fromIndex, toIndex) {\n    }\n\n    createItem(object) {\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\n    }\n\n    isItem(object) {\n        return false;\n    }\n\n    forEach(f) {\n        this.get().forEach(f);\n    }\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"./ObjectList.mjs\";\n\nexport default class ElementChildList extends ObjectList {\n\n    constructor(element) {\n        super();\n        this._element = element;\n    }\n\n    _connectParent(item) {\n        const prevParent = item.parent;\n        if (prevParent && prevParent !== this._element) {\n            // Cleanup in previous child list, without\n            const prevChildList = item.parent.childList;\n            const index = prevChildList.getIndex(item);\n\n            if (item.ref) {\n                prevChildList._refs[item.ref] = undefined;\n            }\n            prevChildList._items.splice(index, 1);\n\n            // Also clean up element core.\n            prevParent.core.removeChildAt(index);\n\n        }\n\n        item._setParent(this._element);\n\n        // We are expecting the caller to sync it to the core.\n    }\n\n    onAdd(item, index) {\n        this._connectParent(item);\n        this._element.core.addChildAt(index, item.core);\n    }\n\n    onRemove(item, index) {\n        item._setParent(null);\n        this._element.core.removeChildAt(index);\n    }\n\n    onSync(removed, added, order) {\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i]._setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            this._connectParent(added[i]);\n        }\n        let gc = i => i.core;\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\n    }\n\n    onSet(item, index, prevItem) {\n        prevItem._setParent(null);\n\n        this._connectParent(item);\n        this._element.core.setChildAt(index, item.core);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._element.core.moveChild(fromIndex, toIndex);\n    }\n\n    createItem(object) {\n        if (object.type) {\n            return new object.type(this._element.stage);\n        } else {\n            return this._element.stage.createElement();\n        }\n    }\n\n    isItem(object) {\n        return object.isElement;\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Render tree node.\n */\n\nimport StageUtils from \"./StageUtils.mjs\";\nimport ElementCore from \"./core/ElementCore.mjs\";\nimport Base from \"./Base.mjs\";\n\nimport Utils from \"./Utils.mjs\";\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Element {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.__id = Element.id++;\n\n        this.__start();\n\n        // EventEmitter constructor.\n        this._hasEventListeners = false;\n\n        this.__core = new ElementCore(this);\n\n        /**\n         * A reference that can be used while merging trees.\n         * @type {string}\n         */\n        this.__ref = null;\n\n        /**\n         * An element is attached if it is a descendant of the stage root.\n         * @type {boolean}\n         */\n        this.__attached = false;\n\n        /**\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\n         * @type {boolean}\n         */\n        this.__enabled = false;\n\n        /**\n         * An element is active when it is enabled and it is within bounds.\n         * @type {boolean}\n         */\n        this.__active = false;\n\n        /**\n         * @type {Element}\n         */\n        this.__parent = null;\n\n        /**\n         * The texture that is currently set.\n         * @type {Texture}\n         */\n        this.__texture = null;\n\n        /**\n         * The currently displayed texture. While this.texture is loading, this one may be different.\n         * @type {Texture}\n         */\n        this.__displayedTexture = null;\n\n        /**\n         * Tags that can be used to identify/search for a specific element.\n         * @type {String[]}\n         */\n        this.__tags = null;\n\n        /**\n         * The tree's tags mapping.\n         * This contains all elements for all known tags, at all times.\n         * @type {Map}\n         */\n        this.__treeTags = null;\n\n        /**\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\n         * @type {boolean}\n         */\n        this.__tagRoot = false;\n\n        /**\n         * (Lazy-initialised) list of children owned by this elements.\n         * @type {ElementChildList}\n         */\n        this.__childList = null;\n\n        this._w = 0;\n\n        this._h = 0;\n    }\n\n    __start() {\n    }\n\n    get id() {\n        return this.__id;\n    }\n\n    set ref(ref) {\n        if (this.__ref !== ref) {\n            const charcode = ref.charCodeAt(0);\n            if (!Utils.isUcChar(charcode)) {\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\n            }\n            if (this.__ref !== null) {\n                this.removeTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.clearRef(this.__ref);\n                }\n            }\n\n            this.__ref = ref;\n\n            if (this.__ref) {\n                this._addTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.setRef(this.__ref, this);\n                }\n            }\n        }\n    }\n\n    get ref() {\n        return this.__ref;\n    }\n\n    get core() {\n        return this.__core;\n    }\n\n    setAsRoot() {\n        this.__core.setAsRoot();\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n    }\n\n    get isRoot() {\n        return this.__core.isRoot;\n    }\n\n    _setParent(parent) {\n        if (this.__parent === parent) return;\n\n        if (this.__parent) {\n            this._unsetTagsParent();\n        }\n\n        this.__parent = parent;\n\n        if (parent) {\n            this._setTagsParent();\n        }\n\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n        this._updateCollision();\n\n        if (this.isRoot && parent) {\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\n        }\n    };\n\n    getDepth() {\n        let depth = 0;\n\n        let p = this.__parent;\n        while(p) {\n            depth++;\n            p = p.__parent;\n        }\n\n        return depth;\n    };\n\n    getAncestor(l) {\n        let p = this;\n        while (l > 0 && p.__parent) {\n            p = p.__parent;\n            l--;\n        }\n        return p;\n    };\n\n    getAncestors() {\n        const a = [];\n        let p = this;\n        while (p) {\n            a.push(p);\n            p = p.__parent;\n        }\n        return a;\n    }\n\n    getAncestorAtDepth(depth) {\n        let levels = this.getDepth() - depth;\n        if (levels < 0) {\n            return null;\n        }\n        return this.getAncestor(levels);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while(p = p.parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getSharedAncestor(c) {\n        let o1 = this;\n        let o2 = c;\n        let l1 = o1.getDepth();\n        let l2 = o2.getDepth();\n        if (l1 > l2) {\n            o1 = o1.getAncestor(l1 - l2);\n        } else if (l2 > l1) {\n            o2 = o2.getAncestor(l2 - l1);\n        }\n\n        do {\n            if (o1 === o2) {\n                return o1;\n            }\n\n            o1 = o1.__parent;\n            o2 = o2.__parent;\n        } while (o1 && o2);\n\n        return null;\n    };\n\n    get attached() {\n        return this.__attached;\n    }\n\n    get enabled() {\n        return this.__enabled;\n    }\n\n    get active() {\n        return this.__active;\n    }\n\n    _isAttached() {\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\n    };\n\n    _isEnabled() {\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\n    };\n\n    _isActive() {\n        return this._isEnabled() && this.withinBoundsMargin;\n    };\n\n    /**\n     * Updates the 'attached' flag for this branch.\n     */\n    _updateAttachedFlag() {\n        let newAttached = this._isAttached();\n        if (this.__attached !== newAttached) {\n            this.__attached = newAttached;\n\n            if (newAttached) {\n                this._onSetup();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateAttachedFlag();\n                    }\n                }\n            }\n\n            if (newAttached) {\n                this._onAttach();\n            } else {\n                this._onDetach();\n            }\n        }\n    };\n\n    /**\n     * Updates the 'enabled' flag for this branch.\n     */\n    _updateEnabledFlag() {\n        let newEnabled = this._isEnabled();\n        if (this.__enabled !== newEnabled) {\n            if (newEnabled) {\n                this._onEnabled();\n                this._setEnabledFlag();\n            } else {\n                this._onDisabled();\n                this._unsetEnabledFlag();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateEnabledFlag();\n                    }\n                }\n            }\n        }\n    };\n\n    _setEnabledFlag() {\n        this.__enabled = true;\n\n        // Force re-check of texture because dimensions might have changed (cutting).\n        this._updateDimensions();\n        this._updateTextureCoords();\n\n        if (this.__texture) {\n            this.__texture.addElement(this);\n        }\n\n        if (this.withinBoundsMargin) {\n            this._setActiveFlag();\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.addElement(this.__core);\n        }\n\n    }\n\n    _unsetEnabledFlag() {\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n\n        if (this.__texture) {\n            this.__texture.removeElement(this);\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.removeElement(this.__core);\n        }\n\n        if (this._texturizer) {\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\n        }\n\n        this.__enabled = false;\n    }\n\n    _setActiveFlag() {\n        this.__active = true;\n\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\n        if (this.__texture) {\n            this.__texture.incActiveCount();\n        }\n\n        if (this.__texture) {\n            this._enableTexture();\n        }\n        this._onActive();\n    }\n\n    _unsetActiveFlag() {\n        if (this.__texture) {\n            this.__texture.decActiveCount();\n        }\n\n        this.__active = false;\n        if (this.__texture) {\n            this._disableTexture();\n        }\n\n        if (this._hasTexturizer()) {\n            this.texturizer.deactivate();\n        }\n\n        this._onInactive();\n    }\n\n    _onSetup() {\n    }\n\n    _onAttach() {\n    }\n\n    _onDetach() {\n    }\n\n    _onEnabled() {\n    }\n\n    _onDisabled() {\n    }\n\n    _onActive() {\n    }\n\n    _onInactive() {\n    }\n\n    _onResize() {\n    }\n\n    _getRenderWidth() {\n        if (this._w) {\n            return this._w;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderWidth();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderWidth();\n        } else {\n            return 0;\n        }\n    };\n\n    _getRenderHeight() {\n        if (this._h) {\n            return this._h;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderHeight();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderHeight();\n        } else {\n            return 0;\n        }\n    };\n\n    get renderWidth() {\n        if (this.__enabled) {\n            // Render width is only maintained if this element is enabled.\n            return this.__core.getRenderWidth();\n        } else {\n            return this._getRenderWidth();\n        }\n    }\n\n    get renderHeight() {\n        if (this.__enabled) {\n            return this.__core.getRenderHeight();\n        } else {\n            return this._getRenderHeight();\n        }\n    }\n\n    get finalX() {\n        return this.__core.x;\n    }\n\n    get finalY() {\n        return this.__core.y;\n    }\n\n    get finalW() {\n        return this.__core.w;\n    }\n\n    get finalH() {\n        return this.__core.h;\n    }\n\n    textureIsLoaded() {\n        return this.__texture && this.__texture.isLoaded();\n    }\n\n    loadTexture() {\n        if (this.__texture) {\n            this.__texture.load();\n\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\n                // Loading the texture will have no effect on the dimensions of this element.\n                // Manually update them, so that calcs can be performed immediately in userland.\n                this._updateDimensions();\n            }\n        }\n    }\n\n    _enableTextureError() {\n        // txError event should automatically be re-triggered when a element becomes active.\n        const loadError = this.__texture.loadError;\n        if (loadError) {\n            this.emit('txError', loadError, this.__texture._source);\n        }\n    }\n\n    _enableTexture() {\n        if (this.__texture.isLoaded()) {\n            this._setDisplayedTexture(this.__texture);\n        } else {\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\n            this._setDisplayedTexture(null);\n\n            this._enableTextureError();\n        }\n    }\n\n    _disableTexture() {\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\n        // mw, mh for checking within bounds.\n        this._setDisplayedTexture(null);\n    }\n\n    get texture() {\n        return this.__texture;\n    }\n\n    set texture(v) {\n        let texture;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                texture = new v.type(this.stage);\n            } else {\n                texture = this.texture;\n            }\n\n            if (texture) {\n                Base.patchObject(texture, v);\n            }\n        } else if (!v) {\n            texture = null;\n        } else {\n            if (v.isTexture) {\n                texture = v;\n            } else if (v.isTextureSource) {\n                texture = new SourceTexture(this.stage);\n                texture.textureSource = v;\n            } else {\n                console.error(\"[Lightning] Please specify a texture type.\");\n                return;\n            }\n        }\n\n        const prevTexture = this.__texture;\n        if (texture !== prevTexture) {\n            this.__texture = texture;\n\n            if (this.__texture) {\n                if (this.__enabled) {\n                    this.__texture.addElement(this);\n\n                    if (this.withinBoundsMargin) {\n                        if (this.__texture.isLoaded()) {\n                            this._setDisplayedTexture(this.__texture);\n                        } else {\n                            this._enableTextureError();\n                        }\n                    }\n                }\n            } else {\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\n                this._setDisplayedTexture(null);\n            }\n\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\n                prevTexture.removeElement(this);\n            }\n\n            this._updateDimensions();\n        }\n    }\n\n    get displayedTexture() {\n        return this.__displayedTexture;\n    }\n\n    _setDisplayedTexture(v) {\n        let prevTexture = this.__displayedTexture;\n\n        if (prevTexture && (v !== prevTexture)) {\n            if (this.__texture !== prevTexture) {\n                // The old displayed texture is deprecated.\n                prevTexture.removeElement(this);\n            }\n        }\n\n        const prevSource = this.__core.displayedTextureSource;\n        const sourceChanged = (v ? v._source : null) !== prevSource;\n\n        this.__displayedTexture = v;\n        this._updateDimensions();\n\n        if (this.__displayedTexture) {\n            if (sourceChanged) {\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\n                this._updateTextureCoords();\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\n            }\n        } else {\n            this.__core.setDisplayedTextureSource(null);\n        }\n\n        if (sourceChanged) {\n            if (this.__displayedTexture) {\n                this.stage.removeUpdateSourceTexture(this.__displayedTexture)\n                this.emit('txLoaded', this.__displayedTexture);\n            } else {\n                this.emit('txUnloaded', this.__displayedTexture);\n            }\n        }\n    }\n\n    onTextureSourceLoaded() {\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\n        if (this.active) {\n            // We may be dealing with a texture reloading, so we must force update.\n            this._setDisplayedTexture(this.__texture);\n        }\n    };\n\n    onTextureSourceLoadError(e) {\n        this.emit('txError', e, this.__texture._source);\n    };\n\n    forceRenderUpdate() {\n        this.__core.setHasRenderUpdates(3);\n    }\n\n    onDisplayedTextureClippingChanged() {\n        this._updateDimensions();\n        this._updateTextureCoords();\n    };\n\n    onPrecisionChanged() {\n        this._updateDimensions();\n    };\n\n    onDimensionsChanged(w, h) {\n        if (this.texture instanceof TextTexture) {\n            this.texture.w = w;\n            this.texture.h = h;\n            this.w = w;\n            this.h = h;\n        }\n    }\n\n    _updateDimensions() {\n        let w = this._getRenderWidth();\n        let h = this._getRenderHeight();\n\n        let unknownSize = false;\n        if (!w || !h) {\n            if (!this.__displayedTexture && this.__texture) {\n                // We use a 'max width' replacement instead in the ElementCore calcs.\n                // This makes sure that it is able to determine withinBounds.\n                w = w || this.__texture.mw;\n                h = h || this.__texture.mh;\n\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\n                    unknownSize = true;\n                }\n            }\n        }\n\n        if (this.__core.setDimensions(w, h, unknownSize)) {\n            this._onResize();\n        }\n    }\n\n    _updateTextureCoords() {\n        if (this.displayedTexture && this.displayedTexture._source) {\n            let displayedTexture = this.displayedTexture;\n            let displayedTextureSource = this.displayedTexture._source;\n\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\n            if (displayedTexture.clipping) {\n                // Apply texture clipping.\n                let w = displayedTextureSource.getRenderWidth();\n                let h = displayedTextureSource.getRenderHeight();\n                let iw, ih, rw, rh;\n                iw = 1 / w;\n                ih = 1 / h;\n\n                if (displayedTexture.pw) {\n                    rw = (displayedTexture.pw) * iw;\n                } else {\n                    rw = (w - displayedTexture.px) * iw;\n                }\n\n                if (displayedTexture.ph) {\n                    rh = displayedTexture.ph * ih;\n                } else {\n                    rh = (h - displayedTexture.py) * ih;\n                }\n\n                iw *= (displayedTexture.px);\n                ih *= (displayedTexture.py);\n\n                tx1 = iw;\n                ty1 = ih;\n                tx2 = tx2 * rw + iw;\n                ty2 = ty2 * rh + ih;\n\n                tx1 = Math.max(0, tx1);\n                ty1 = Math.max(0, ty1);\n                tx2 = Math.min(1, tx2);\n                ty2 = Math.min(1, ty2);\n            }\n\n            if (displayedTextureSource._flipTextureY) {\n                let tempty = ty2;\n                ty2 = ty1;\n                ty1 = tempty;\n            }\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\n        }\n    }\n\n    getCornerPoints() {\n        return this.__core.getCornerPoints();\n    }\n\n    _unsetTagsParent() {\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                // Remove from treeTags.\n                let p = this;\n                while (p = p.__parent) {\n                    let parentTreeTags = p.__treeTags.get(tag);\n                    parentTreeTags.delete(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        let tags = null;\n        let n = 0;\n        if (this.__treeTags) {\n            if (!this.__tagRoot) {\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\n                n = tags.length;\n\n                if (n > 0) {\n                    for (let i = 0; i < n; i++) {\n                        let tagSet = this.__treeTags.get(tags[i]);\n\n                        // Remove from treeTags.\n                        let p = this;\n                        while ((p = p.__parent)) {\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\n\n                            tagSet.forEach(function (comp) {\n                                parentTreeTags.delete(comp);\n                            });\n\n                            if (p.__tagRoot) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    _setTagsParent() {\n        // Just copy over the 'local' tags.\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                let p = this;\n                while (p = p.__parent) {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        if (this.__treeTags && this.__treeTags.size) {\n            if (!this.__tagRoot) {\n                this.__treeTags.forEach((tagSet, tag) => {\n                    let p = this;\n                    while (!p.__tagRoot && (p = p.__parent)) {\n                        if (p.__tagRoot) {\n                            // Do not copy all subs.\n                        }\n                        if (!p.__treeTags) {\n                            p.__treeTags = new Map();\n                        }\n\n                        let s = p.__treeTags.get(tag);\n                        if (!s) {\n                            s = new Set();\n                            p.__treeTags.set(tag, s);\n                        }\n\n                        tagSet.forEach(function (comp) {\n                            s.add(comp);\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n\n    _getByTag(tag) {\n        if (!this.__treeTags) {\n            return [];\n        }\n        let t = this.__treeTags.get(tag);\n        return t ? Utils.setToArray(t) : [];\n    };\n\n    getTags() {\n        return this.__tags ? this.__tags : [];\n    };\n\n    setTags(tags) {\n        tags = tags.reduce((acc, tag) => {\n            return acc.concat(tag.split(' '));\n        }, []);\n\n        if (this.__ref) {\n            tags.push(this.__ref);\n        }\n\n        let i, n = tags.length;\n        let removes = [];\n        let adds = [];\n        for (i = 0; i < n; i++) {\n            if (!this.hasTag(tags[i])) {\n                adds.push(tags[i]);\n            }\n        }\n\n        let currentTags = this.tags || [];\n        n = currentTags.length;\n        for (i = 0; i < n; i++) {\n            if (tags.indexOf(currentTags[i]) == -1) {\n                removes.push(currentTags[i]);\n            }\n        }\n\n        for (i = 0; i < removes.length; i++) {\n            this.removeTag(removes[i]);\n        }\n\n        for (i = 0; i < adds.length; i++) {\n            this.addTag(adds[i]);\n        }\n    }\n\n    addTag(tag) {\n        if (tag.indexOf(' ') === -1) {\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\n                this._throwError(\"Tag may not start with an upper case character.\");\n            }\n\n            this._addTag(tag);\n        } else {\n            const tags = tag.split(' ');\n            for (let i = 0, m = tags.length; i < m; i++) {\n                const tag = tags[i];\n\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\n                    this._throwError(\"Tag may not start with an upper case character.\");\n                }\n\n                this._addTag(tag);\n            }\n        }\n    }\n\n    _addTag(tag) {\n        if (!this.__tags) {\n            this.__tags = [];\n        }\n        if (this.__tags.indexOf(tag) === -1) {\n            this.__tags.push(tag);\n\n            // Add to treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    removeTag(tag) {\n        let i = this.__tags.indexOf(tag);\n        if (i !== -1) {\n            this.__tags.splice(i, 1);\n\n            // Remove from treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    let list = p.__treeTags.get(tag);\n                    if (list) {\n                        list.delete(this);\n                    }\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    hasTag(tag) {\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\n    }\n\n    /**\n     * Returns one of the elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element}\n     */\n    _tag(tag) {\n        if (tag.indexOf(\".\") !== -1) {\n            return this.mtag(tag)[0];\n        } else {\n            if (this.__treeTags) {\n                let t = this.__treeTags.get(tag);\n                if (t) {\n                    const item = t.values().next();\n                    return item ? item.value : undefined;\n                }\n            }\n        }\n    };\n\n    get tag() {\n        return this._tag;\n    }\n\n    set tag(t) {\n        this.tags = t;\n    }\n\n    /**\n     * Returns all elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element[]}\n     */\n    mtag(tag) {\n        let idx = tag.indexOf(\".\");\n        if (idx >= 0) {\n            let parts = tag.split('.');\n            let res = this._getByTag(parts[0]);\n            let level = 1;\n            let c = parts.length;\n            while (res.length && level < c) {\n                let resn = [];\n                for (let j = 0, n = res.length; j < n; j++) {\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\n                }\n\n                res = resn;\n                level++;\n            }\n            return res;\n        } else {\n            return this._getByTag(tag);\n        }\n    };\n\n    stag(tag, settings) {\n        let t = this.mtag(tag);\n        let n = t.length;\n        for (let i = 0; i < n; i++) {\n            Base.patchObject(t[i], settings);\n        }\n    }\n\n    get tagRoot() {\n        return this.__tagRoot;\n    }\n\n    set tagRoot(v) {\n        if (this.__tagRoot !== v) {\n            if (!v) {\n                this._setTagsParent();\n            } else {\n                this._unsetTagsParent();\n            }\n\n            this.__tagRoot = v;\n        }\n    }\n\n    sel(path) {\n        const results = this.select(path);\n        if (results.length) {\n            return results[0];\n        } else {\n            return undefined;\n        }\n    }\n\n    select(path) {\n        if (path.indexOf(\",\") !== -1) {\n            let selectors = path.split(',');\n            let res = [];\n            for (let i = 0; i < selectors.length; i++) {\n                res = res.concat(this._select(selectors[i]));\n            }\n            return res;\n        } else {\n            return this._select(path);\n        }\n    }\n\n    _select(path) {\n        if (path === \"\") return [this];\n\n\n        let pointIdx = path.indexOf(\".\");\n        let arrowIdx = path.indexOf(\">\");\n        if (pointIdx === -1 && arrowIdx === -1) {\n            // Quick case.\n            return this.mtag(path);\n        }\n\n        // Detect by first char.\n        let isRef;\n        if (arrowIdx === 0) {\n            isRef = true;\n            path = path.substr(1);\n        } else if (pointIdx === 0) {\n            isRef = false;\n            path = path.substr(1);\n        } else {\n            isRef = false;\n        }\n\n        return this._selectChilds(path, isRef);\n    }\n\n    _selectChilds(path, isRef) {\n        const pointIdx = path.indexOf(\".\");\n        const arrowIdx = path.indexOf(\">\");\n\n        if (pointIdx === -1 && arrowIdx === -1) {\n            if (isRef) {\n                const ref = this.getByRef(path);\n                return ref ? [ref] : [];\n            } else {\n                return this.mtag(path);\n            }\n        }\n\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\n            let next;\n            const str = path.substr(0, pointIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(pointIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, false));\n            }\n            return total;\n        } else {\n            let next;\n            const str = path.substr(0, arrowIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(arrowIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, true));\n            }\n            return total;\n        }\n    }\n\n    getByRef(ref) {\n        return this.childList.getByRef(ref);\n    }\n\n    getLocationString() {\n        let i;\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\n        let localTags = this.getTags();\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\n        if (this.ref) {\n            str += \":[\" + i + \"]\" + this.ref;\n        } else if (localTags.length) {\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\n        } else {\n            str += \":[\" + i + \"]#\" + this.id;\n        }\n        return str;\n    }\n\n    toString() {\n        let obj = this.getSettings();\n        return Element.getPrettyString(obj, \"\");\n    };\n\n    static getPrettyString(obj, indent) {\n        let children = obj.children;\n        delete obj.children;\n\n\n        // Convert singular json settings object.\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\n        let str = JSON.stringify(obj, function (k, v) {\n            if (colorKeys.indexOf(k) !== -1) {\n                return \"COLOR[\" + v.toString(16) + \"]\";\n            }\n            return v;\n        });\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\n\n        if (children) {\n            let childStr = \"\";\n            if (Utils.isObjectLiteral(children)) {\n                let refs = Object.keys(children);\n                childStr = \"\";\n                for (let i = 0, n = refs.length; i < n; i++) {\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\n                    delete children[refs[i]].ref;\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\n                }\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\n            } else {\n                let n = children.length;\n                childStr = \"[\";\n                for (let i = 0; i < n; i++) {\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\n                }\n                childStr += indent + \"]}\";\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\n            }\n\n        }\n\n        return str;\n    }\n\n    getSettings() {\n        let settings = this.getNonDefaults();\n\n        let children = this._children.get();\n        if (children) {\n            let n = children.length;\n            if (n) {\n                const childArray = [];\n                let missing = false;\n                for (let i = 0; i < n; i++) {\n                    childArray.push(children[i].getSettings());\n                    missing = missing || !children[i].ref;\n                }\n\n                if (!missing) {\n                    settings.children = {}\n                    childArray.forEach(child => {\n                        settings.children[child.ref] = child;\n                    });\n                } else {\n                    settings.children = childArray;\n                }\n            }\n        }\n\n        settings.id = this.id;\n\n        return settings;\n    }\n\n    getNonDefaults() {\n        let settings = {};\n\n        if (this.constructor !== Element) {\n            settings.type = this.constructor.name;\n        }\n\n        if (this.__ref) {\n            settings.ref = this.__ref;\n        }\n\n        if (this.__tags && this.__tags.length) {\n            settings.tags = this.__tags;\n        }\n\n        if (this.x !== 0) settings.x = this.x;\n        if (this.y !== 0) settings.y = this.y;\n        if (this.w !== 0) settings.w = this.w;\n        if (this.h !== 0) settings.h = this.h;\n\n        if (this.scaleX === this.scaleY) {\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\n        } else {\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\n        }\n\n        if (this.pivotX === this.pivotY) {\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\n        } else {\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\n        }\n\n        if (this.mountX === this.mountY) {\n            if (this.mountX !== 0) settings.mount = this.mountX;\n        } else {\n            if (this.mountX !== 0) settings.mountX = this.mountX;\n            if (this.mountY !== 0) settings.mountY = this.mountY;\n        }\n\n        if (this.alpha !== 1) settings.alpha = this.alpha;\n\n        if (!this.visible) settings.visible = false;\n\n        if (this.rotation !== 0) settings.rotation = this.rotation;\n\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\n        } else {\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\n        }\n\n        if (this.zIndex) settings.zIndex = this.zIndex;\n\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\n\n        if (this.clipping) settings.clipping = this.clipping;\n\n        if (!this.clipbox) settings.clipbox = this.clipbox;\n\n        if (this.__texture) {\n            let tnd = this.__texture.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.texture = tnd;\n            }\n        }\n\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\n            let tnd = this.shader.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.shader = tnd;\n            }\n        }\n\n        if (this._hasTexturizer()) {\n            if (this.texturizer.enabled) {\n                settings.renderToTexture = this.texturizer.enabled;\n            }\n            if (this.texturizer.lazy) {\n                settings.renderToTextureLazy = this.texturizer.lazy;\n            }\n            if (this.texturizer.colorize) {\n                settings.colorizeResultTexture = this.texturizer.colorize;\n            }\n            if (this.texturizer.renderOffscreen) {\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\n            }\n        }\n\n        return settings;\n    };\n\n    static getGetter(propertyPath) {\n        let getter = Element.PROP_GETTERS.get(propertyPath);\n        if (!getter) {\n            getter = new Function('obj', 'return obj.' + propertyPath);\n            Element.PROP_GETTERS.set(propertyPath, getter);\n        }\n        return getter;\n    }\n\n    static getSetter(propertyPath) {\n        let setter = Element.PROP_SETTERS.get(propertyPath);\n        if (!setter) {\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\n            Element.PROP_SETTERS.set(propertyPath, setter);\n        }\n        return setter;\n    }\n\n    get withinBoundsMargin() {\n        return this.__core._withinBoundsMargin;\n    }\n\n    _enableWithinBoundsMargin() {\n        // Iff enabled, this toggles the active flag.\n        if (this.__enabled) {\n            this._setActiveFlag();\n        }\n    }\n\n    _disableWithinBoundsMargin() {\n        // Iff active, this toggles the active flag.\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n    }\n\n    set boundsMargin(v) {\n        if (!Array.isArray(v) && v !== null) {\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\n        }\n        this.__core.boundsMargin = v;\n    }\n\n    get boundsMargin() {\n        return this.__core.boundsMargin;\n    }\n\n    get x() {\n        return this.__core.offsetX;\n    }\n\n    set x(v) {\n        this.__core.offsetX = v;\n    }\n\n    get y() {\n        return this.__core.offsetY;\n    }\n\n    set y(v) {\n        this.__core.offsetY = v;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (Utils.isFunction(v)) {\n            this._w = 0;\n            this.__core.funcW = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._w !== v) {\n                this.__core.disableFuncW();\n                this._w = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (Utils.isFunction(v)) {\n            this._h = 0;\n            this.__core.funcH = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._h !== v) {\n                this.__core.disableFuncH();\n                this._h = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get collision() {\n        return this._collision;\n    }\n\n    set collision(v) {\n        this._collision = v;\n    }\n\n    _updateCollision() {\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\n            /**\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\n             * This narrows down the search for elements with active collision.\n            */\n            this.__parent.collision = 2;\n        }\n    }\n\n    get scaleX() {\n        return this.__core.scaleX;\n    }\n\n    set scaleX(v) {\n        this.__core.scaleX = v;\n    }\n\n    get scaleY() {\n        return this.__core.scaleY;\n    }\n\n    set scaleY(v) {\n        this.__core.scaleY = v;\n    }\n\n    get scale() {\n        return this.__core.scale;\n    }\n\n    set scale(v) {\n        this.__core.scale = v;\n    }\n\n    get pivotX() {\n        return this.__core.pivotX;\n    }\n\n    set pivotX(v) {\n        this.__core.pivotX = v;\n    }\n\n    get pivotY() {\n        return this.__core.pivotY;\n    }\n\n    set pivotY(v) {\n        this.__core.pivotY = v;\n    }\n\n    get pivot() {\n        return this.__core.pivot;\n    }\n\n    set pivot(v) {\n        this.__core.pivot = v;\n    }\n\n    get mountX() {\n        return this.__core.mountX;\n    }\n\n    set mountX(v) {\n        this.__core.mountX = v;\n    }\n\n    get mountY() {\n        return this.__core.mountY;\n    }\n\n    set mountY(v) {\n        this.__core.mountY = v;\n    }\n\n    get mount() {\n        return this.__core.mount;\n    }\n\n    set mount(v) {\n        this.__core.mount = v;\n    }\n\n    get rotation() {\n        return this.__core.rotation;\n    }\n\n    set rotation(v) {\n        this.__core.rotation = v;\n    }\n\n    get alpha() {\n        return this.__core.alpha;\n    }\n\n    set alpha(v) {\n        this.__core.alpha = v;\n    }\n\n    get visible() {\n        return this.__core.visible;\n    }\n\n    set visible(v) {\n        this.__core.visible = v;\n    }\n    \n    get colorUl() {\n        return this.__core.colorUl;\n    }\n\n    set colorUl(v) {\n        this.__core.colorUl = v;\n    }\n\n    get colorUr() {\n        return this.__core.colorUr;\n    }\n\n    set colorUr(v) {\n        this.__core.colorUr = v;\n    }\n\n    get colorBl() {\n        return this.__core.colorBl;\n    }\n\n    set colorBl(v) {\n        this.__core.colorBl = v;\n    }\n\n    get colorBr() {\n        return this.__core.colorBr;\n    }\n\n    set colorBr(v) {\n        this.__core.colorBr = v;\n    }\n\n    get color() {\n        return this.__core.colorUl;\n    }\n\n    set color(v) {\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorTop() {\n        return this.colorUl;\n    }\n\n    set colorTop(v) {\n        if (this.colorUl !== v || this.colorUr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n        }\n    }\n\n    get colorBottom() {\n        return this.colorBl;\n    }\n\n    set colorBottom(v) {\n        if (this.colorBl !== v || this.colorBr !== v) {\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorLeft() {\n        return this.colorUl;\n    }\n\n    set colorLeft(v) {\n        if (this.colorUl !== v || this.colorBl !== v) {\n            this.colorUl = v;\n            this.colorBl = v;\n        }\n    }\n\n    get colorRight() {\n        return this.colorUr;\n    }\n\n    set colorRight(v) {\n        if (this.colorUr !== v || this.colorBr !== v) {\n            this.colorUr = v;\n            this.colorBr = v;\n        }\n    }\n\n    get zIndex() {return this.__core.zIndex}\n    set zIndex(v) {\n        this.__core.zIndex = v;\n    }\n\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\n    set forceZIndexContext(v) {\n        this.__core.forceZIndexContext = v;\n    }\n\n    get clipping() {return this.__core.clipping}\n    set clipping(v) {\n        this.__core.clipping = v;\n    }\n\n    get clipbox() {return this.__core.clipbox}\n    set clipbox(v) {\n        this.__core.clipbox = v;\n    }\n\n    get tags() {\n        return this.getTags();\n    }\n\n    set tags(v) {\n        if (!Array.isArray(v)) v = [v];\n        this.setTags(v);\n    }\n\n    set t(v) {\n        this.tags = v;\n    }\n\n    get _children() {\n        if (!this.__childList) {\n            this.__childList = new ElementChildList(this, false);\n        }\n        return this.__childList;\n    }\n\n    get childList() {\n        if (!this._allowChildrenAccess()) {\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\n        }\n        return this._children;\n    }\n\n    hasChildren() {\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\n    }\n\n    _allowChildrenAccess() {\n        return true;\n    }\n\n    get children() {\n        return this.childList.get();\n    }\n\n    set children(children) {\n        this.childList.patch(children);\n    }\n\n    add(o) {\n        return this.childList.a(o);\n    }\n\n    get p() {\n        return this.__parent;\n    }\n\n    get parent() {\n        return this.__parent;\n    }\n\n    get src() {\n        if (this.texture && this.texture instanceof ImageTexture) {\n            return this.texture._src;\n        } else {\n            return undefined;\n        }\n    }\n\n    set src(v) {\n        const texture = new ImageTexture(this.stage);\n        texture.src = v;\n        this.texture = texture;\n    }\n\n    set mw(v) {\n        if (this.texture) {\n            this.texture.mw = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mw after setting a texture.');\n        }\n    }\n\n    set mh(v) {\n        if (this.texture) {\n            this.texture.mh = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mh after setting a texture.');\n        }\n    }\n\n    get rect() {\n        return (this.texture === this.stage.rectangleTexture);\n    }\n\n    set rect(v) {\n        if (v) {\n            this.texture = this.stage.rectangleTexture;\n        } else {\n            this.texture = null;\n        }\n    }\n\n    enableTextTexture() {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.texture = new TextTexture(this.stage);\n\n            if (!this.texture.w && !this.texture.h) {\n                // Inherit dimensions from element.\n                // This allows userland to set dimensions of the Element and then later specify the text.\n                this.texture.w = this.w;\n                this.texture.h = this.h;\n            }\n        }\n        return this.texture;\n    }\n\n    get text() {\n        if (this.texture && (this.texture instanceof TextTexture)) {\n            return this.texture;\n        } else {\n            return null;\n        }\n    }\n\n    set text(v) {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.enableTextTexture();\n        }\n        if (Utils.isString(v)) {\n            this.texture.text = v;\n        } else {\n            this.texture.patch(v);\n        }\n    }\n\n    set onUpdate(f) {\n        this.__core.onUpdate = f;\n    }\n\n    set onAfterCalcs(f) {\n        this.__core.onAfterCalcs = f;\n    }\n\n    set onAfterUpdate(f) {\n        this.__core.onAfterUpdate = f;\n    }\n\n    forceUpdate() {\n        // Make sure that the update loop is run.\n        this.__core._setHasUpdates();\n    }\n\n    get shader() {\n        return this.__core.shader;\n    }\n\n    set shader(v) {\n        if (Utils.isObjectLiteral(v) && !v.type) {\n            // Setting properties on an existing shader.\n            if (this.shader) {\n                this.shader.patch(v);\n            }\n        } else {\n            const shader = Shader.create(this.stage, v);\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.removeElement(this.__core);\n            }\n\n            this.__core.shader = shader;\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.addElement(this.__core);\n            }\n        }\n    }\n\n    _hasTexturizer() {\n        return !!this.__core._texturizer;\n    }\n\n    get renderToTexture() {\n        return this.rtt\n    }\n\n    set renderToTexture(v) {\n        this.rtt = v\n    }\n\n    get rtt() {\n        return this._hasTexturizer() && this.texturizer.enabled;\n    }\n\n    set rtt(v) {\n        this.texturizer.enabled = v;\n    }\n\n    get rttLazy() {\n        return this._hasTexturizer() && this.texturizer.lazy;\n    }\n\n    set rttLazy(v) {\n        this.texturizer.lazy = v;\n    }\n\n    get renderOffscreen() {\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this.texturizer.renderOffscreen = v;\n    }\n\n    get colorizeResultTexture() {\n        return this._hasTexturizer() && this.texturizer.colorize;\n    }\n\n    set colorizeResultTexture(v) {\n        this.texturizer.colorize = v;\n    }\n\n    getTexture() {\n        return this.texturizer._getTextureSource();\n    }\n\n    get texturizer() {\n        return this.__core.texturizer;\n    }\n\n    patch(settings) {\n        let paths = Object.keys(settings);\n\n        for (let i = 0, n = paths.length; i < n; i++) {\n            let path = paths[i];\n            const v = settings[path];\n\n            const firstCharCode = path.charCodeAt(0);\n            if (Utils.isUcChar(firstCharCode)) {\n                // Ref.\n                const child = this.getByRef(path);\n                if (!child) {\n                    if (v !== undefined) {\n                        // Add to list immediately.\n                        let c;\n                        if (Utils.isObjectLiteral(v)) {\n                            // Catch this case to capture createMode flag.\n                            c = this.childList.createItem(v);\n                            c.patch(v);\n                        } else if (Utils.isObject(v)) {\n                            c = v;\n                        }\n                        if (c.isElement) {\n                            c.ref = path;\n                        }\n\n                        this.childList.a(c);\n                    }\n                } else {\n                    if (v === undefined) {\n                        if (child.parent) {\n                            child.parent.childList.remove(child);\n                        }\n                    } else if (Utils.isObjectLiteral(v)) {\n                        child.patch(v);\n                    } else if (v.isElement) {\n                        // Replace element by new element.\n                        v.ref = path;\n                        this.childList.replace(v, child);\n                    } else {\n                        this._throwError(\"Unexpected value for path: \" + path);\n                    }\n                }\n            } else {\n                // Property.\n                Base.patchObjectProperty(this, path, v);\n            }\n        }\n    }\n\n    _throwError(message) {\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\n    }\n\n    animation(settings) {\n        return this.stage.animations.createAnimation(this, settings);\n    }\n\n    transition(property, settings = null) {\n        if (settings === null) {\n            return this._getTransition(property);\n        } else {\n            this._setTransition(property, settings);\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\n            return null;\n        }\n    }\n\n    set transitions(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            this.transition(property, object[property]);\n        });\n    }\n\n    set smooth(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            let value = object[property];\n            if (Array.isArray(value)) {\n                this.setSmooth(property, value[0], value[1]);\n            } else {\n                this.setSmooth(property, value);\n            }\n        });\n    }\n\n    fastForward(property) {\n        if (this._transitions) {\n            let t = this._transitions[property];\n            if (t && t.isTransition) {\n                t.finish();\n            }\n        }\n    }\n\n    _getTransition(property) {\n        if (!this._transitions) {\n            this._transitions = {};\n        }\n        let t = this._transitions[property];\n        if (!t) {\n            // Create default transition.\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\n        } else if (t.isTransitionSettings) {\n            // Upgrade to 'real' transition.\n            t = new Transition(\n                this.stage.transitions,\n                t,\n                this,\n                property\n            );\n        }\n        this._transitions[property] = t;\n        return t;\n    }\n\n    _setTransition(property, settings) {\n        if (!settings) {\n            this._removeTransition(property);\n        } else {\n            if (Utils.isObjectLiteral(settings)) {\n                // Convert plain object to proper settings object.\n                settings = this.stage.transitions.createSettings(settings);\n            }\n\n            if (!this._transitions) {\n                this._transitions = {};\n            }\n\n            let current = this._transitions[property];\n            if (current && current.isTransition) {\n                // Runtime settings change.\n                current.settings = settings;\n                return current;\n            } else {\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\n                this._transitions[property] = settings;\n            }\n        }\n    }\n\n    _removeTransition(property) {\n        if (this._transitions) {\n            delete this._transitions[property];\n        }\n    }\n\n    getSmooth(property, v) {\n        let t = this._getTransition(property);\n        if (t && t.isAttached()) {\n            return t.targetValue;\n        } else {\n            return v;\n        }\n    }\n\n    setSmooth(property, v, settings) {\n        if (settings) {\n            this._setTransition(property, settings);\n        }\n        let t = this._getTransition(property);\n        t.start(v);\n        return t;\n    }\n\n    get flex() {\n        return this.__core.flex;\n    }\n\n    set flex(v) {\n        this.__core.flex = v;\n    }\n\n    get flexItem() {\n        return this.__core.flexItem;\n    }\n\n    set flexItem(v) {\n        this.__core.flexItem = v;\n    }\n\n    static isColorProperty(property) {\n        return property.toLowerCase().indexOf(\"color\") >= 0;\n    }\n\n    static getMerger(property) {\n        if (Element.isColorProperty(property)) {\n            return StageUtils.mergeColors;\n        } else {\n            return StageUtils.mergeNumbers;\n        }\n    }\n\n    toJSON() {\n        const ref = [`${this.constructor.name}`];\n        const tree = {};\n        tree[ref] = {};\n\n        if (this.hasChildren()) {\n            Element.collectChildren(tree[ref], this.__childList);\n        } else {\n            tree[ref] = {...Element.getProperties(this)};\n        }\n        return tree;\n    }\n\n    static collectChildren(tree, children) {\n        const childList = children;\n        for (let i = 0, j = childList.length; i < j; i++) {\n            const element = childList.getAt(i);\n            const ref = `${element.__ref || `Element-${element.id}`}`;\n            const properties = this.getProperties(element);\n\n            tree[ref] = {...properties};\n\n            if (element.hasChildren()) {\n                tree[ref].children = {};\n                this.collectChildren(\n                    tree[ref].children, element.__childList\n                );\n            }\n        }\n    }\n\n    static getProperties(element) {\n        const props = {};\n        const list = [\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOffscreen\", \"renderToTexture\", \"scale\",\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\n        ];\n        let n = list.length;\n\n        while (n--) {\n            let key = list[n];\n            const getBoolean = /^!{2}/;\n            const isFunction = /\\(\\)$/;\n\n            if (getBoolean.test(key)) {\n                key = key.substring(2, key.length);\n                props[key] = !!element[key];\n            } else if (isFunction.test(key)) {\n                key = key.substring(0, key.length - 2);\n                if (typeof element[key] === \"function\") {\n                    props[key] = element[key]();\n                }\n            } else {\n                props[key] = element[key];\n            }\n        }\n        return {...props, ...element.getNonDefaults()};\n    }\n}\n\n// This gives a slight performance benefit compared to extending EventEmitter.\nEventEmitter.addAsMixin(Element);\n\nElement.prototype.isElement = 1;\n\nElement.id = 1;\n\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_GETTERS = new Map();\n\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_SETTERS = new Map();\n\nimport Texture from \"./Texture.mjs\";\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\nimport TextTexture from \"../textures/TextTexture.mjs\";\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\nimport Transition from \"../animation/Transition.mjs\";\nimport ElementChildList from \"./ElementChildList.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StateMachine {\n\n    constructor() {\n        StateMachine.setupStateMachine(this);\n    }\n\n    static setupStateMachine(target) {\n        const targetConstructor = target.constructor;\n        const router = StateMachine.create(targetConstructor);\n        Object.setPrototypeOf(target, router.prototype);\n        target.constructor = targetConstructor;\n        target._initStateMachine();\n    }\n\n    /**\n     * Creates a state machine implementation.\n     * It extends the original type and should be used when creating new instances.\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\n     * @param {Class} type\n     * @returns {StateMachine}\n     */\n    static create(type) {\n        if (!type.hasOwnProperty('_sm')) {\n            // Only need to run once.\n            const stateMachineType = new StateMachineType(type);\n            type._sm = stateMachineType;\n        }\n\n        return type._sm.router;\n    }\n\n    /**\n     * Calls the specified method if it exists.\n     * @param {string} event\n     * @param {*...} args\n     */\n    fire(event, ...args) {\n        if (this._hasMethod(event)) {\n            return this[event](...args);\n        }\n    }\n\n    /**\n     * Returns the current state path (for example \"Initialized.Loading\").\n     * @returns {string}\n     * @protected\n     */\n    _getState() {\n        return this._state.__path;\n    }\n\n    /**\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\n     * @param {string} statePath\n     * @param {string} currentStatePath\n     * @returns {Boolean}\n     * @protected\n     */\n    _inState(statePath, currentStatePath = this._state.__path) {\n        const state = this._sm.getStateByPath(statePath);\n        const currentState = this._sm.getStateByPath(currentStatePath);\n        const level = state.__level;\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\n        return (stateAtLevel === state);\n    }\n\n    /**\n     * Returns true if the specified class member is defined for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMember(name) {\n        return !!this.constructor.prototype[name];\n    }\n\n    /**\n     * Returns true if the specified class member is a method for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMethod(name) {\n        const member = this.constructor.prototype[name];\n        return !!member && (typeof member === \"function\")\n    }\n\n    /**\n     * Switches to the specified state.\n     * @param {string} statePath\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\n     * @param {*[]} [args]\n     *   Args that are supplied in $enter and $exit events.\n     * @protected\n     */\n    _setState(statePath, args) {\n        const setStateId = ++this._setStateCounter;\n        this._setStateId = setStateId;\n\n        if (this._state.__path !== statePath) {\n            // Performance optimization.\n            let newState = this._sm._stateMap[statePath];\n            if (!newState) {\n                // Check for super state.\n                newState = this._sm.getStateByPath(statePath);\n            }\n\n            const prevState = this._state;\n\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\n                const sharedState = StateMachine._getSharedState(this._state, newState);\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path,\n                    sharedState: sharedState.__path\n                };\n                const sharedLevel = sharedState.__level;\n\n                if (hasDifferentExitMethod) {\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\n                        this.__setState(exitStates[i]);\n                        this._callExit(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n                if (hasDifferentEnterMethod) {\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\n                        this.__setState(enterStates[i]);\n                        this._callEnter(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            this.__setState(newState);\n\n            if (this._changedState) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n\n                if (args) {\n                    this._changedState(context, ...args);\n                } else {\n                    this._changedState(context);\n                }\n            }\n\n            if (this._onStateChange) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n                this._onStateChange(context);\n            }\n\n        }\n    }\n\n    _callEnter(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$enter) {\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\n                state.prototype.$enter.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    _callExit(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$exit) {\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\n                state.prototype.$exit.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    __setState(state) {\n        this._state = state;\n        this._stateIndex = state.__index;\n        this.constructor = state;\n    }\n\n    _initStateMachine() {\n        this._state = null;\n        this._stateIndex = 0;\n        this._setStateCounter = 0;\n        this._sm = this._routedType._sm;\n        this.__setState(this._sm.getStateByPath(\"\"));\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\n        this._callEnter(this._state, [], context);\n        this._onStateChange = undefined;\n    }\n\n    /**\n     * Between multiple member names, select the one specified in the deepest state.\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\n     * @param {string[]} memberNames\n     * @returns {string|undefined}\n     * @protected\n     */\n    _getMostSpecificHandledMember(memberNames) {\n        let cur = this._state;\n        do {\n            for (let i = 0, n = memberNames.length; i < n; i++) {\n                const memberName = memberNames[i];\n                if (!cur.__parent) {\n                    if (cur.prototype[memberName]) {\n                        return memberName;\n                    }\n                } else {\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\n                    if (this[alias]) {\n                        return memberName;\n                    }\n                }\n            }\n            cur = cur.__parent;\n        } while (cur);\n    }\n\n    static _getStatesUntilLevel(state, level) {\n        const states = [];\n        while (state.__level > level) {\n            states.push(state);\n            state = state.__parent;\n        }\n        return states;\n    }\n\n    static _getSharedState(state1, state2) {\n        const state1Array = StateMachine._getAncestorStates(state1);\n        const state2Array = StateMachine._getAncestorStates(state2);\n        const n = Math.min(state1Array.length, state2Array.length);\n        for (let i = 0; i < n; i++) {\n            if (state1Array[i] !== state2Array[i]) {\n                return state1Array[i - 1];\n            }\n        }\n        return state1Array[n - 1];\n    }\n\n    static _getAncestorStates(state) {\n        const result = [];\n        do {\n            result.push(state);\n        } while(state = state.__parent);\n        return result.reverse();\n    }\n\n    static _getStateAtLevel(state, level) {\n        if (level > state.__level) {\n            return undefined;\n        }\n\n        while(level < state.__level) {\n            state = state.__parent;\n        }\n        return state;\n    }\n}\n\nclass StateMachineType {\n\n    constructor(type) {\n        this._type = type;\n        this._router = null;\n\n        this.init();\n    }\n\n    get router() {\n        return this._router;\n    }\n\n    init() {\n        this._router = this._createRouter();\n\n        this._stateMap = this._getStateMap();\n\n        this._addStateMemberDelegatorsToRouter();\n\n    }\n\n    _createRouter() {\n        const type = this._type;\n\n        const router = class StateMachineRouter extends type {\n            constructor() {\n                super(...arguments);\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\n                }\n            }\n        };\n        router._isRouter = true;\n        router.prototype._routedType = type;\n        router.original = type;\n\n        this._mixinStateMachineMethods(router);\n\n        return router;\n    }\n\n    _mixinStateMachineMethods(router) {\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\n        for (let i = 0, n = names.length; i < n; i++) {\n            const name = names[i];\n            if (name !== \"constructor\") {\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\n                Object.defineProperty(router.prototype, name, descriptor);\n            }\n        }\n    }\n\n    _addStateMemberDelegatorsToRouter() {\n        const members = this._getAllMemberNames();\n\n        members.forEach(member => {\n            this._addMemberRouter(member);\n        });\n    }\n\n    /**\n     * @note We are generating code because it yields much better performance.\n     */\n    _addMemberRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member);\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        let type = undefined;\n        descriptors.forEach(descriptor => {\n            if (descriptor) {\n                const descType = this._getDescriptorType(descriptor);\n                if (type && (type !== descType)) {\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\n                    return;\n                }\n                type = descType;\n            }\n        });\n\n        switch(type) {\n            case \"method\":\n                this._addMethodRouter(member, descriptors, aliases);\n                break;\n            case \"getter\":\n                this._addGetterSetterRouters(member);\n                break;\n            case \"property\":\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\n                break;\n        }\n    }\n\n    _getDescriptor(state, member, isValid = () => true) {\n        let type = state;\n        let curState = state;\n\n        do {\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\n            if (descriptor) {\n                if (isValid(descriptor)) {\n                    descriptor._source = curState;\n                    return descriptor;\n                }\n            }\n            type = Object.getPrototypeOf(type);\n            if (type && type.hasOwnProperty('__state')) {\n                curState = type;\n            }\n        } while(type && type.prototype);\n        return undefined;\n    }\n\n    _getDescriptorType(descriptor) {\n        if (descriptor.get || descriptor.set) {\n            return 'getter';\n        } else {\n            if (typeof descriptor.value === \"function\") {\n                return 'method';\n            } else {\n                return 'property';\n            }\n        }\n    }\n\n    static _supportsSpread() {\n        if (this.__supportsSpread === undefined) {\n            this.__supportsSpread = false;\n            try {\n                const func = new Function(\"return [].concat(...arguments);\");\n                func();\n                this.__supportsSpread = true;\n            } catch(e) {}\n        }\n        return this.__supportsSpread;\n    }\n\n    _addMethodRouter(member, descriptors, aliases) {\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        const supportsSpread = StateMachineType._supportsSpread();\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    if (supportsSpread) {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\n                    } else {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\n                    }\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            if (supportsSpread) {\n                code.push(`return this[\"${cur}\"](...arguments);`);\n            } else {\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\n            }\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n\n        const descriptor = {value: router};\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _addGetterSetterRouters(member) {\n        const getter = this._getGetterRouter(member);\n        const setter = this._getSetterRouter(member);\n        const descriptor = {\n            get: getter,\n            set: setter\n        };\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _getGetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`return this[\"${cur}\"];`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n        return router;\n    }\n\n    _getSetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\n                } else {\n                    code.push(`if (i < ${i}) ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`this[\"${cur}\"] = arg;`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([\"arg\"], functionBody);\n        return router;\n    }\n\n    static getStateMemberAlias(path, member) {\n        return \"$\" + (path ? path + \".\" : \"\") + member;\n    }\n\n    _getAllMemberNames() {\n        const stateMap = this._stateMap;\n        const map = Object.keys(stateMap);\n        let members = new Set();\n        map.forEach(statePath => {\n            if (statePath === \"\") {\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\n                return;\n            }\n            const state = stateMap[statePath];\n            const names = this._getStateMemberNames(state);\n            names.forEach(name => {\n                members.add(name);\n            })\n        });\n        return [...members];\n    }\n\n    _getStateMemberNames(state) {\n        let type = state;\n        let members = new Set();\n        const isRoot = this._type === state;\n        do {\n            const names = this._getStateMemberNamesForType(type);\n            names.forEach(name => {\n                members.add(name)\n            });\n\n            type = Object.getPrototypeOf(type);\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\n\n        return members;\n    }\n\n    _getStateMemberNamesForType(type) {\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\n        return memberNames.filter(memberName => {\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\n        });\n    }\n\n    static _isStateLocalMember(memberName) {\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\n    }\n\n    getStateByPath(statePath) {\n        if (this._stateMap[statePath]) {\n            return this._stateMap[statePath];\n        }\n\n        // Search for closest match.\n        const parts = statePath.split(\".\");\n        while(parts.pop()) {\n            const statePath = parts.join(\".\");\n            if (this._stateMap[statePath]) {\n                return this._stateMap[statePath];\n            }\n        }\n    }\n\n    _getStateMap() {\n        if (!this._stateMap) {\n            this._stateMap = this._createStateMap();\n        }\n        return this._stateMap;\n    }\n\n    _createStateMap() {\n        const stateMap = {};\n        this._addState(this._type, null, \"\", stateMap);\n        return stateMap;\n    }\n\n    _addState(state, parentState, name, stateMap) {\n        state.__state = true;\n        state.__name = name;\n\n        this._addStaticStateProperty(state, parentState);\n\n        const parentPath = (parentState ? parentState.__path : \"\");\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\n        state.__path = path;\n        state.__level = parentState ? parentState.__level + 1 : 0;\n        state.__parent = parentState;\n        state.__index = Object.keys(stateMap).length;\n        stateMap[path] = state;\n\n        const states = state._states;\n        if (states) {\n            const isInheritedFromParent = (parentState && parentState._states === states);\n            if (!isInheritedFromParent) {\n                const subStates = state._states();\n                subStates.forEach(subState => {\n                    const stateName = StateMachineType._getStateName(subState);\n                    this._addState(subState, state, stateName, stateMap);\n                });\n            }\n        }\n    }\n\n    static _getStateName(state) {\n        const name = state.name;\n\n        const index = name.indexOf('$');\n        if (index > 0) {\n            // Strip off rollup name suffix.\n            return name.substr(0, index);\n        }\n\n        return name;\n    }\n\n    _addStaticStateProperty(state, parentState) {\n        if (parentState) {\n            const isClassStateLevel = parentState && !parentState.__parent;\n            if (isClassStateLevel) {\n                this._router[state.__name] = state;\n            } else {\n                parentState[state.__name] = state;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Element from \"../tree/Element.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport StateMachine from \"./StateMachine.mjs\";\n\n/**\n * @extends StateMachine\n */\nexport default class Component extends Element {\n\n    constructor(stage, properties) {\n        super(stage);\n\n        // Encapsulate tags to prevent leaking.\n        this.tagRoot = true;\n\n        if (Utils.isObjectLiteral(properties)) {\n            Object.assign(this, properties);\n        }\n\n        this.__initialized = false;\n        this.__firstActive = false;\n        this.__firstEnable = false;\n\n        this.__signals = undefined;\n\n        this.__passSignals = undefined;\n\n        this.__construct();\n\n        // Quick-apply template.\n        const func = this.constructor.getTemplateFunc(this);\n        func.f(this, func.a);\n\n        this._build();\n    }\n\n    __start() {\n        StateMachine.setupStateMachine(this);\n        this._onStateChange = Component.prototype.__onStateChange;\n    }\n\n    get state() {\n        return this._getState();\n    }\n\n    __onStateChange() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    _refocus() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    static bindProp(name, func = null) {\n        return {__propertyBinding: true, __name: name, __func: func};\n    }\n\n    __bindProperty(propObj, targetObj, targetProp) {\n        // 1. find binding position: find object and property name to be bound\n        const obj = targetObj;\n        const prop = targetProp;\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\n\n        // 2. create setters for every given dependency\n        for (let i = 0; i < propDependencies.length; i++) {\n            const propName = propDependencies[i];\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\n\n            if (!this.hasOwnProperty(propName)) {\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\n                Object.defineProperty(this, propName, {\n                    set: (value) => {\n                        this[`__prop_${propName}`] = value;\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\n                            __obj[__prop] = __func(this);\n                        }\n                    },\n                    get: () => this[`__prop_${propName}`]\n                });\n            } else {\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\n            }\n        }\n    }\n\n    /**\n     * Returns a high-performance template patcher.\n     */\n    static getTemplateFunc(ctx) {\n        // We need a different template function per patch id.\n        const name = \"_templateFunc\";\n\n        // Be careful with class-based static inheritance.\n        const hasName = '__has' + name;\n        if (this[hasName] !== this) {\n            this[hasName] = this;\n            this[name] = this.parseTemplate(this._template(ctx));\n        }\n        return this[name];\n    }\n\n    static parseTemplate(obj) {\n        const context = {\n            loc: [],\n            store: [],\n            rid: 0\n        };\n\n        this.parseTemplateRec(obj, context, \"element\");\n\n        const code = context.loc.join(\";\\n\");\n        const f = new Function(\"element\", \"store\", code);\n        return {f: f, a: context.store};\n    }\n\n    static parseTemplateRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            let value = obj[key];\n            if (Utils.isUcChar(key.charCodeAt(0))) {\n                // Value must be expanded as well.\n                if (Utils.isObjectLiteral(value)) {\n                    // Ref.\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\n                    let type = value.type ? value.type : Element;\n                    if (type === Element) {\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\n                    } else {\n                        store.push(type);\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\n                    }\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\n                    context.rid++;\n\n                    // Enter sub.\n                    this.parseTemplateRec(value, context, childCursor);\n\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\n                } else if (Utils.isObject(value)) {\n                    // Dynamic assignment.\n                    store.push(value);\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\n                }\n            } else {\n                if (key === \"text\") {\n                    const propKey = cursor + \"__text\";\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\n                    if (value.__propertyBinding === true) {\n                        // Allow binding entire objects to text property\n                        store.push(value);\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                    } else {\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\n                    const shaderCursor = `${cursor}[\"shader\"]`\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    this.parsePropertyBindings(value, context, shaderCursor);\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\n                    const propKey = cursor + \"__texture\";\n                    const type = value.type;\n                    if (type) {\n                        store.push(type);\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\n                    } else {\n                        loc.push(`${propKey} = ${cursor}.texture`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else {\n                    // Property;\n                    if (Utils.isNumber(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                    } else if (Utils.isBoolean(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\n                        // Dynamic assignment.\n                        // Because literal objects may contain dynamics, we store the full object.\n                        store.push(value);\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    } else {\n                        // String etc.\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                    }\n                }\n            }\n        });\n    }\n\n    static parseTemplatePropRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isNumber(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                } else if (Utils.isBoolean(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\n                    // Dynamic assignment.\n                    // Because literal objects may contain dynamics, we store the full object.\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                } else {\n                    // String etc.\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                }\n            }\n        });\n    }\n\n    static parsePropertyBindings(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                }\n            }\n        });\n    }\n\n    _onSetup() {\n        if (!this.__initialized) {\n            this._setup();\n        }\n    }\n\n    _setup() {\n    }\n\n    _onAttach() {\n        if (!this.__initialized) {\n            this.__init();\n            this.__initialized = true;\n        }\n\n        this._attach();\n    }\n\n    _attach() {\n    }\n\n    _onDetach() {\n        this._detach();\n    }\n\n    _detach() {\n    }\n\n    _onEnabled() {\n        if (!this.__firstEnable) {\n            this._firstEnable();\n            this.__firstEnable = true;\n        }\n\n        this._enable();\n    }\n\n    _firstEnable() {\n    }\n\n    _enable() {\n    }\n\n    _onDisabled() {\n        this._disable();\n    }\n\n    _disable() {\n    }\n\n    _onActive() {\n        if (!this.__firstActive) {\n            this._firstActive();\n            this.__firstActive = true;\n        }\n\n        this._active();\n    }\n\n    _firstActive() {\n    }\n\n    _active() {\n    }\n\n    _onInactive() {\n        this._inactive();\n    }\n\n    _inactive() {\n    }\n\n    get application() {\n        return this.stage.application;\n    }\n\n    __construct() {\n        this._construct();\n    }\n\n    _construct() {\n    }\n\n    _build() {\n    }\n\n    __init() {\n        this._init();\n    }\n\n    _init() {\n    }\n\n    _focus(newTarget, prevTarget) {\n    }\n\n    _unfocus(newTarget) {\n    }\n\n    _focusChange(target, newTarget) {\n    }\n\n    _getFocused() {\n        // Override to delegate focus to child components.\n        return this;\n    }\n\n    _setFocusSettings(settings) {\n        // Override to add custom settings. See Application._handleFocusSettings().\n    }\n\n    _handleFocusSettings(settings) {\n        // Override to react on custom settings. See Application._handleFocusSettings().\n    }\n\n    static _template() {\n        return {};\n    }\n\n    hasFinalFocus() {\n        let path = this.application._focusPath;\n        return path && path.length && path[path.length - 1] === this;\n    }\n\n    hasFocus() {\n        let path = this.application._focusPath;\n        return path && (path.indexOf(this) >= 0);\n    }\n\n    get cparent() {\n        return Component.getParent(this);\n    }\n\n    seekAncestorByType(type) {\n        let c = this.cparent;\n        while (c) {\n            if (c.constructor === type) {\n                return c;\n            }\n            c = c.cparent;\n        }\n    }\n\n    getSharedAncestorComponent(element) {\n        let ancestor = this.getSharedAncestor(element);\n        while (ancestor && !ancestor.isComponent) {\n            ancestor = ancestor.parent;\n        }\n        return ancestor;\n    }\n\n    get signals() {\n        return this.__signals;\n    }\n\n    set signals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        this.__signals = v;\n    }\n\n    set alterSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__signals) {\n            this.__signals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__signals[key];\n            } else {\n                this.__signals[key] = v;\n            }\n        }\n    }\n\n    get passSignals() {\n        return this.__passSignals || {};\n    }\n\n    set passSignals(v) {\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\n    }\n\n    set alterPassSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__passSignals) {\n            this.__passSignals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__passSignals[key];\n            } else {\n                this.__passSignals[key] = v;\n            }\n        }\n    }\n\n    /**\n     * Signals the parent of the specified event.\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\n     * @param {string} event\n     * @param {...*} args\n     */\n    signal(event, ...args) {\n        return this._signal(event, args);\n    }\n\n    _signal(event, args) {\n        const signalParent = this._getParentSignalHandler();\n        if (signalParent) {\n            if (this.__signals) {\n                let fireEvent = this.__signals[event];\n                if (fireEvent === false) {\n                    // Ignore event.\n                    return;\n                }\n                if (fireEvent) {\n                    if (fireEvent === true) {\n                        fireEvent = event;\n                    }\n \n                    if (Utils.isFunction(fireEvent)) {\n                        return fireEvent(...args);\n                    }\n\n                    if (signalParent._hasMethod(fireEvent)) {\n                        return signalParent[fireEvent](...args);\n                    }\n                }\n            }\n\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\n            if (passSignal) {\n                // Bubble up.\n                if (passSignal && passSignal !== true) {\n                    // Replace signal name.\n                    event = passSignal;\n                }\n\n                return signalParent._signal(event, args);\n            }\n        }\n    }\n\n    _getParentSignalHandler() {\n        return this.cparent ? this.cparent._getSignalHandler() : null;\n    }\n\n    _getSignalHandler() {\n        if (this._signalProxy) {\n            return this.cparent ? this.cparent._getSignalHandler() : null;\n        }\n        return this;\n    }\n\n    get _signalProxy() {\n        return false;\n    }\n\n    fireAncestors(name, ...args) {\n        if (!name.startsWith('$')) {\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\n        }\n\n        const parent = this._getParentSignalHandler();\n        if (parent) {\n            return parent._doFireAncestors(name, args);\n        }\n    }\n\n    _doFireAncestors(name, args) {\n        if (this._hasMethod(name)) {\n            return this.fire(name, ...args);\n        } else {\n            const signalParent = this._getParentSignalHandler();\n            if (signalParent) {\n                return signalParent._doFireAncestors(name, args);\n            }\n        }\n    }\n\n    static collectSubComponents(subs, element) {\n        if (element.hasChildren()) {\n            const childList = element.__childList;\n            for (let i = 0, n = childList.length; i < n; i++) {\n                const child = childList.getAt(i);\n                if (child.isComponent) {\n                    subs.push(child);\n                } else {\n                    Component.collectSubComponents(subs, child);\n                }\n            }\n        }\n    }\n\n    static getComponent(element) {\n        let parent = element;\n        while (parent && !parent.isComponent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    static getParent(element) {\n        return Component.getComponent(element.parent);\n    }\n}\n\nComponent.prototype.isComponent = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreQuadList {\n\n    constructor(ctx) {\n\n        this.ctx = ctx;\n\n        this.quadTextures = [];\n\n        this.quadElements = [];\n    }\n\n    get length() {\n        return this.quadTextures.length;\n    }\n\n    reset() {\n        this.quadTextures = [];\n        this.quadElements = [];\n        this.dataLength = 0;\n    }\n\n    getElement(index) {\n        return this.quadElements[index]._element;\n    }\n\n    getElementCore(index) {\n        return this.quadElements[index];\n    }\n\n    getTexture(index) {\n        return this.quadTextures[index];\n    }\n\n    getTextureWidth(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.w) {\n            // Render texture;\n            return nativeTexture.w;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.w;\n        }\n    }\n\n    getTextureHeight(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.h) {\n            // Render texture;\n            return nativeTexture.h;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class WebGLCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\n        // We do not (want to) handle memory overflow.\n        const byteSize = ctx.stage.getOption('bufferMemory');\n\n        this.dataLength = 0;\n\n        this.data = new ArrayBuffer(byteSize);\n        this.floats = new Float32Array(this.data);\n        this.uints = new Uint32Array(this.data);\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return index * 80;\n    }\n\n    getQuadContents() {\n        // Debug: log contents of quad buffer.\n        let floats = this.floats;\n        let uints = this.uints;\n        let lines = [];\n        for (let i = 1; i <= this.length; i++) {\n            let str = 'entry ' + i + ': ';\n            for (let j = 0; j < 4; j++) {\n                let b = i * 20 + j * 4;\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\n            }\n            lines.push(str);\n        }\n\n        return lines;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n\n        this.ctx = ctx;\n        this.shader = shader;\n        this.shaderOwner = shaderOwner;\n        this.renderTextureInfo = renderTextureInfo;\n        this.scissor = scissor;\n        this.index = index;\n        this.length = 0;\n\n    }\n\n    get quads() {\n        return this.ctx.renderState.quads;\n    }\n\n    getTexture(index) {\n        return this.quads.getTexture(this.index + index);\n    }\n\n    getElementCore(index) {\n        return this.quads.getElementCore(this.index + index);\n    }\n\n    getElement(index) {\n        return this.quads.getElement(this.index + index);\n    }\n\n    getElementWidth(index) {\n        return this.getElement(index).renderWidth;\n    }\n\n    getElementHeight(index) {\n        return this.getElement(index).renderHeight;\n    }\n\n    getTextureWidth(index) {\n        return this.quads.getTextureWidth(this.index + index);\n    }\n\n    getTextureHeight(index) {\n        return this.quads.getTextureHeight(this.index + index);\n    }\n\n    getRenderWidth() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.w;\n        } else {\n            return this.ctx.stage.w;\n        }\n    }\n\n    getRenderHeight() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.h;\n        } else {\n            return this.ctx.stage.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n\n        this.extraAttribsDataByteOffset = 0;\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return this.quads.getAttribsDataByteOffset(this.index + index);\n    }\n\n    /**\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\n     * @param x\n     * @param y\n     * @return {number[]}\n     */\n    getNormalRenderTextureCoords(x, y) {\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\n        coords[0] /= this.getRenderWidth();\n        coords[1] /= this.getRenderHeight();\n        coords[0] = coords[0] * 2 - 1;\n        coords[1] = 1 - coords[1] * 2;\n        return coords;\n    }\n\n    getProjection() {\n        if (this.renderTextureInfo === null) {\n            return this.ctx.renderExec._projection;\n        } else {\n            return this.renderTextureInfo.nativeTexture.projection;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreRenderExecutor {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.renderState = ctx.renderState;\n\n        this.gl = this.ctx.stage.gl;\n    }\n\n    destroy() {\n        this.ctx = null;\n        this.renderState = null;\n        this.gl = null;\n\n        delete this.ctx;\n        delete this.renderState;\n        delete this.gl;\n    }\n\n    _reset() {\n        this._bindRenderTexture(null);\n        this._setScissor(null);\n        this._clearRenderTexture();\n    }\n\n    execute() {\n        this._reset();\n\n        let qops = this.renderState.quadOperations;\n\n        let i = 0, j = 0, n = qops.length;\n        while (i < n) {\n            this._processQuadOperation(qops[i]);\n            i++;\n        }\n    }\n\n    _processQuadOperation(quadOperation) {\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\n            return;\n        }\n\n        this._setupQuadOperation(quadOperation);\n        this._execQuadOperation(quadOperation);\n\n    }\n\n    _setupQuadOperation(quadOperation) {\n    }\n\n    _execQuadOperation(op) {\n        // Set render texture.\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\n\n        if (this._renderTexture !== nativeTexture) {\n            this._bindRenderTexture(nativeTexture);\n        }\n\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\n            this._setScissor(null);\n            this._clearRenderTexture();\n            op.renderTextureInfo.cleared = true;\n            this._setScissor(op.scissor);\n        } else {\n            this._setScissor(op.scissor);\n        }\n\n        this._renderQuadOperation(op);\n    }\n\n    _renderQuadOperation(op) {\n    }\n\n    _bindRenderTexture(renderTexture) {\n        this._renderTexture = renderTexture;\n    }\n\n    _clearRenderTexture(renderTexture) {\n    }\n\n    _setScissor(area) {\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\n\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\n\n    constructor(ctx) {\n        super(ctx)\n\n        this.gl = this.ctx.stage.gl;\n\n        this.init();\n    }\n\n    init() {\n        let gl = this.gl;\n\n        // Create new sharable buffer for params.\n        this._attribsBuffer = gl.createBuffer();\n\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\n\n        // Init webgl arrays.\n        let allIndices = new Uint16Array(maxQuads * 6);\n\n        // fill the indices with the quads to draw.\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n            allIndices[i] = j;\n            allIndices[i + 1] = j + 1;\n            allIndices[i + 2] = j + 2;\n            allIndices[i + 3] = j;\n            allIndices[i + 4] = j + 2;\n            allIndices[i + 5] = j + 3;\n        }\n\n        // The quads buffer can be (re)used to draw a range of quads.\n        this._quadsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\n\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\n\n    }\n\n    destroy() {\n        super.destroy();\n        this.gl.deleteBuffer(this._attribsBuffer);\n        this.gl.deleteBuffer(this._quadsBuffer);\n\n        this.gl = null;\n        delete this.gl;\n    }\n\n    _reset() {\n        super._reset();\n\n        let gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n        gl.disable(gl.DEPTH_TEST);\n\n        this._stopShaderProgram();\n        this._setupBuffers();\n    }\n\n    _setupBuffers() {\n        let gl = this.gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\n    }\n\n    _setupQuadOperation(quadOperation) {\n        super._setupQuadOperation(quadOperation);\n        this._useShaderProgram(quadOperation.shader, quadOperation);\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            shader.beforeDraw(op);\n            shader.draw(op);\n            shader.afterDraw(op);\n        }\n    }\n\n    /**\n     * @param {WebGLShader} shader;\n     * @param {CoreQuadOperation} operation;\n     */\n    _useShaderProgram(shader, operation) {\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\n            if (this._currentShaderProgram) {\n                this._currentShaderProgram.stopProgram();\n            }\n            shader.useProgram();\n            this._currentShaderProgram = shader;\n        }\n        shader.setupUniforms(operation);\n    }\n\n    _stopShaderProgram() {\n        if (this._currentShaderProgram) {\n            // The currently used shader program should be stopped gracefully.\n            this._currentShaderProgram.stopProgram();\n            this._currentShaderProgram = null;\n        }\n    }\n\n    _bindRenderTexture(renderTexture) {\n        super._bindRenderTexture(renderTexture);\n\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\n        } else {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\n        }\n    }\n\n    _clearRenderTexture() {\n        super._clearRenderTexture();\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            let glClearColor = this.ctx.stage.getClearColor();\n            if (glClearColor) {\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        } else {\n            // Clear texture.\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    }\n\n    _setScissor(area) {\n        super._setScissor(area);\n\n        if (this._scissor === area) {\n            return;\n        }\n        this._scissor = area;\n\n        let gl = this.gl;\n        if (!area) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            let precision = this.ctx.stage.getRenderPrecision();\n            let y = area[1];\n            if (this._renderTexture === null) {\n                // Flip.\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\n            }\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreRenderState {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.stage = ctx.stage;\n\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\n\n        this.renderer = ctx.stage.renderer;\n\n        this.quads = this.renderer.createCoreQuadList(ctx);\n\n    }\n\n    reset() {\n        this._renderTextureInfo = null;\n\n        this._scissor = null;\n\n        this._shader = null;\n\n        this._shaderOwner = null;\n\n        this._realShader = null;\n\n        this._check = false;\n\n        this.quadOperations = [];\n\n        this._texturizer = null;\n\n        this._texturizerTemporary = false;\n\n        this._quadOperation = null;\n\n        this.quads.reset();\n\n        this._temporaryTexturizers = [];\n        \n        this._isCachingTexturizer = false;\n\n    }\n\n    get length() {\n        return this.quads.quadTextures.length;\n    }\n\n    setShader(shader, owner) {\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\n            // Same shader owner: active shader is also the same.\n            // Prevent any shader usage to save performance.\n\n            this._realShader = shader;\n\n            if (shader.useDefault()) {\n                // Use the default shader when possible to prevent unnecessary program changes.\n                shader = this.defaultShader;\n            }\n            if (this._shader !== shader || this._shaderOwner !== owner) {\n                this._shader = shader;\n                this._shaderOwner = owner;\n                this._check = true;\n            }\n        }\n    }\n\n    get renderTextureInfo() {\n        return this._renderTextureInfo;\n    }\n\n    setScissor(area) {\n        if (this._scissor !== area) {\n            if (area) {\n                this._scissor = area;\n            } else {\n                this._scissor = null;\n            }\n            this._check = true;\n        }\n    }\n\n    getScissor() {\n        return this._scissor;\n    }\n\n    setRenderTextureInfo(renderTextureInfo) {\n        if (this._renderTextureInfo !== renderTextureInfo) {\n            this._renderTextureInfo = renderTextureInfo;\n            this._scissor = null;\n            this._check = true;\n        }\n    }\n\n    /**\n     * Sets the texturizer to be drawn during subsequent addQuads.\n     * @param {ElementTexturizer} texturizer\n     */\n    setTexturizer(texturizer, cache = false) {\n        this._texturizer = texturizer;\n        this._cacheTexturizer = cache;\n    }\n\n    set isCachingTexturizer(v) {\n        this._isCachingTexturizer = v;\n    }\n\n    get isCachingTexturizer() {\n        return this._isCachingTexturizer;\n    }\n\n    addQuad(elementCore) {\n        if (!this._quadOperation) {\n            this._createQuadOperation();\n        } else if (this._check && this._hasChanges()) {\n            this._finishQuadOperation();\n            this._check = false;\n        }\n\n        let nativeTexture = null;\n        if (this._texturizer) {\n            nativeTexture = this._texturizer.getResultTexture();\n\n            if (!this._cacheTexturizer) {\n                // We can release the temporary texture immediately after finalizing this quad operation.\n                this._temporaryTexturizers.push(this._texturizer);\n            }\n        }\n\n        if (!nativeTexture) {\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\n        }\n\n        if (this._renderTextureInfo) {\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\n                this._renderTextureInfo.nativeTexture = nativeTexture;\n                this._renderTextureInfo.offset = this.length;\n            } else {\n                // It is not possible to reuse another texture when there is more than one quad.\n                this._renderTextureInfo.nativeTexture = null;\n            }\n            this._renderTextureInfo.empty = false;\n        }\n\n        this.quads.quadTextures.push(nativeTexture);\n        this.quads.quadElements.push(elementCore);\n\n        this._quadOperation.length++;\n\n        this.renderer.addQuad(this, this.quads, this.length - 1)\n    }\n\n    finishedRenderTexture() {\n        if (this._renderTextureInfo.nativeTexture) {\n            // There was only one texture drawn in this render texture.\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\n            // (it should exactly span this render texture).\n            if (!this._isRenderTextureReusable()) {\n                this._renderTextureInfo.nativeTexture = null;\n            }\n        }\n    }\n\n    _isRenderTextureReusable() {\n        const offset = this._renderTextureInfo.offset;\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\n    }\n\n    _hasChanges() {\n        let q = this._quadOperation;\n        if (this._shader !== q.shader) return true;\n        if (this._shaderOwner !== q.shaderOwner) return true;\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\n        if (this._scissor !== q.scissor) {\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _finishQuadOperation(create = true) {\n        if (this._quadOperation) {\n            if (this._quadOperation.length || this._shader.addEmpty()) {\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\n                    // Ignore empty clipping regions.\n                    this.quadOperations.push(this._quadOperation);\n                }\n            }\n\n            if (this._temporaryTexturizers.length) {\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\n                    // We can now reuse these render-to-textures in subsequent stages.\n                    // Huge performance benefit when filtering (fast blur).\n                    this._temporaryTexturizers[i].releaseRenderTexture();\n                }\n                this._temporaryTexturizers = [];\n            }\n\n            this._quadOperation = null;\n        }\n\n        if (create) {\n            this._createQuadOperation();\n        }\n    }\n\n    _createQuadOperation() {\n        this._quadOperation = this.renderer.createCoreQuadOperation(\n            this.ctx,\n            this._shader,\n            this._shaderOwner,\n            this._renderTextureInfo,\n            this._scissor,\n            this.length\n        );\n        this._check = false;\n    }\n\n    finish() {\n        if (this._quadOperation) {\n            // Add remaining.\n            this._finishQuadOperation(false);\n        }\n\n        this.renderer.finishRenderState(this);\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base functionality for shader setup/destroy.\n */\nexport default class WebGLShaderProgram {\n\n    constructor(vertexShaderSource, fragmentShaderSource) {\n\n        this.vertexShaderSource = vertexShaderSource;\n        this.fragmentShaderSource = fragmentShaderSource;\n\n        this._program = null;\n        this.gl = null;\n\n        this._uniformLocations = new Map();\n        this._attributeLocations = new Map();\n\n        this._currentUniformValues = {};\n    }\n\n    compile(gl) {\n        if (this._program) return;\n\n        this.gl = gl;\n\n        this._program = gl.createProgram();\n\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\n\n        gl.attachShader(this._program, glVertShader);\n        gl.attachShader(this._program, glFragShader);\n        gl.linkProgram(this._program);\n\n        // if linking fails, then log and cleanup\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\n            console.error('[Lightning] Error: Could not initialize shader.');\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\n            console.error('[Lightning] gl.getError()', gl.getError());\n\n            // if there is a program info log, log it\n            if (gl.getProgramInfoLog(this._program) !== '') {\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\n            }\n\n            gl.deleteProgram(this._program);\n            this._program = null;\n        }\n\n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    }\n\n    _glCompile(type, src) {\n        let shader = this.gl.createShader(type);\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\n            let idx = 0;\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\n            return null;\n        }\n\n        return shader;\n    }\n\n    getUniformLocation(name) {\n        let location = this._uniformLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getUniformLocation(this._program, name);\n            this._uniformLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    getAttribLocation(name) {\n        let location = this._attributeLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getAttribLocation(this._program, name);\n            this._attributeLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    destroy() {\n        if (this._program) {\n            this.gl.deleteProgram(this._program);\n        }\n\n        this._attributeLocations = null;\n        this._currentUniformValues = null;\n        this.fragmentShaderSource = null;\n        this._program = null;\n        this.gl = null;\n        this._uniformLocations = null;\n        this.vertexShaderSource = null;  \n\n        delete this.vertexShaderSource;\n        delete this._program;        \n        delete this._currentUniformValues;\n        delete this.fragmentShaderSource;\n        delete this.gl;\n        delete this._uniformLocations;\n        delete this._attributeLocations;\n\n    }\n\n    get glProgram() {\n        return this._program;\n    }\n\n    get compiled() {\n        return !!this._program;\n    }\n\n    _valueEquals(v1, v2) {\n        // Uniform value is either a typed array or a numeric value.\n        if (v1.length && v2.length) {\n            for (let i = 0, n = v1.length; i < n; i++) {\n                if (v1[i] !== v2[i]) return false;\n            }\n            return true;\n        } else {\n            return (v1 === v2);\n        }\n    }\n\n    _valueClone(v) {\n        if (v.length) {\n            return v.slice(0);\n        } else {\n            return v;\n        }\n    }\n\n    setUniformValue(name, value, glFunction) {\n        let v = this._currentUniformValues[name];\n        if (v === undefined || !this._valueEquals(v, value)) {\n            let clonedValue = this._valueClone(value);\n            this._currentUniformValues[name] = clonedValue;\n\n            let loc = this.getUniformLocation(name);\n            if (loc) {\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\n                if (isMatrix) {\n                    glFunction.call(this.gl, loc, false, clonedValue);\n                } else {\n                    glFunction.call(this.gl, loc, clonedValue);\n                }\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class WebGLShader extends Shader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        const stage = ctx.stage;\n\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\n        if (!this._program) {\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\n\n            // Let the vbo context perform garbage collection.\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\n        }\n\n        this.gl = stage.gl;\n    }\n\n    get glProgram() {\n        return this._program.glProgram;\n    }\n\n    _init() {\n        if (!this._initialized) {\n            this.initialize();\n            this._initialized = true;\n        }\n    }\n\n    initialize() {\n        this._program.compile(this.gl);\n    }\n\n    get initialized() {\n        return this._initialized;\n    }\n\n    _uniform(name) {\n        return this._program.getUniformLocation(name);\n    }\n\n    _attrib(name) {\n        return this._program.getAttribLocation(name);\n    }\n\n    _setUniform(name, value, glFunction) {\n        this._program.setUniformValue(name, value, glFunction);\n    }\n\n    useProgram() {\n        this._init();\n        this.gl.useProgram(this.glProgram);\n        this.beforeUsage();\n        this.enableAttribs();\n    }\n\n    stopProgram() {\n        this.afterUsage();\n        this.disableAttribs();\n    }\n\n    hasSameProgram(other) {\n        // For performance reasons, we first check for identical references.\n        return (other && ((other === this) || (other._program === this._program)));\n    }\n\n    beforeUsage() {\n        // Override to set settings other than the default settings (blend mode etc).\n    }\n\n    afterUsage() {\n        // All settings changed in beforeUsage should be reset here.\n    }\n\n    enableAttribs() {\n\n    }\n\n    disableAttribs() {\n\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 0;\n    }\n\n    getVertexAttribPointerOffset(operation) {\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\n        // operation.extraAttribsBufferByteOffset.\n    }\n\n    setupUniforms(operation) {\n        // Set all shader-specific uniforms.\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\n        // The uniforms are shared by all shaders that have the same type (and shader program).\n    }\n\n    _getProjection(operation) {\n        return operation.getProjection();\n    }\n\n    getFlipY(operation) {\n        return this._getProjection(operation)[1] < 0;\n    }\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n    cleanup() {\n        this._initialized = false;\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../WebGLShader.mjs\";\n\nexport default class DefaultShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            \n            gl.bindTexture(gl.TEXTURE_2D, glTexture);\n            gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n        }\n    }\n\n}\n\nDefaultShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDefaultShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Renderer {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._defaultShader = undefined;\n    }\n\n    gc(aggressive) {\n    }\n\n    destroy() {\n    }\n\n    getDefaultShader(ctx = this.stage.ctx) {\n        if (!this._defaultShader) {\n            this._defaultShader = this._createDefaultShader(ctx);\n        }\n        return this._defaultShader;\n    }\n\n    _createDefaultShader(ctx) {\n    }\n\n    isValidShaderType(shaderType) {\n        return (shaderType.prototype instanceof this._getShaderBaseType());\n    }\n\n    createShader(ctx, settings) {\n        const shaderType = settings.type;\n        // If shader type is not correct, use a different platform.\n        if (!this.isValidShaderType(shaderType)) {\n            const convertedShaderType = this._getShaderAlternative(shaderType);\n            if (!convertedShaderType) {\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\n                return this._createDefaultShader(ctx);\n            }\n            return new convertedShaderType(ctx);\n        } else {\n            const shader = new shaderType(ctx);\n            Base.patchObject(this, settings);\n            return shader;\n        }\n    }\n\n    _getShaderBaseType() {\n    }\n\n    _getShaderAlternative(shaderType) {\n        return this.getDefaultShader();\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport WebGLShader from \"./WebGLShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\n\nexport default class WebGLRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n        this.shaderPrograms = new Map();\n        this._compressedTextureExtensions = {\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\n        }\n    }\n\n    getCompressedTextureExtensions() {\n        return this._compressedTextureExtensions\n    }\n\n    destroy() {\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\n\n        this.shaderPrograms = null;\n        this._compressedTextureExtensions = null;\n\n        delete this.shaderPrograms;\n        delete this._compressedTextureExtensions;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return WebGLShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getWebGL && shaderType.getWebGL();\n    }\n\n    createCoreQuadList(ctx) {\n        return new WebGLCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new WebGLCoreRenderExecutor(ctx);\n    }\n\n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const gl = this.stage.gl;\n        const glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        glTexture.params = {};\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\n\n        // We need a specific framebuffer for every render texture.\n        glTexture.framebuffer = gl.createFramebuffer();\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\n\n        return glTexture;\n    }\n\n    freeRenderTexture(glTexture) {\n        let gl = this.stage.gl;\n        gl.deleteFramebuffer(glTexture.framebuffer);\n        gl.deleteTexture(glTexture);\n    }\n\n    _getBytesPerPixel(fmt, type) {\n        const gl = this.stage.gl;\n\n        if (fmt === gl.RGBA) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 4;\n\n                case gl.UNSIGNED_SHORT_4_4_4_4:\n                    return 2;\n\n                case gl.UNSIGNED_SHORT_5_5_5_1:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGBA format');\n            }\n        }\n        else if (fmt === gl.RGB) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 3;\n\n                case gl.UNSIGNED_BYTE_5_6_5:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGB format');\n            }\n        }\n        else {\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\n        }\n    }\n\n    uploadTextureSource(textureSource, options) {\n        const gl = this.stage.gl;\n\n        const source = options.source;\n        let compressed = false;\n        if (options.renderInfo) {\n            compressed = options.renderInfo.compressed || false\n        }\n\n        const format = {\n            premultiplyAlpha: true,\n            hasAlpha: true\n        };\n\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\n            format.premultiplyAlpha = options.premultiplyAlpha;\n        }\n\n        if (options && options.hasOwnProperty('flipBlueRed')) {\n            format.flipBlueRed = options.flipBlueRed;\n        }\n\n        if (options && options.hasOwnProperty('hasAlpha')) {\n            format.hasAlpha = options.hasAlpha;\n        }\n\n        if (!format.hasAlpha) {\n            format.premultiplyAlpha = false;\n        }\n\n        format.texParams = options.texParams || {}\n        format.texOptions = options.texOptions || {}\n\n        let glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\n\n        if (Utils.isNode) {\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\n        }\n\n        const texParams = format.texParams;\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n\n        Object.keys(texParams).forEach(key => {\n            const value = texParams[key];\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\n        });\n\n        if (compressed) {\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\n            return glTexture;\n        }\n         \n        const texOptions = format.texOptions;\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\n        if (options && options.imageRef) {\n            texOptions.imageRef = options.imageRef;\n        }\n        \n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\n        \n        glTexture.params = Utils.cloneObjShallow(texParams);\n        glTexture.options = Utils.cloneObjShallow(texOptions);\n\n        // calculate bytes per pixel for vram usage tracking\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\n\n        return glTexture;\n    }\n\n    freeTextureSource(textureSource) {\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        let offset = (index * 20);\n        const elementCore = quads.quadElements[index];\n\n        let r = elementCore._renderContext;\n\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        const mca = StageUtils.mergeColorAlpha;\n\n        if (r.tb !== 0 || r.tc !== 0) {\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta;\n            floats[offset++] = r.py + elementCore._w * r.tc;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._h * r.td;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        } else {\n            // Simple.\n            let cx = r.px + elementCore._w * r.ta;\n            let cy = r.py + elementCore._h * r.td;\n\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        }\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        return ((floats[offset] === 0) &&\n            (floats[offset + 1] === 0) &&\n            (floats[offset + 2] === 0) &&\n            (floats[offset + 3] === 0) &&\n            (uints[offset + 4] === 0xFFFFFFFF) &&\n            (floats[offset + 5] === renderTextureInfo.w) &&\n            (floats[offset + 6] === 0) &&\n            (floats[offset + 7] === 1) &&\n            (floats[offset + 8] === 0) &&\n            (uints[offset + 9] === 0xFFFFFFFF) &&\n            (floats[offset + 10] === renderTextureInfo.w) &&\n            (floats[offset + 11] === renderTextureInfo.h) &&\n            (floats[offset + 12] === 1) &&\n            (floats[offset + 13] === 1) &&\n            (uints[offset + 14] === 0xFFFFFFFF) &&\n            (floats[offset + 15] === 0) &&\n            (floats[offset + 16] === renderTextureInfo.h) &&\n            (floats[offset + 17] === 0) &&\n            (floats[offset + 18] === 1) &&\n            (uints[offset + 19] === 0xFFFFFFFF));\n    }\n\n    finishRenderState(renderState) {\n        // Set extra shader attribute data.\n        let offset = renderState.length * 80;\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\n            offset += extra;\n            if (extra) {\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\n            }\n        }\n        renderState.quads.dataLength = offset;\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        const gl = this.stage.gl;\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\n        const precision = renderTexture.precision;\n        gl.copyTexSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            precision * (options.sx || 0),\n            precision * (options.sy || 0),\n            precision * (options.x || 0),\n            precision * (options.y || 0),\n            precision * (options.w || renderTexture.ow),\n            precision * (options.h || renderTexture.oh));\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class C2dCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this.renderContexts = [];\n        this.modes = [];\n    }\n\n    setRenderContext(index, v) {\n        this.renderContexts[index] = v;\n    }\n\n    setSimpleTc(index, v) {\n        if (v) {\n            this.modes[index] |= 1;\n        } else {\n            this.modes[index] -= (this.modes[index] & 1);\n        }\n    }\n\n    setWhite(index, v) {\n        if (v) {\n            this.modes[index] |= 2;\n        } else {\n            this.modes[index] -= (this.modes[index] & 2);\n        }\n    }\n\n    getRenderContext(index) {\n        return this.renderContexts[index];\n    }\n\n    getSimpleTc(index) {\n        return (this.modes[index] & 1);\n    }\n\n    getWhite(index) {\n        return (this.modes[index] & 2);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\n\n    getRenderContext(index) {\n        return this.quads.getRenderContext(this.index + index);\n    }\n\n    getSimpleTc(index) {\n        return this.quads.getSimpleTc(this.index + index);\n    }\n\n    getWhite(index) {\n        return this.quads.getWhite(this.index + index);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport Utils from \"../../tree/Utils.mjs\";\n\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\n\n    init() {\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            const target = this._renderTexture || this._mainRenderTexture;\n            shader.beforeDraw(op, target);\n            shader.draw(op, target);\n            shader.afterDraw(op, target);\n        }\n    }\n\n    _clearRenderTexture() {\n        const ctx = this._getContext();\n\n        let clearColor = [0, 0, 0, 0];\n        if (this._mainRenderTexture.ctx === ctx) {\n            clearColor = this.ctx.stage.getClearColor();\n        }\n\n        const renderTexture = ctx.canvas;\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\n        } else {\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\n            // Do not use fillRect because it produces artifacts.\n            ctx.globalCompositeOperation = 'copy';\n            ctx.beginPath();\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\n            ctx.closePath();\n            ctx.fill();\n            ctx.globalCompositeOperation = 'source-over';\n        }\n    }\n    \n    _getContext() {\n        if (this._renderTexture) {\n            return this._renderTexture.ctx;\n        } else {\n            return this._mainRenderTexture.ctx;\n        } \n    }\n\n    _restoreContext() {\n        const ctx = this._getContext();\n        ctx.restore();\n        ctx.save();\n        ctx._scissor = null;\n    }\n\n    _setScissor(area) {\n        const ctx = this._getContext();\n\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\n            // Clipping is stored in the canvas context state.\n            // We can't reset clipping alone so we need to restore the full context.\n            this._restoreContext();\n\n            let precision = this.ctx.stage.getRenderPrecision();\n            if (area) {\n                ctx.beginPath();\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n                ctx.closePath();\n                ctx.clip();\n            }\n            ctx._scissor = area;\n        }\n    }\n\n    static _equalScissorAreas(canvas, area, current) {\n        if (!area) {\n            area = [0, 0, canvas.width, canvas.height]\n        }\n        if (!current) {\n            current = [0, 0, canvas.width, canvas.height]\n        }\n        return Utils.equalValues(area, current)\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class C2dShader extends Shader {\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dShader from \"../C2dShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class DefaultShader extends C2dShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\n        this._tintManager = this.ctx.stage.renderer.tintManager;\n    }\n\n    draw(operation, target) {\n        const ctx = target.ctx;\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            const tx = operation.getTexture(i);\n            const vc = operation.getElementCore(i);\n            const rc = operation.getRenderContext(i);\n            const white = operation.getWhite(i);\n            const stc = operation.getSimpleTc(i);\n\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\n            const precision = this.ctx.stage.getRenderPrecision();\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\n\n            const rect = (tx === this._rectangleTexture);\n            const info = {operation, target, index: i, rect};\n\n            if (rect) {\n                // Check for gradient.\n                if (white) {\n                    ctx.fillStyle = 'white';\n                } else {\n                    this._setColorGradient(ctx, vc);\n                }\n\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n                ctx.fillRect(0, 0, vc.w, vc.h);\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            } else {\n                // @todo: set image smoothing based on the texture.\n\n                // @todo: optimize by registering whether identity texcoords are used.\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n\n                // @todo: test if rounding yields better performance.\n\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\n\n                let colorize = !white;\n                if (colorize) {\n                    // @todo: cache the tint texture for better performance.\n\n                    // Draw to intermediate texture with background color/gradient.\n                    // This prevents us from having to create a lot of render texture canvases.\n\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\n                    let color = vc._colorUl;\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\n                    }\n\n                    const alpha = ((color / 16777216) | 0) / 255.0;\n                    ctx.globalAlpha *= alpha;\n\n                    const rgb = color & 0x00FFFFFF;\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\n\n                    // Actually draw result.\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                } else {\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                }\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            }\n        }\n    }\n\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\n        let color = vc._colorUl;\n        let gradient;\n        //@todo: quick single color check.\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\n\n        if (vc._colorUl === vc._colorUr) {\n            if (vc._colorBl === vc._colorBr) {\n                if (vc._colorUl === vc.colorBl) {\n                    // Single color.\n                } else {\n                    // Vertical gradient.\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\n                    if (transparency) {\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\n                    } else {\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\n\n                    }\n                }\n            } else {\n                // Not supported gradient.\n            }\n        } else {\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\n                // Horizontal gradient.\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\n                if (transparency) {\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\n                } else {\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\n                }\n            }\n        }\n\n        if (gradient) {\n            ctx.fillStyle = gradient;\n        } else {\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\n        }\n    }\n\n    _beforeDrawEl(info) {\n    }\n\n    _afterDrawEl(info) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class C2dTextureTintManager {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._usedMemory = 0;\n        this._cachedNativeTextures = new Set();\n    }\n\n    destroy() {\n        this.gc(true);\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n\n        this.stage.addMemoryUsage(delta);\n    }\n\n    delete(nativeTexture) {\n        // Should be called when native texture is cleaned up.\n        if (this._hasCache(nativeTexture)) {\n            const cache = this._getCache(nativeTexture);\n            const prevMemUsage = cache.memoryUsage;\n            cache.clear();\n            this._cachedNativeTextures.delete(nativeTexture);\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\n        }\n    }\n\n    getTintTexture(nativeTexture, color) {\n        const frame = this.stage.frameCounter;\n\n        this._cachedNativeTextures.add(nativeTexture);\n\n        const cache = this._getCache(nativeTexture);\n\n        const item = cache.get(color);\n        item.lf = frame;\n\n        if (item.tx) {\n            if (nativeTexture.update > item.u) {\n                // Native texture was updated in the mean time: renew.\n                this._tintTexture(item.tx, nativeTexture, color)\n            }\n\n            return item.tx;\n        } else {\n            const before = cache.memoryUsage;\n\n            // Find blanco tint texture.\n            let target = cache.reuseTexture(frame);\n            if (target) {\n                target.ctx.clearRect(0, 0, target.width, target.height);\n            } else {\n                // Allocate new.\n                target = document.createElement('canvas');\n                target.width = nativeTexture.w;\n                target.height = nativeTexture.h;\n                target.ctx = target.getContext('2d');\n            }\n\n            this._tintTexture(target, nativeTexture, color);\n            cache.set(color, target, frame);\n\n            const after = cache.memoryUsage;\n\n            if (after !== before) {\n                this._addMemoryUsage(after - before);\n            }\n\n            return target;\n        }\n    }\n\n    _tintTexture(target, source, color) {\n        let col = color.toString(16);\n        while (col.length < 6) {\n            col = \"0\" + col;\n        }\n        target.ctx.fillStyle = '#' + col;\n        target.ctx.globalCompositeOperation = 'copy';\n        target.ctx.fillRect(0, 0, source.w, source.h);\n        target.ctx.globalCompositeOperation = 'multiply';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n\n        // Alpha-mix the texture.\n        target.ctx.globalCompositeOperation = 'destination-in';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n    }\n\n    _hasCache(nativeTexture) {\n        return !!nativeTexture._tintCache;\n    }\n\n    _getCache(nativeTexture) {\n        if (!nativeTexture._tintCache) {\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\n        }\n        return nativeTexture._tintCache;\n    }\n\n    gc(aggressive = false) {\n        const frame = this.stage.frameCounter;\n        let delta = 0;\n        this._cachedNativeTextures.forEach(texture => {\n            const cache = this._getCache(texture);\n            if (aggressive) {\n                delta += cache.memoryUsage;\n                cache.clear();\n            } else {\n                const before = cache.memoryUsage;\n                cache.cleanup(frame);\n                cache.releaseBlancoTextures();\n                delta += (cache.memoryUsage - before);\n            }\n        });\n\n        if (aggressive) {\n            this._cachedNativeTextures.clear();\n        }\n\n        if (delta) {\n            this._addMemoryUsage(delta);\n        }\n    }\n\n}\n\nclass C2dTintCache {\n\n    constructor(nativeTexture) {\n        this._tx = nativeTexture;\n        this._colors = new Map();\n        this._blancoTextures = null;\n        this._lastCleanupFrame = 0;\n        this._memTextures = 0;\n    }\n\n    get memoryUsage() {\n        return this._memTextures * this._tx.w * this._tx.h;\n    }\n\n    releaseBlancoTextures() {\n        this._memTextures -= this._blancoTextures.length;\n        this._blancoTextures = [];\n    }\n\n    clear() {\n        // Dereference the textures.\n        this._blancoTextures = null;\n        this._colors.clear();\n        this._memTextures = 0;\n    }\n\n    get(color) {\n        let item = this._colors.get(color);\n        if (!item) {\n            item = {lf: -1, tx: undefined, u: -1};\n            this._colors.set(color, item);\n        }\n        return item;\n    }\n\n    set(color, texture, frame) {\n        const item = this.get(color);\n        item.lf = frame;\n        item.tx = texture;\n        item.u = frame;\n        this._memTextures++;\n    }\n\n    cleanup(frame) {\n        // We only need to clean up once per frame.\n        if (this._lastCleanupFrame !== frame) {\n\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\n            this._blancoTextures = [];\n\n            this._colors.forEach((item, color) => {\n                // Clean up entries that were not used last frame.\n                if (item.lf < frame - 1) {\n                    if (item.tx) {\n                        // Keep as reusable blanco texture.\n                        this._blancoTextures.push(item.tx);\n                    }\n                    this._colors.delete(color);\n                }\n            });\n\n            this._lastCleanupFrame = frame;\n        }\n    }\n\n    reuseTexture(frame) {\n        // Try to reuse textures, because creating them every frame is expensive.\n        this.cleanup(frame);\n        if (this._blancoTextures && this._blancoTextures.length) {\n            this._memTextures--;\n            return this._blancoTextures.pop();\n        }\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport C2dShader from \"./C2dShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\n\nexport default class C2dRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n\n        this.tintManager = new TextureTintManager(stage);\n\n        this.setupC2d(this.stage.c2d.canvas);\n    }\n\n    destroy() {\n        this.tintManager.destroy();\n\n        this.tintManager = null;\n        delete this.tintManager;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return C2dShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getC2d && shaderType.getC2d();\n    }\n\n    createCoreQuadList(ctx) {\n        return new C2dCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new C2dCoreRenderExecutor(ctx);\n    }\n    \n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const canvas = document.createElement('canvas');\n        canvas.width = pw;\n        canvas.height = ph;\n        this.setupC2d(canvas);\n        return canvas;\n    }\n    \n    freeRenderTexture(nativeTexture) {\n        this.tintManager.delete(nativeTexture);\n    }\n\n    gc(aggressive) {\n        this.tintManager.gc(aggressive);\n    }\n\n    uploadTextureSource(textureSource, options) {\n        // For canvas, we do not need to upload.\n        if (options.source.buffer) {\n            // Convert RGBA buffer to canvas.\n            const canvas = document.createElement('canvas');\n            canvas.width = options.w;\n            canvas.height = options.h;\n\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\n            return canvas;\n        }\n\n        return options.source;\n    }\n\n    freeTextureSource(textureSource) {\n        this.tintManager.delete(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        // Render context changes while traversing so we save it by ref.\n        const elementCore = quads.quadElements[index];\n        quads.setRenderContext(index, elementCore._renderContext);\n        quads.setWhite(index, elementCore.isWhite());\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        // @todo: check render coords/matrix, maybe move this to core?\n        return false;\n    }\n\n    finishRenderState(renderState) {\n    }\n\n    setupC2d(canvas) {\n        const ctx = canvas.getContext('2d');\n        canvas.ctx = ctx;\n\n        ctx._scissor = null;\n\n        // Save base state so we can restore the defaults later.\n        canvas.ctx.save();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\n\nexport default class SparkShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    if (glTexture.options && glTexture.options.imageRef) {\n                        let elementPostion = (i > 0) ? (i - 1) : i;\n                        const precision = this.ctx.stage.getOption('precision');\n                        let vc = operation.getElementCore(elementPostion);\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                    } else {\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    }\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                if (glTexture.options && glTexture.options.imageRef) {\n                    const precision = this.ctx.stage.getOption('precision');\n                    let vc = operation.getElementCore(pos);\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                } else {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                }\n            }\n        }\n    }\n\n}\n\nSparkShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nSparkShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\nimport SparkShader from \"./shaders/SparkShader.mjs\";\n\nexport default class SparkRenderer extends WebGLRenderer {\n\n    constructor(stage) {\n        super(stage);\n    }\n\n    _createDefaultShader(ctx) {\n        return new SparkShader(ctx);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        global.beginDrawing();\n        let ret = super.createCoreRenderExecutor(ctx);\n        global.endDrawing();\n        return ret;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ImageWorker {\n\n    constructor(options = {}) {\n        this._items = new Map();\n        this._id = 0;\n\n        this._initWorker();\n    }\n\n    destroy() {\n        if (this._worker) {\n            this._worker.terminate();\n        }\n\n        this._items = null;\n        this._worker = null;\n\n        delete this._items;\n        delete this._worker;        \n    }\n\n    _initWorker() {\n        const code = `(${createWorker.toString()})()`;\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\n            type: 'application/javascript; charset=utf-8'\n        });\n        this._worker = new Worker(blobURL);\n\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\n\n        this._worker.onmessage = (e) => {\n            if (e.data && e.data.id) {\n                const id = e.data.id;\n                const item = this._items.get(id);\n                if (item) {\n                    if (e.data.type == 'data') {\n                        this.finish(item, e.data.info);\n                    } else {\n                        this.error(item, e.data.info);\n                    }\n                }\n            }\n        }\n    }\n\n    create(src) {\n        const id = ++this._id;\n        const item = new ImageWorkerImage(this, id, src);\n        this._items.set(id, item);\n        this._worker.postMessage({type: \"add\", id: id, src: src});\n        return item;\n    }\n\n    cancel(image) {\n        this._worker.postMessage({type: \"cancel\", id: image.id});\n        this._items.delete(image.id);\n    }\n\n    error(image, info) {\n        image.error(info);\n        this._items.delete(image.id);\n    }\n\n    finish(image, info) {\n        image.load(info);\n        this._items.delete(image.id);\n    }\n\n}\n\nclass ImageWorkerImage {\n\n    constructor(manager, id, src) {\n        this._manager = manager;\n        this._id = id;\n        this._src = src;\n        this._onError = null;\n        this._onLoad = null;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set onError(f) {\n        this._onError = f;\n    }\n\n    set onLoad(f) {\n        this._onLoad = f;\n    }\n\n    cancel() {\n        this._manager.cancel(this);\n    }\n\n    load(info) {\n        if (this._onLoad) {\n            this._onLoad(info);\n        }\n    }\n\n    error(info) {\n        if (this._onError) {\n            this._onError(info);\n        }\n    }\n\n}\n\n/**\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\n */\nconst createWorker = function() {\n\n    function ImageWorkerServer() {\n\n        this.items = new Map();\n\n        var t = this;\n        onmessage = function(e) {\n            t._receiveMessage(e);\n        }\n\n    }\n\n    ImageWorkerServer.isPathAbsolute = function(path) {\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\n    };\n\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\n        if (e.data.type === 'config') {\n            this.config = e.data.config;\n\n            var base = this.config.path;\n            // the constructing of the basepath fails\n            // if location.hash contains a slash\n            var hasHashPath = /#.*?\\//;\n            if(hasHashPath.test(base)){\n                base = base.replace(/#.*$/,'');\n            }\n\n            var parts = base.split(\"/\");\n            parts.pop();\n            this._relativeBase = parts.join(\"/\") + \"/\";\n\n        } else if (e.data.type === 'add') {\n            this.add(e.data.id, e.data.src);\n        } else if (e.data.type === 'cancel') {\n            this.cancel(e.data.id);\n        }\n    };\n\n    ImageWorkerServer.prototype.add = function(id, src) {\n        // Convert relative URLs.\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\n            src = this._relativeBase + src;\n        }\n\n        if (src.substr(0,2) === \"//\") {\n            // This doesn't work for image workers.\n            src = this.config.protocol + src;\n        }\n\n        var item = new ImageWorkerServerItem(id, src);\n        var t = this;\n        item.onFinish = function(result) {\n            t.finish(item, result);\n        };\n        item.onError = function(info) {\n            t.error(item, info);\n        };\n        this.items.set(id, item);\n        item.start();\n    };\n\n    ImageWorkerServer.prototype.cancel = function(id) {\n        var item = this.items.get(id);\n        if (item) {\n            item.cancel();\n            this.items.delete(id);\n        }\n    }\n\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\n        postMessage({\n            type: \"data\",\n            id: item.id,\n            info: {\n                imageBitmap,\n                hasAlphaChannel\n            }\n        }, [imageBitmap]);\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\n        postMessage({\n            type: \"error\",\n            id: item.id,\n            info: {\n                type,\n                message\n            }\n        });\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.isWPEBrowser = function() {\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\n    };\n\n    function ImageWorkerServerItem(id, src) {\n\n        this._onError = undefined;\n        this._onFinish = undefined;\n        this._id = id;\n        this._src = src;\n        this._xhr = undefined;\n        this._mimeType = undefined;\n        this._canceled = false;\n\n    }\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\n        get: function() {\n            return this._id;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\n        get: function() {\n            return this._onFinish;\n        },\n        set: function(f) {\n            this._onFinish = f;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\n        get: function() {\n            return this._onError;\n        },\n        set: function(f) {\n            this._onError = f;\n        }\n    });\n\n    ImageWorkerServerItem.prototype.start = function() {\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open(\"GET\", this._src, true);\n        this._xhr.responseType = \"blob\";\n\n        var t = this;\n        this._xhr.onerror = function(oEvent) {\n            t.error({type: \"connection\", message: \"Connection error\"});\n        };\n\n        this._xhr.onload = function(oEvent) {\n            var blob = t._xhr.response;\n            t._mimeType = blob.type;\n\n            t._createImageBitmap(blob);\n        };\n\n        this._xhr.send();\n    };\n\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\n        var t = this;\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\n            t.finish({\n                imageBitmap,\n                hasAlphaChannel: t._hasAlphaChannel()\n            });\n        }).catch(function(e) {\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\n        });\n    };\n\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\n        if (ImageWorkerServer.isWPEBrowser()) {\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\n            return true;\n        } else {\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\n        }\n    };\n\n    ImageWorkerServerItem.prototype.cancel = function() {\n        if (this._canceled) return;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._canceled = true;\n    };\n\n    ImageWorkerServerItem.prototype.error = function(type, message) {\n        if (!this._canceled && this._onError) {\n            this._onError({type, message});\n        }\n    };\n\n    ImageWorkerServerItem.prototype.finish = function(info) {\n        if (!this._canceled && this._onFinish) {\n            this._onFinish(info);\n        }\n    };\n\n    var worker = new ImageWorkerServer();\n};\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport ImageWorker from \"./ImageWorker.mjs\";\n\n/**\n * Platform-specific functionality.\n */\nexport default class WebPlatform {\n\n    init(stage) {\n        this.stage = stage;\n        this._looping = false;\n        this._awaitingLoop = false;\n\n        // Alternative handler to avoid RAF when idle\n        this._loopHandler = null;\n        this._idleLoopCounter = 0;\n        this._idleLoopDelay = 60;\n\n        if (this.stage.getOption(\"useImageWorker\")) {\n            if (!window.createImageBitmap || !window.Worker) {\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\n            } else {\n                this._imageWorker = new ImageWorker();\n            }\n        }\n\n        this._registerVisibilityChangeHandler();\n    }\n\n    destroy() {\n        if (this._imageWorker) {\n            this._imageWorker.destroy();\n        }\n\n        clearInterval(this._loopHandler);\n\n        this._removeKeyHandler();\n        this._removeClickHandler();\n        this._removeHoverHandler();\n        this._removeScrollWheelHandler();\n        this._removeVisibilityChangeHandler();\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    startLoop() {\n        this._looping = true;\n        if (!this._awaitingLoop) {\n            this.loop();\n        }\n    }\n\n    stopLoop() {\n        this._looping = false;\n    }\n\n    switchLoop() {\n        if (this._idleLoopCounter < this._idleLoopDelay) {\n            this._idleLoopCounter++;\n            return;\n        }\n        if (!this.stage.ctx.hasRenderUpdates()) {\n            this.stopLoop();\n            this._loopHandler = setInterval(() => {\n                this.stage.updateFrame();\n                this.stage.idleFrame();\n                if (this.stage.ctx.hasRenderUpdates()) {\n                    clearInterval(this._loopHandler);\n                    this.startLoop();\n                };\n            }, 1000 / 60);\n        } else {\n            this._idleLoopCounter = 0;\n        }\n    }\n\n    loop() {\n        let self = this;\n        let lp = function () {\n            self._awaitingLoop = false;\n            if (self._looping) {\n                self.stage.updateFrame();\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\n                    self.switchLoop();\n                }\n                self.stage.renderFrame();\n                requestAnimationFrame(lp);\n                self._awaitingLoop = true;\n            }\n        }\n        requestAnimationFrame(lp);\n    }\n\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\n        gl.compressedTexImage2D(\n            gl.TEXTURE_2D,\n            0,\n            source.glInternalFormat,\n            source.pixelWidth,\n            source.pixelHeight,\n            0,\n            view,\n        )\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    uploadGlTexture(gl, textureSource, source, options) {\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\n            // Web-specific data types.\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n        } else if (source instanceof HTMLCanvasElement) {\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n            } else if (source.width > 0 && source.height > 0) {\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\n                const ctx = source.getContext('2d');\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\n        }\n    }\n\n    /**\n     * KTX File format specification\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\n     **/\n    handleKtxLoad(cb, src) {\n        var self = this;\n        return function () {\n            var arraybuffer = this.response;\n            var view = new DataView(arraybuffer);\n\n            // identifier, big endian\n            var targetIdentifier = 3632701469\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\n                cb('Parsing failed: identifier ktx mismatch:', src)\n            }\n\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\n            var data = {\n                glType: view.getUint32(16, littleEndian),\n                glTypeSize: view.getUint32(20, littleEndian),\n                glFormat: view.getUint32(24, littleEndian),\n                glInternalFormat: view.getUint32(28, littleEndian),\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\n                pixelWidth: view.getUint32(36, littleEndian),\n                pixelHeight: view.getUint32(40, littleEndian),\n                pixelDepth: view.getUint32(44, littleEndian),\n                numberOfArrayElements: view.getUint32(48, littleEndian),\n                numberOfFaces: view.getUint32(52, littleEndian),\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\n                kvps: [],\n                mipmaps: [],\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            const props = (obj) => {\n                const p = [];\n                for (let v in obj) {\n                    p.push(obj[v]);\n                }\n                return p;\n            }\n\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\n                .filter((obj) => obj != null)\n                .map((obj) => props(obj))\n                .reduce((prev, current) => prev.concat(current));\n\n            if (!formats.includes(data.glInternalFormat)) {\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\n            }\n\n            var offset = 64\n            // Key Value Pairs of data start at byte offset 64\n            // But the only known kvp is the API version, so skipping parsing.\n            offset += data.bytesOfKeyValueData;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                var imageSize = view.getUint32(offset);\n                offset += 4;\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\n                offset += imageSize\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    handlePvrLoad(cb, src) {\n        return function () {\n            // pvr header length in 32 bits\n            const pvrHeaderLength = 13;\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n            const pvrFormatEtc1 = 0x8D64;\n            const pvrWidth = 7;\n            const pvrHeight = 6;\n            const pvrMipmapCount = 11;\n            const pvrMetadata = 12;\n            const arrayBuffer = this.response;\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n            const dataOffset = header[pvrMetadata] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            var data = {\n                glInternalFormat: pvrFormatEtc1,\n                pixelWidth: header[pvrWidth],\n                pixelHeight: header[pvrHeight],\n                numberOfMipmapLevels: header[pvrMipmapCount],\n                mipmaps: [],\n                pvr: true,\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            let offset = 0\n            let width = data.pixelWidth;\n            let height = data.pixelHeight;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n                data.mipmaps.push(view);\n                offset += level;\n                width = width >> 1;\n                height = height >> 1;\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    loadSrcTexture({ src, hasAlpha }, cb) {\n        let cancelCb = undefined;\n        let isPng = (src.toLowerCase().indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\n        let isKtx = src.indexOf('.ktx') >= 0;\n        let isPvr = src.indexOf('.pvr') >= 0;\n        if (isKtx || isPvr) {\n            let request = new XMLHttpRequest();\n            request.addEventListener(\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\n            );\n            request.open(\"GET\", src);\n            request.responseType = \"arraybuffer\";\n            request.send();\n            cancelCb = function () {\n                request.abort();\n            }\n        } else if (this._imageWorker) {\n            // WPE-specific image parser.\n            const image = this._imageWorker.create(src);\n            image.onError = function (err) {\n                return cb(\"Image load error\");\n            };\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\n                cb(null, {\n                    source: imageBitmap,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: hasAlphaChannel,\n                    premultiplyAlpha: true\n                });\n            };\n            cancelCb = function () {\n                image.cancel();\n            }\n        } else {\n            let image = new Image();\n\n            // On the PS4 platform setting the `crossOrigin` attribute on\n            // images can cause CORS failures.\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\n                // Base64.\n                image.crossOrigin = \"Anonymous\";\n            }\n            image.onerror = function (err) {\n                // Ignore error message when cancelled.\n                if (image.src) {\n                    return cb(\"Image load error\");\n                }\n            };\n            image.onload = function () {\n                cb(null, {\n                    source: image,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: isPng || hasAlpha\n                });\n            };\n            image.src = src;\n\n            cancelCb = function () {\n                image.onerror = null;\n                image.onload = null;\n                image.removeAttribute('src');\n            }\n        }\n\n        return cancelCb;\n    }\n\n    createWebGLContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let opts = {\n            alpha: true,\n            antialias: false,\n            premultipliedAlpha: true,\n            stencil: true,\n            preserveDrawingBuffer: false\n        };\n\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts) || canvas.getContext('webgl2', opts);\n\n        if (!gl) {\n            throw new Error('This browser does not support webGL.');\n        }\n\n        return gl;\n    }\n\n    createCanvasContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let c2d = canvas.getContext('2d');\n        if (!c2d) {\n            throw new Error('This browser does not support 2d canvas.');\n        }\n\n        return c2d;\n    }\n\n    getHrTime() {\n        return window.performance ? window.performance.now() : (new Date()).getTime();\n    }\n\n    getDrawingCanvas() {\n        // We can't reuse this canvas because textures may load async.\n        return document.createElement('canvas');\n    }\n\n    getTextureOptionsForDrawingCanvas(canvas) {\n        let options = {};\n        options.source = canvas;\n        return options;\n    }\n\n    nextFrame(changes) {\n        /* WebGL blits automatically */\n    }\n\n    registerKeydownHandler(keyhandler) {\n        this._keydownListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keydown', this._keydownListener);\n    }\n\n    registerKeyupHandler(keyhandler) {\n        this._keyupListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keyup', this._keyupListener);\n    }\n\n    _removeKeyHandler() {\n        if (this._keydownListener) {\n            window.removeEventListener('keydown', this._keydownListener);\n        }\n\n        if (this._keyupListener) {\n            window.removeEventListener('keyup', this._keyupListener);\n        }\n    }\n\n    registerClickHandler(clickHandler) {\n        this._clickListener = e => {\n            clickHandler(e);\n        };\n        window.addEventListener('mousedown', this._clickListener);\n    }\n\n    _removeClickHandler() {\n        if (this._clickListener) {\n            window.removeEventListener('mousedown', this._clickListener);\n        }\n    }\n\n    registerHoverHandler(hoverHandler) {\n        this._hoverListener = e => {\n            hoverHandler(e);\n        };\n        window.addEventListener('mousemove', this._hoverListener);\n    }\n\n    _removeHoverHandler() {\n        if (this._hoverListener) {\n            window.removeEventListener('mousemove', this._hoverListener);\n        }\n    }\n\n    registerScrollWheelHandler(registerScrollWheelHandler) {\n        this._scrollWheelListener = e => {\n            registerScrollWheelHandler(e);\n        }\n        window.addEventListener('wheel', this._scrollWheelListener);\n    }\n\n    _removeScrollWheelHandler() {\n        if (this._scrollWheelListener) {\n            window.removeEventListener('wheel', this._scrollWheelListener);\n        }\n    }\n\n    /**\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\n     */\n    _registerVisibilityChangeHandler() {\n        this._visibilityChangeHandler = () => {\n            if (document.visibilityState === 'visible') {\n                this.stage.root.core.setHasRenderUpdates(2);\n                this.stage.renderFrame();\n            }\n        }\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\n    }\n\n    _removeVisibilityChangeHandler() {\n        if (this._visibilityChangeHandler) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\n\nexport default class PlatformLoader {\n    static load(options) {\n        if (options.platform) {\n            return options.platform;\n        } else {\n            return WebPlatform;\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value == 'string';\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\n        } else {\n            return v1 === v2\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n}\n\n/**\n * Maintains the state of a WebGLRenderingContext.\n */\nclass WebGLState {\n\n    constructor(id, gl) {\n        this._id = id;\n        this._gl = gl;\n        this._program = undefined;\n        this._buffers = new Map();\n        this._framebuffers = new Map();\n        this._renderbuffers = new Map();\n\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\n        this._vertexAttribs = new Array(16);\n        this._nonDefaultFlags = new Set();\n        this._settings = new Map();\n        this._textures = new Array(8);\n        this._maxTexture = 0;\n        this._activeTexture = gl.TEXTURE0;\n        this._pixelStorei = new Array(5);\n    }\n\n    _getDefaultFlag(cap) {\n        return (cap === this._gl.DITHER);\n    }\n\n    setFlag(cap, v) {\n        const def = this._getDefaultFlag(cap);\n        if (v === def) {\n            return this._nonDefaultFlags.delete(cap);\n        } else {\n            if (!this._nonDefaultFlags.has(cap)) {\n                this._nonDefaultFlags.add(cap);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    setBuffer(target, buffer) {\n        const change = this._buffers.get(target) !== buffer;\n        this._buffers.set(target, buffer);\n\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\n            // When the array buffer is changed all attributes are cleared.\n            this._vertexAttribs = [];\n        }\n\n        return change;\n    }\n\n    setFramebuffer(target, buffer) {\n        const change = this._framebuffers.get(target) !== buffer;\n        this._framebuffers.set(target, buffer);\n        return change;\n    }\n\n    setRenderbuffer(target, buffer) {\n        const change = this._renderbuffers.get(target) !== buffer;\n        this._renderbuffers.set(target, buffer);\n        return change;\n    }\n\n    setProgram(program) {\n        const change = this._program !== program;\n        this._program = program;\n        return change\n    }\n\n    setSetting(func, v) {\n        const s = this._settings.get(func);\n        const change = !s || !Utils.equalValues(s, v);\n        this._settings.set(func, v);\n        return change\n    }\n\n    disableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va && va[5]) {\n            va[5] = false;\n            return true;\n        }\n        return false;\n    }\n\n    enableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va) {\n            if (!va[0]) {\n                va[0] = true;\n                return true;\n            }\n        } else {\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\n            return true;\n        }\n        return false;\n    }\n\n    vertexAttribPointer(index, props) {\n        let va = this._vertexAttribs[index];\n        let equal = false;\n        if (va) {\n            equal = va[0] === props[0] &&\n                va[1] === props[1] &&\n                va[2] === props[2] &&\n                va[3] === props[3] &&\n                va[4] === props[4];\n        }\n\n        if (equal) {\n            return false;\n        } else {\n            props[5] = va ? va[5] : false;\n            return true;\n        }\n    }\n\n    setActiveTexture(texture) {\n        const changed = this._activeTexture !== texture;\n        this._activeTexture = texture;\n        return changed;\n    }\n\n    bindTexture(target, texture) {\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\n        const current = this._textures[activeIndex];\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\n        if (current) {\n            if (current[targetIndex] === texture) {\n                return false;\n            }\n            current[targetIndex] = texture;\n            return true;\n        } else {\n            if (texture) {\n                this._textures[activeIndex] = [];\n                this._textures[activeIndex][targetIndex] = texture;\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n\n    setPixelStorei(pname, param) {\n        const i = WebGLState._getPixelStoreiIndex(pname);\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\n        this._pixelStorei[i] = param;\n        return change;\n    }\n\n    migrate(s) {\n        const t = this;\n\n        // Warning: migrate should call the original prototype methods directly.\n\n        this._migrateFlags(t, s);\n\n        // useProgram\n        if (s._program !== t._program) {\n            this._gl._useProgram(s._program);\n        }\n\n        this._migrateFramebuffers(t, s);\n        this._migrateRenderbuffers(t, s);\n\n        const buffersChanged = this._migrateBuffers(t, s);\n        this._migrateAttributes(t, s, buffersChanged);\n\n        this._migrateFlags(t, s);\n\n        this._migrateSettings(t, s);\n\n        this._migratePixelStorei(t, s);\n        \n        this._migrateTextures(t, s);\n        \n    }\n\n    _migratePixelStorei(t, s) {\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\n            }\n        }\n    }\n\n    _migrateTextures(t, s) {\n        const max = Math.max(t._maxTexture, s._maxTexture);\n\n        let activeTexture = t._activeTexture;\n\n        for (let i = 0; i < max; i++) {\n            const sTargets = s._textures[i];\n            const tTargets = t._textures[i];\n            const textureNumb = WebGLState._getTextureByIndex(i);\n\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\n            for (let j = 0, n = targetMax; j < n; j++) {\n                const target = WebGLState._getTextureTargetByIndex(j);\n                if (activeTexture !== textureNumb) {\n                    this._gl._activeTexture(textureNumb);\n                    activeTexture = textureNumb;\n                }\n\n                const texture = (sTargets && sTargets[j]) || null;\n                this._gl._bindTexture(target, texture);\n            }\n        }\n\n        if (s._activeTexture !== activeTexture) {\n            this._gl._activeTexture(s._activeTexture);\n        }\n    }\n\n    _migrateBuffers(t, s) {\n        s._buffers.forEach((framebuffer, target) => {\n            if (t._buffers.get(target) !== framebuffer) {\n                this._gl._bindBuffer(target, framebuffer);\n            }\n        });\n\n        t._buffers.forEach((buffer, target) => {\n            const b = s._buffers.get(target);\n            if (b === undefined) {\n                this._gl._bindBuffer(target, null);\n            }\n        });\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\n    }\n\n    _migrateFramebuffers(t, s) {\n        s._framebuffers.forEach((framebuffer, target) => {\n            if (t._framebuffers.get(target) !== framebuffer) {\n                this._gl._bindFramebuffer(target, framebuffer);\n            }\n        });\n\n        t._framebuffers.forEach((framebuffer, target) => {\n            const fb = s._framebuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindFramebuffer(target, null);\n            }\n        });\n    }\n\n    _migrateRenderbuffers(t, s) {\n        s._renderbuffers.forEach((renderbuffer, target) => {\n            if (t._renderbuffers.get(target) !== renderbuffer) {\n                this._gl._bindRenderbuffer(target, renderbuffer);\n            }\n        });\n\n        t._renderbuffers.forEach((renderbuffer, target) => {\n            const fb = s._renderbuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindRenderbuffer(target, null);\n            }\n        });\n    }\n\n    _migrateAttributes(t, s, buffersChanged) {\n\n        if (!buffersChanged) {\n            t._vertexAttribs.forEach((attrib, index) => {\n                if (!s._vertexAttribs[index]) {\n                    // We can't 'delete' a vertex attrib so we'll disable it.\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n\n            s._vertexAttribs.forEach((attrib, index) => {\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                } else {\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n        } else {\n            // When buffers are changed, previous attributes were reset automatically.\n            s._vertexAttribs.forEach((attrib, index) => {\n                if (attrib[0]) {\n                    // Do not set vertex attrib pointer when it was just the default value.\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\n                }\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                }\n            });\n        }\n    }\n\n    _migrateSettings(t, s) {\n        const defaults = this.constructor.getDefaultSettings();\n        t._settings.forEach((value, func) => {\n            const name = func.name || func.xname;\n            if (!s._settings.has(func)) {\n                let args = defaults.get(name);\n                if (Utils.isFunction(args)) {\n                    args = args(this._gl);\n                }\n                // We are actually setting the setting for optimization purposes.\n                s._settings.set(func, args);\n                func.apply(this._gl, args);\n            }\n        });\n        s._settings.forEach((value, func) => {\n            const tValue = t._settings.get(func);\n            if (!tValue || !Utils.equalValues(tValue, value)) {\n                func.apply(this._gl, value);\n            }\n        });\n    }\n\n    _migrateFlags(t, s) {\n        t._nonDefaultFlags.forEach(setting => {\n            if (!s._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._enable(setting);\n                } else {\n                    this._gl._disable(setting);\n                }\n            }\n        });\n        s._nonDefaultFlags.forEach(setting => {\n            if (!t._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._disable(setting);\n                } else {\n                    this._gl._enable(setting);\n                }\n            }\n        });\n    }\n\n    static getDefaultSettings() {\n        if (!this._defaultSettings) {\n            this._defaultSettings = new Map();\n            const d = this._defaultSettings;\n            const g = WebGLRenderingContext.prototype;\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"blendColor\", [0, 0, 0, 0]);\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\n            d.set(\"clearColor\", [0, 0, 0, 0]);\n            d.set(\"clearDepth\", [1]);\n            d.set(\"clearStencil\", [0]);\n            d.set(\"colorMask\", [true, true, true, true]);\n            d.set(\"cullFace\", [g.BACK]);\n            d.set(\"depthFunc\", [g.LESS]);\n            d.set(\"depthMask\", [true]);\n            d.set(\"depthRange\", [0, 1]);\n            d.set(\"frontFace\", [g.CCW]);\n            d.set(\"lineWidth\", [1]);\n            d.set(\"polygonOffset\", [0, 0]);\n            d.set(\"sampleCoverage\", [1, false]);\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"stencilMask\", [1]);\n            d.set(\"_stencilMaskSeparateFront\", [1]);\n            d.set(\"_stencilMaskSeparateBack\", [1]);\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"vertexAttrib1f\", []);\n            d.set(\"vertexAttrib1fv\", []);\n            d.set(\"vertexAttrib2f\", []);\n            d.set(\"vertexAttrib2fv\", []);\n            d.set(\"vertexAttrib3f\", []);\n            d.set(\"vertexAttrib3fv\", []);\n            d.set(\"vertexAttrib4f\", []);\n            d.set(\"vertexAttrib4fv\", []);\n        }\n        return this._defaultSettings\n    }\n\n    static _getTextureTargetIndex(target) {\n        switch(target) {\n            case 0x0DE1:\n                /* TEXTURE_2D */\n                return 0;\n            case 0x8513:\n                /* TEXTURE_CUBE_MAP */\n                return 1;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown texture target: ' + target);\n        }\n    }\n\n    static _getTextureTargetByIndex(index) {\n        if (!this._textureTargetIndices) {\n            this._textureTargetIndices = [0x0DE1, 0x8513];\n        }\n        return this._textureTargetIndices[index]\n    }\n\n    static _getTextureIndex(index) {\n        return index - 0x84C0 /* GL_TEXTURE0 */;\n    }\n\n    static _getTextureByIndex(index) {\n        return index + 0x84C0;\n    }\n\n    static _getPixelStoreiIndex(pname) {\n        switch(pname) {\n            case 0x0D05:\n                /* PACK_ALIGNMENT */\n                return 0;\n            case 0x0CF5:\n                /* UNPACK_ALIGNMENT */\n                return 1;\n            case 0x9240:\n                /* UNPACK_FLIP_Y_WEBGL */\n                return 2;\n            case 0x9241:\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\n                return 3;\n            case 0x9243:\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\n                return 4;\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n            case 0x9245:\n                /* UNPACK_FLIP_BLUE_RED */\n                return 5;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown pixelstorei: ' + pname);\n        }\n    }\n\n    static _getPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiIndices) {\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\n        }\n        return this._pixelStoreiIndices[index]\n    }\n\n    static _getDefaultPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiDefaults) {\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\n        }\n        return this._pixelStoreiDefaults[index]\n    }\n}\n\nclass WebGLStateManager {\n\n    _initStateManager(id = \"default\") {\n        this._states = {};\n        this._state = this._getState(id);\n    }\n\n    _getState(id) {\n        if (!this._states[id]) {\n            this._states[id] = new WebGLState(id, this);\n        }\n        return this._states[id];\n    }\n\n    switchState(id = \"default\") {\n        if (this._state._id !== id) {\n            const newState = this._getState(id);\n            this._state.migrate(newState);\n            this._state = newState;\n        }\n    }\n\n    $useProgram(program) {\n        if (this._state.setProgram(program))\n            this._useProgram(program);\n    }\n\n    $bindBuffer(target, fb) {\n        if (this._state.setBuffer(target, fb))\n            this._bindBuffer(target, fb);\n    }\n\n    $bindFramebuffer(target, fb) {\n        if (this._state.setFramebuffer(target, fb))\n            this._bindFramebuffer(target, fb);\n    }\n\n    $bindRenderbuffer(target, fb) {\n        if (this._state.setRenderbuffer(target, fb))\n            this._bindRenderbuffer(target, fb);\n    }\n\n    $enable(cap) {\n        if (this._state.setFlag(cap, true))\n            this._enable(cap);\n    }\n\n    $disable(cap) {\n        if (this._state.setFlag(cap, false))\n            this._disable(cap);\n    }\n\n    $viewport(x, y, w, h) {\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\n            this._viewport(x, y, w, h);\n    }\n\n    $scissor(x, y, w, h) {\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\n            this._scissor(x, y, w, h);\n    }\n\n    $disableVertexAttribArray(index) {\n        if (this._state.disableVertexAttribArray(index))\n            this._disableVertexAttribArray(index);\n    }\n\n    $enableVertexAttribArray(index) {\n        if (this._state.enableVertexAttribArray(index))\n            this._enableVertexAttribArray(index);\n    }\n\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n\n    $activeTexture(texture) {\n        if (this._state.setActiveTexture(texture))\n            this._activeTexture(texture);\n    }\n\n    $bindTexture(target, texture) {\n        if (this._state.bindTexture(target, texture))\n            this._bindTexture(target, texture);\n    }\n\n    $pixelStorei(pname, param) {\n        if (this._state.setPixelStorei(pname, param)) {\n            this._pixelStorei(pname, param);\n        }\n    }\n\n    $stencilFuncSeparate(face, func, ref, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilFuncSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilFuncSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilFuncSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [func, ref, mask]))\n            f.apply(this, [func, ref, mask]);\n    }\n\n    _stencilFuncSeparateFront(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\n    }\n\n    _stencilFuncSeparateBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\n    }\n\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\n    }\n\n    $stencilMaskSeparate(face, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilMaskSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilMaskSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilMaskSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [mask]))\n            f.apply(this, [mask]);\n    }\n\n    _stencilMaskSeparateFront(mask) {\n        this._stencilMaskSeparate(this.FRONT, mask);\n    }\n\n    _stencilMaskSeparateBack(mask) {\n        this._stencilMaskSeparate(this.BACK, mask);\n    }\n\n    _stencilMaskSeparateFrontAndBack(mask) {\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\n    }\n\n    $stencilOpSeparate(face, fail, zfail, zpass) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilOpSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilOpSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilOpSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\n            f.apply(this, [fail, zfail, zpass]);\n    }\n\n    _stencilOpSeparateFront(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\n    }\n\n    $blendColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\n            this._blendColor(red, green, blue, alpha);\n    }\n\n    $blendEquation(mode) {\n        if (this._state.setSetting(this._blendEquation, [mode]))\n            this._blendEquation(mode);\n    }\n\n    $blendEquationSeparate(modeRGB, modeAlpha) {\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\n            this._blendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    $blendFunc(sfactor, dfactor) {\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\n            this._blendFunc(sfactor, dfactor);\n    }\n\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n    }\n\n    $clearColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\n            this._clearColor(red, green, blue, alpha);\n    }\n\n    $clearDepth(depth) {\n        if (this._state.setSetting(this._clearDepth, [depth]))\n            this._clearDepth(depth);\n    }\n\n    $clearStencil(s) {\n        if (this._state.setSetting(this._clearStencil, [s]))\n            this._clearStencil(s);\n    }\n\n    $colorMask(red, green, blue, alpha) {\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\n            this._colorMask(red, green, blue, alpha);\n    }\n\n    $cullFace(mode) {\n        if (this._state.setSetting(this._cullFace, [mode]))\n            this._cullFace(mode);\n    }\n\n    $depthFunc(func) {\n        if (this._state.setSetting(this._depthFunc, [func]))\n            this._depthFunc(func);\n    }\n\n    $depthMask(flag) {\n        if (this._state.setSetting(this._depthMask, [flag]))\n            this._depthMask(flag);\n    }\n\n    $depthRange(zNear, zFar) {\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\n            this._depthRange(zNear, zFar);\n    }\n\n    $frontFace(mode) {\n        if (this._state.setSetting(this._frontFace, [mode]))\n            this._frontFace(mode);\n    }\n\n    $lineWidth(width) {\n        if (this._state.setSetting(this._lineWidth, [width]))\n            this._lineWidth(width);\n    }\n\n    $polygonOffset(factor, units) {\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\n            this._polygonOffset(factor, units);\n    }\n\n    $sampleCoverage(value, invert) {\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\n            this._sampleCoverage(value, invert);\n    }\n\n    $stencilFunc(func, ref, mask) {\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\n            this._stencilFunc(func, ref, mask);\n    }\n\n    $stencilMask(mask) {\n        if (this._state.setSetting(this._stencilMask, [mask]))\n            this._stencilMask(mask);\n    }\n\n    $stencilOp(fail, zfail, zpass) {\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\n            this._stencilOp(fail, zfail, zpass);\n    }\n\n    $vertexAttrib1f(indx, x) {\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\n            this._vertexAttrib1f(indx, x);\n    }\n\n    $vertexAttrib1fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\n            this._vertexAttrib1fv(indx, values);\n    }\n\n    $vertexAttrib2f(indx, x, y) {\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\n            this._vertexAttrib2f(indx, x, y);\n    }\n\n    $vertexAttrib2fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\n            this._vertexAttrib2fv(indx, values);\n    }\n\n    $vertexAttrib3f(indx, x, y, z) {\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\n            this._vertexAttrib3f(indx, x, y, z);\n    }\n\n    $vertexAttrib3fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\n            this._vertexAttrib3fv(indx, values);\n    }\n\n    $vertexAttrib4f(indx, x, y, z, w) {\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\n            this._vertexAttrib4f(indx, x, y, z, w);\n    }\n\n    $vertexAttrib4fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\n            this._vertexAttrib4fv(indx, values);\n    }\n\n    /**\n     * Sets up the rendering context for context sharing.\n     * @param {WebGLRenderingContext} gl\n     * @param {string} id\n     */\n    static enable(gl, id = \"default\") {\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\n        const WebGLRenderingContextProto = gl.__proto__;\n        names.forEach(name => {\n            if (name !== \"constructor\") {\n                const method = WebGLStateManager.prototype[name];\n                if (name.charAt(0) === \"$\") {\n                    name = name.substr(1);\n                }\n                if (gl[name] !== method) {\n                    if (gl[name]) {\n                        if (!gl[name].name) {\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\n                            gl[name].xname = name;\n                        }\n                        gl['_' + name] = gl[name];\n                    }\n                    gl[name] = method;\n                }\n            }\n        });\n\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\n\n        return gl;\n    }\n\n}\n\nexport default WebGLStateManager;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from \"./TextureSource.mjs\";\nimport Stage from './Stage.mjs';\n\nexport default class TextureManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        /**\n         * The currently used amount of texture memory.\n         * @type {number}\n         */\n        this._usedMemory = 0;\n\n        /**\n         * All uploaded texture sources.\n         * @type {TextureSource[]}\n         */\n        this._uploadedTextureSources = [];\n\n        /**\n         * The texture source lookup id to texture source hashmap.\n         * @type {Map<String, TextureSource>}\n         */\n        this.textureSourceHashmap = new Map();\n\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\n        }\n        \n        this.textureSourceHashmap.clear();\n        this._usedMemory = 0;\n    }\n\n    getReusableTextureSource(id) {\n        return this.textureSourceHashmap.get(id);\n    }\n\n    getTextureSource(func, id) {\n        // Check if texture source is already known.\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\n        if (!textureSource) {\n            // Create new texture source.\n            textureSource = new TextureSource(this, func);\n\n            if (id) {\n                textureSource.lookupId = id;\n                this.textureSourceHashmap.set(id, textureSource);\n            }\n        }\n\n        return textureSource;\n    }\n\n    uploadTextureSource(textureSource, options) {\n        if (textureSource.isLoaded()) return;\n\n        this._addMemoryUsage(textureSource.w * textureSource.h);\n\n        // Load texture.\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\n\n        textureSource._nativeTexture = nativeTexture;\n\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\n        nativeTexture.w = textureSource.w;\n        nativeTexture.h = textureSource.h;\n\n        nativeTexture.update = this.stage.frameCounter;\n\n        this._uploadedTextureSources.push(textureSource);\n        \n        this.addToLookupMap(textureSource);\n\n        // add VRAM tracking if using the webgl renderer\n        this._updateVramUsage(textureSource, 1);\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    _updateVramUsage(textureSource, sign) {\n        const nativeTexture = textureSource.nativeTexture;\n        var usage;\n\n        // do nothing if webgl isn't even supported\n        if (!Stage.isWebglSupported())\n            return;\n\n        // or if there is no native texture\n        if (!textureSource.isLoaded())\n            return;\n\n        // or, finally, if there is no bytes per pixel specified\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\n            return;\n\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\n\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\n    }\n\n    addToLookupMap(textureSource) {\n        const lookupId = textureSource.lookupId;\n        if (lookupId) {\n            if (!this.textureSourceHashmap.has(lookupId)) {\n                this.textureSourceHashmap.set(lookupId, textureSource);\n            }\n        }\n    }\n\n    gc() {\n        this.freeUnusedTextureSources();\n        this._cleanupLookupMap();\n    }\n    \n    freeUnusedTextureSources() {\n        let remainingTextureSources = [];\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            let ts = this._uploadedTextureSources[i];\n            if (ts.allowCleanup()) {\n                this._freeManagedTextureSource(ts);\n            } else {\n                remainingTextureSources.push(ts);\n            }\n        }\n\n        this._uploadedTextureSources = remainingTextureSources;\n\n        this._cleanupLookupMap();\n    }\n\n    _freeManagedTextureSource(textureSource) {\n        if (textureSource.isLoaded()) {\n            this._nativeFreeTextureSource(textureSource);\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\n\n            // add VRAM tracking if using the webgl renderer\n            this._updateVramUsage(textureSource, -1);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _cleanupLookupMap() {\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\n                this.textureSourceHashmap.delete(lookupId);\n            }\n        });\n    }\n\n    /**\n     * Externally free texture source.\n     * @param textureSource\n     */\n    freeTextureSource(textureSource) {\n        const index = this._uploadedTextureSources.indexOf(textureSource);\n        const managed = (index !== -1);\n\n        if (textureSource.isLoaded()) {\n            if (managed) {\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\n                this._uploadedTextureSources.splice(index, 1);\n            }\n            this._nativeFreeTextureSource(textureSource);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _nativeUploadTextureSource(textureSource, options) {\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\n    }\n\n    _nativeFreeTextureSource(textureSource) {\n        this.stage.renderer.freeTextureSource(textureSource);\n        textureSource.clearNativeTexture();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows throttling of loading texture sources, keeping the app responsive.\n */\nexport default class TextureThrottler {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.genericCancelCb = (textureSource) => {\n            this._remove(textureSource);\n        };\n\n        this._sources = [];\n        this._data = [];\n    }\n\n    destroy() {\n        this._sources = [];\n        this._data = [];\n        this.stage = null;\n\n        delete this._sources;\n        delete this._data;\n        delete this.stage;\n    }\n\n    processSome() {\n        if (this._sources.length) {\n            const start = Date.now();\n            do {\n                this._processItem();\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\n        }\n    }\n\n    _processItem() {\n        const source = this._sources.pop();\n        const data = this._data.pop();\n        if (source.isLoading()) {\n            source.processLoadedSource(data);\n        }\n    }\n\n    add(textureSource, data) {\n        this._sources.push(textureSource);\n        this._data.push(data);\n    }\n\n    _remove(textureSource) {\n        const index = this._sources.indexOf(textureSource);\n        if (index >= 0) {\n            this._sources.splice(index, 1);\n            this._data.splice(index, 1);\n        }\n    }\n\n}\n\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreContext {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.root = null;\n\n        this.updateTreeOrder = 0;\n\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\n\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\n        this.renderExec.init();\n\n        this._usedMemory = 0;\n        this._renderTexturePool = [];\n\n        this._renderTextureId = 1;\n\n        this._zSorts = [];\n\n        this.renderToTextureCount = 0;\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\n        this._usedMemory = 0;\n\n        this.stage = null;\n        this.root = null;\n\n        this.renderState = null;\n        this.renderExec = null;\n        this._renderTexturePool = null;\n        this._zSorts = null;\n\n        delete this.stage;\n        delete this.root;\n        delete this.renderState;\n        delete this.renderExec;\n        delete this._renderTexturePool;\n        delete this._zSorts;\n    }\n\n    hasRenderUpdates() {\n        return !!this.root._parent._hasRenderUpdates;\n    }\n\n    render() {\n        // Clear flag to identify if anything changes before the next frame.\n        this.root._parent._hasRenderUpdates = 0;\n\n        this._render();\n    }\n\n    update() {\n        this._update();\n\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\n        // (but not recursively to prevent infinite loops).\n        if (this.root._hasUpdates) {\n            this._update();\n        }\n\n        this._performForcedZSorts();\n    }\n\n    /**\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\n     */\n    _performForcedZSorts() {\n        const n = this._zSorts.length;\n        if (n) {\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\n                if (this._zSorts[i].zSort) {\n                    this._zSorts[i].sortZIndexedChildren();\n                }\n            }\n            this._zSorts = [];\n        }\n    }\n\n    _update() {\n        this.updateTreeOrder = 0;\n\n        this.root.update();\n    }\n\n    _render() {\n        const debugFrame = this.stage.getOption('debugFrame');\n        // Obtain a sequence of the quad operations.\n        this._fillRenderState();\n\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\n            this._readPixels();\n        }\n\n        // Now run them with the render executor.\n        this._performRender();\n\n        if (debugFrame) {\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\n        }\n\n        // Block OpenGL pipeline to prevent framebuffer flickering\n        // on certain devices\n        if (this.stage.getOption('readPixelsAfterDraw') &&\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\n        ) {\n            if (debugFrame) {\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\n            }\n            this._readPixels();\n        }\n\n        this.renderToTextureCount = 0;\n    }\n\n    _readPixels() {\n        const pixels = new Uint8Array(4);\n        const gl = this.stage.gl;\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n\n    _fillRenderState() {\n        this.renderState.reset();\n        this.root.render();\n        this.renderState.finish();\n    }\n\n    _performRender() {\n        this.renderExec.execute();\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    allocateRenderTexture(w, h) {\n        let prec = this.stage.getRenderPrecision();\n        let pw = Math.max(1, Math.round(w * prec));\n        let ph = Math.max(1, Math.round(h * prec));\n\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\n        const n = this._renderTexturePool.length;\n        for (let i = n - 1; i >= 0; i--) {\n            const texture = this._renderTexturePool[i];\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\n                texture.f = this.stage.frameCounter;\n                this._renderTexturePool.splice(i, 1);\n                return texture;\n            }\n        }\n\n        const texture = this._createRenderTexture(w, h, pw, ph);\n        texture.precision = prec;\n        return texture;\n    }\n\n    releaseRenderTexture(texture) {\n        this._renderTexturePool.push(texture);\n    }\n\n    freeUnusedRenderTextures(maxAge = 60) {\n        // Clean up all textures that are no longer used.\n        // This cache is short-lived because it is really just meant to supply running shaders that are\n        // updated during a number of frames.\n        let limit = this.stage.frameCounter - maxAge;\n\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\n            if (texture.f <= limit) {\n                this._freeRenderTexture(texture);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    _createRenderTexture(w, h, pw, ph) {\n        this._addMemoryUsage(pw * ph);\n\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\n        texture.id = this._renderTextureId++;\n        texture.f = this.stage.frameCounter;\n        texture.ow = w;\n        texture.oh = h;\n        texture.w = pw;\n        texture.h = ph;\n\n        return texture;\n    }\n\n    _freeRenderTexture(nativeTexture) {\n        this.stage.renderer.freeRenderTexture(nativeTexture);\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\n    }\n\n    forceZSort(elementCore) {\n        this._zSorts.push(elementCore);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class TransitionSettings {\n    constructor(stage) {\n        this.stage = stage;\n        this._timingFunction = 'ease';\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\n        this.delay = 0;\n        this.duration = 0.2;\n        this.merger = null;\n    }\n\n    get timingFunction() {\n        return this._timingFunction;\n    }\n\n    set timingFunction(v) {\n        this._timingFunction = v;\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get timingFunctionImpl() {\n        return this._timingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n}\n\nTransitionSettings.prototype.isTransitionSettings = true;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TransitionManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All transitions that are running and attached.\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\n         * @type {Set<Transition>}\n         */\n        this.active = new Set();\n\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                a.progress(dt);\n                if (!a.isRunning()) {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\n            }\n        }\n    }\n\n    createSettings(settings) {\n        const transitionSettings = new TransitionSettings();\n        Base.patchObject(transitionSettings, settings);\n        return transitionSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n\n    removeActive(transition) {\n        this.active.delete(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport TransitionSettings from \"./TransitionSettings.mjs\";\nimport Transition from \"./Transition.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class MultiSpline {\n\n    constructor() {\n        this._clear();\n    }\n\n    _clear() {\n        this._p = [];\n        this._pe = [];\n        this._idp = [];\n        this._f = [];\n        this._v = [];\n        this._lv = [];\n        this._sm = [];\n        this._s = [];\n        this._ve = [];\n        this._sme = [];\n        this._se = [];\n\n        this._length = 0;\n    }\n\n    parse(rgba, def) {\n        let i, n;\n        if (!Utils.isObjectLiteral(def)) {\n            def = {0: def}\n        }\n\n        let defaultSmoothness = 0.5;\n\n        let items = [];\n        for (let key in def) {\n            if (def.hasOwnProperty(key)) {\n                let obj = def[key];\n                if (!Utils.isObjectLiteral(obj)) {\n                    obj = {v: obj}\n                }\n\n                let p = parseFloat(key);\n\n                if (key === \"sm\") {\n                    defaultSmoothness = obj.v;\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\n                    obj.p = p;\n\n                    obj.f = Utils.isFunction(obj.v);\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\n\n                    items.push(obj);\n                }\n            }\n        }\n\n        // Sort by progress value.\n        items = items.sort(function(a, b) {return a.p - b.p});\n\n        n = items.length;\n\n        for (i = 0; i < n; i++) {\n            let last = (i === n - 1);\n            if (!items[i].hasOwnProperty('pe')) {\n                // Progress.\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\n            } else {\n                // Prevent multiple items at the same time.\n                const max = i < n - 1 ? items[i + 1].p : 1;\n                if (items[i].pe > max) {\n                    items[i].pe = max;\n                }\n            }\n            if (items[i].pe === items[i].p) {\n                items[i].idp = 0;\n            } else {\n                items[i].idp = 1 / (items[i].pe - items[i].p);\n            }\n        }\n\n        // Color merger: we need to split/combine RGBA components.\n\n        // Calculate bezier helper values.;\n        for (i = 0; i < n; i++) {\n            if (!items[i].hasOwnProperty('sm')) {\n                // Smoothness.;\n                items[i].sm = defaultSmoothness;\n            }\n            if (!items[i].hasOwnProperty('s')) {\n                // Slope.;\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\n                    // Horizontal slope at start and end.;\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                } else {\n                    const pi = items[i - 1];\n                    const ni = items[i + 1];\n                    if (pi.p === ni.p) {\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                    } else {\n                        if (rgba) {\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\n                            const d = 1 / (ni.p - pi.p);\n                            items[i].s = [\n                                d * (nc[0] - pc[0]),\n                                d * (nc[1] - pc[1]),\n                                d * (nc[2] - pc[2]),\n                                d * (nc[3] - pc[3])\n                            ];\n                        } else {\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < n - 1; i++) {\n            // Calculate value function.;\n            if (!items[i].f) {\n\n                let last = (i === n - 1);\n                if (!items[i].hasOwnProperty('ve')) {\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\n                }\n\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\n                    if (!items[i].hasOwnProperty('sme')) {\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\n                    }\n                    if (!items[i].hasOwnProperty('se')) {\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\n                    }\n\n                    // Generate spline.;\n                    if (rgba) {\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    } else {\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    }\n\n                    items[i].f = true;\n                }\n            }\n        }\n\n        if (this.length) {\n            this._clear();\n        }\n\n        for (i = 0, n = items.length; i < n; i++) {\n            this._add(items[i]);\n        }\n    }\n\n    _add(item) {\n        this._p.push(item.p || 0);\n        this._pe.push(item.pe || 0);\n        this._idp.push(item.idp || 0);\n        this._f.push(item.f || false);\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\n        this._lv.push(item.lv || 0);\n        this._sm.push(item.sm || 0);\n        this._s.push(item.s || 0);\n        this._ve.push(item.ve || 0);\n        this._sme.push(item.sme || 0);\n        this._se.push(item.se || 0);\n        this._length++;\n    }\n\n    _getItem(p) {\n        const n = this._length;\n        if (!n) {\n            return -1;\n        }\n\n        if (p < this._p[0]) {\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (this._p[i] <= p && p < this._pe[i]) {\n                return i;\n            }\n        }\n\n        return n - 1;\n    }\n\n    getValue(p) {\n        const i = this._getItem(p);\n        if (i === -1) {\n            return undefined;\n        } else {\n            if (this._f[i]) {\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\n                return this._v[i](o);\n            } else {\n                return this._v[i];\n            }\n        }\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1 *= dp;\n        s2 *= dp;\n\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\n        if (!helpers) {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return v2 * p + v1 * (1 - p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n                return MultiSpline.calculateSpline(helpers, p);\n            };\n        }\n    };\n\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1[0] *= dp;\n        s1[1] *= dp;\n        s1[2] *= dp;\n        s1[3] *= dp;\n        s2[0] *= dp;\n        s2[1] *= dp;\n        s2[2] *= dp;\n        s2[3] *= dp;\n\n        let cv1 = MultiSpline.getRgbaComponents(v1);\n        let cv2 = MultiSpline.getRgbaComponents(v2);\n\n        let helpers = [\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\n        ];\n\n        if (!helpers[0]) {\n            return function (p) {\n                // Linear.\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.mergeColors(v2, v1, p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.getArgbNumber([\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\n                ]);\n            };\n        }\n\n    };\n\n    /**\n     * Creates helpers to be used in the spline function.\n     * @param {number} v1\n     *   From value.\n     * @param {number} v2\n     *   To value.\n     * @param {number} o1\n     *   From smoothness (0 = linear, 1 = smooth).\n     * @param {number} s1\n     *   From slope (0 = horizontal, infinite = vertical).\n     * @param {number} i2\n     *   To smoothness.\n     * @param {number} s2\n     *   To slope.\n     * @returns {Number[]}\n     *   The helper values to be supplied to the spline function.\n     *   If the configuration is actually linear, null is returned.\n     */\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\n        if (!o1 && !i2) {\n            // Linear.\n            return null;\n        }\n\n        // Cubic bezier points.\n        // http://cubic-bezier.com/\n        let csx = o1;\n        let csy = v1 + s1 * o1;\n        let cex = 1 - i2;\n        let cey = v2 - s2 * i2;\n\n        let xa = 3 * csx - 3 * cex + 1;\n        let xb = -6 * csx + 3 * cex;\n        let xc = 3 * csx;\n\n        let ya = 3 * csy - 3 * cey + v2 - v1;\n        let yb = 3 * (cey + v1) - 6 * csy;\n        let yc = 3 * (csy - v1);\n        let yd = v1;\n\n        return [xa, xb, xc, ya, yb, yc, yd];\n    };\n\n    /**\n     * Calculates the intermediate spline value based on the specified helpers.\n     * @param {number[]} helpers\n     *   Obtained from getSplineHelpers.\n     * @param {number} p\n     * @return {number}\n     */\n    static calculateSpline(helpers, p) {\n        let xa = helpers[0];\n        let xb = helpers[1];\n        let xc = helpers[2];\n        let ya = helpers[3];\n        let yb = helpers[4];\n        let yc = helpers[5];\n        let yd = helpers[6];\n\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\n            // Linear.\n            return p;\n        }\n\n        // Find t for p.\n        let t = 0.5, cbx, dx;\n\n        for (let it = 0; it < 20; it++) {\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n\n            t += dx / cbxd;\n        }\n\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            if (dx < 0) {\n                maxT = t;\n            } else {\n                minT = t;\n            }\n        }\n\n        return t;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationActionSettings {\n\n    constructor(animationSettings) {\n\n        this.animationSettings = animationSettings;\n\n        /**\n         * The selector that selects the elements.\n         * @type {string}\n         */\n        this._selector = \"\";\n\n        /**\n         * The value items, ordered by progress offset.\n         * @type {MultiSpline}\n         * @private;\n         */\n        this._items = new MultiSpline();\n\n        /**\n         * The affected properties (paths).\n         * @private;\n         */\n        this._props = [];\n\n        /**\n         * Property setters, indexed according to props.\n         * @private;\n         */\n        this._propSetters = [];\n\n        this._resetValue = undefined;\n        this._hasResetValue = false;\n\n        this._hasColorProperty = undefined;\n    }\n\n    getResetValue() {\n        if (this._hasResetValue) {\n            return this._resetValue;\n        } else {\n            return this._items.getValue(0);\n        }\n    }\n\n    apply(element, p, factor) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this._items.getValue(p);\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        if (factor !== 1) {\n            // Stop factor.;\n            let sv = this.getResetValue();\n\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\n                if (this.hasColorProperty()) {\n                    v = StageUtils.mergeColors(v, sv, factor);\n                } else {\n                    v = StageUtils.mergeNumbers(v, sv, factor);\n                }\n            }\n        }\n\n        // Apply transformation to all components.;\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    getAnimatedElements(element) {\n        return element.select(this._selector);\n    }\n\n    reset(element) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this.getResetValue();\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        // Apply transformation to all components.\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    set selector(v) {\n        this._selector = v;\n    }\n\n    set t(v) {\n        this.selector = v;\n    }\n\n    get resetValue() {\n        return this._resetValue;\n    }\n    \n    set resetValue(v) {\n        this._resetValue = v;\n        this._hasResetValue = (v !== undefined);\n    }\n\n    set rv(v) {\n        this.resetValue = v;\n    }\n\n    set value(v) {\n        this._items.parse(this.hasColorProperty(), v);\n    }\n\n    set v(v) {\n        this.value = v;\n    }\n\n    set properties(v) {\n        if (!Array.isArray(v)) {\n            v = [v];\n        }\n\n        this._props = [];\n\n        v.forEach((prop) => {\n            this._props.push(prop);\n            this._propSetters.push(Element.getSetter(prop));\n        });\n    }\n\n    set property(v) {\n        this._hasColorProperty = undefined;\n        this.properties = v;\n    }\n\n    set p(v) {\n        this.properties = v;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    hasColorProperty() {\n        if (this._hasColorProperty === undefined) {\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\n        }\n        return this._hasColorProperty;\n    }\n}\n\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\n\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\nimport Element from \"../tree/Element.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class AnimationSettings {\n    constructor() {\n        /**\n         * @type {AnimationActionSettings[]}\n         */\n        this._actions = [];\n\n        this.delay = 0;\n        this.duration = 1;\n\n        this.repeat = 0;\n        this.repeatOffset = 0;\n        this.repeatDelay = 0;\n\n        this.autostop = false;\n\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\n        this._stopTimingFunction = 'ease';\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\n        this.stopDuration = 0;\n        this.stopDelay = 0;\n    }\n\n    get actions() {\n        return this._actions;\n    }\n\n    set actions(v) {\n        this._actions = [];\n        for (let i = 0, n = v.length; i < n; i++) {\n            const e = v[i];\n            if (!e.isAnimationActionSettings) {\n                const aas = new AnimationActionSettings(this);\n                aas.patch(e);\n                this._actions.push(aas);\n            } else {\n                this._actions.push(e);\n            }\n        }\n    }\n\n    /**\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\n     * @param {Element} element;\n     * @param {number} p;\n     * @param {number} factor;\n     */\n    apply(element, p, factor = 1) {\n        this._actions.forEach(function(action) {\n            action.apply(element, p, factor);\n        });\n    }\n\n    /**\n     * Resets the animation to the reset values.\n     * @param {Element} element;\n     */\n    reset(element) {\n        this._actions.forEach(function(action) {\n            action.reset(element);\n        });\n    }\n\n    get stopTimingFunction() {\n        return this._stopTimingFunction;\n    }\n\n    set stopTimingFunction(v) {\n        this._stopTimingFunction = v;\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get stopTimingFunctionImpl() {\n        return this._stopTimingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nAnimationSettings.STOP_METHODS = {\n    FADE: 'fade',\n    REVERSE: 'reverse',\n    FORWARD: 'forward',\n    IMMEDIATE: 'immediate',\n    ONETOTWO: 'onetotwo'\n};\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\n\nexport default class Animation extends EventEmitter {\n\n    constructor(manager, settings, element) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._state = Animation.STATES.IDLE;\n\n        this._p = 0;\n        this._delayLeft = 0;\n        this._repeatsLeft = 0;\n\n        this._stopDelayLeft = 0;\n        this._stopP = 0;\n    }\n\n    start() {\n        if (this._element && this._element.attached) {\n            this._p = 0;\n            this._delayLeft = this.settings.delay;\n            this._repeatsLeft = this.settings.repeat;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('start');\n            this.checkActive();\n        } else {\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\n        }\n    }\n\n    play() {\n        if (this._state === Animation.STATES.PAUSED) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.checkActive();\n            this.emit('resume');\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('stopContinue');\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\n            // Restart.;\n            this.start();\n        }\n    }\n\n    pause() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._state = Animation.STATES.PAUSED;\n            this.emit('pause');\n        }\n    }\n\n    replay() {\n        if (this._state == Animation.STATES.FINISHED) {\n            this.start();\n        } else {\n            this.play();\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n        this._stopDelayLeft = 0;\n    }\n\n    finish() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._delayLeft = 0;\n            this._p = 1;\n        } else if (this._state === Animation.STATES.STOPPING) {\n            this._stopDelayLeft = 0;\n            this._p = 0;\n        }\n    }\n\n    stop() {\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\n\n        this._stopDelayLeft = this.settings.stopDelay || 0;\n\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\n            // Stop upon next progress.;\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        } else {\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                this._stopP = 0;\n            }\n\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        }\n\n        this.checkActive();\n    }\n\n    stopNow() {\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\n            this._state = Animation.STATES.STOPPING;\n            this._p = 0;\n            this.emit('stop');\n            this.reset();\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        }\n    }\n\n    isPaused() {\n        return this._state === Animation.STATES.PAUSED;\n    }\n\n    isPlaying() {\n        return this._state === Animation.STATES.PLAYING;\n    }\n\n    isStopping() {\n        return this._state === Animation.STATES.STOPPING;\n    }\n\n    isFinished() {\n        return this._state === Animation.STATES.FINISHED;\n    }\n\n    checkActive() {\n        if (this.isActive()) {\n            this.manager.addActive(this);\n        }\n    }\n\n    isActive() {\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\n    }\n\n    progress(dt) {\n        if (!this._element) return;\n        this._progress(dt);\n        this.apply();\n    }\n\n    _progress(dt) {\n        if (this._state == Animation.STATES.STOPPING) {\n            this._stopProgress(dt);\n            return;\n        }\n\n        if (this._state != Animation.STATES.PLAYING) {\n            return;\n        }\n\n        if (this._delayLeft > 0) {\n            this._delayLeft -= dt;\n\n            if (this._delayLeft < 0) {\n                dt = -this._delayLeft;\n                this._delayLeft = 0;\n\n                this.emit('delayEnd');\n            } else {\n                return;\n            }\n        }\n\n        if (this.settings.duration === 0) {\n            this._p = 1;\n        } else if (this.settings.duration > 0) {\n            this._p += dt / this.settings.duration;\n        }\n        if (this._p >= 1) {\n            // Finished!;\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\n                if (this._repeatsLeft > 0) {\n                    this._repeatsLeft--;\n                }\n                this._p = this.settings.repeatOffset;\n                this.emit('progress', this._p);\n                \n                if (this.settings.repeatDelay) {\n                    this._delayLeft = this.settings.repeatDelay;\n                }\n\n                this.emit('repeat', this._repeatsLeft);\n            } else {\n                this._p = 1;\n                this.emit('progress', this._p);\n                \n                this._state = Animation.STATES.FINISHED;\n                this.emit('finish');\n                if (this.settings.autostop) {\n                    this.stop();\n                }\n            }\n        } else {\n            this.emit('progress', this._p);\n        }\n    }\n    \n    _stopProgress(dt) {\n        let duration = this._getStopDuration();\n\n        if (this._stopDelayLeft > 0) {\n            this._stopDelayLeft -= dt;\n\n            if (this._stopDelayLeft < 0) {\n                dt = -this._stopDelayLeft;\n                this._stopDelayLeft = 0;\n\n                this.emit('stopDelayEnd');\n            } else {\n                return;\n            }\n        }\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            if (duration === 0) {\n                this._p = 0;\n            } else if (duration > 0) {\n                this._p -= dt / duration;\n            }\n\n            if (this._p <= 0) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\n            this._progressStopTransition(dt);\n            if (this._stopP >= 1) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\n            if (this._p < 2) {\n                if (duration === 0) {\n                    this._p = 2;\n                } else if (duration > 0) {\n                    if (this._p < 1) {\n                        this._p += dt / this.settings.duration;\n                    } else {\n                        this._p += dt / duration;\n                    }\n                }\n                if (this._p >= 2) {\n                    this._p = 2;\n                    this._state = Animation.STATES.STOPPED;\n                    this.emit('stopFinish');\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n            if (this._p < 1) {\n                if (this.settings.duration == 0) {\n                    this._p = 1;\n                } else {\n                    this._p += dt / this.settings.duration;\n                }\n                if (this._p >= 1) {\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n                        this._p = 1;\n                        this._state = Animation.STATES.STOPPED;\n                        this.emit('stopFinish');\n                    } else {\n                        if (this._repeatsLeft > 0) {\n                            this._repeatsLeft--;\n                            this._p = 0;\n                            this.emit('repeat', this._repeatsLeft);\n                        } else {\n                            this._p = 1;\n                            this._state = Animation.STATES.STOPPED;\n                            this.emit('stopFinish');\n                        }\n                    }\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        }\n        \n    }\n    \n    _progressStopTransition(dt) {\n        if (this._stopP < 1) {\n            if (this._stopDelayLeft > 0) {\n                this._stopDelayLeft -= dt;\n\n                if (this._stopDelayLeft < 0) {\n                    dt = -this._stopDelayLeft;\n                    this._stopDelayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n            \n            const duration = this._getStopDuration();\n\n            if (duration == 0) {\n                this._stopP = 1;\n            } else {\n                this._stopP += dt / duration;\n            }\n            if (this._stopP >= 1) {\n                // Finished!;\n                this._stopP = 1;\n            }\n        }\n    }\n\n    _getStopDuration() {\n        return this.settings.stopDuration || this.settings.duration;\n    }\n\n    apply() {\n        if (this._state === Animation.STATES.STOPPED) {\n            this.reset();\n        } else {\n            let factor = 1;\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\n            }\n            this._settings.apply(this._element, this._p, factor);\n        }\n    }\n\n    reset() {\n        this._settings.reset(this._element);\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get frame() {\n        return Math.round(this._p * this._settings.duration * 60);\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n}\n\nAnimation.STATES = {\n    IDLE: 0,\n    PLAYING: 1,\n    STOPPING: 2,\n    STOPPED: 3,\n    FINISHED: 4,\n    PAUSED: 5\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All running animations on attached subjects.\n         * @type {Set<Animation>}\n         */\n        this.active = new Set();\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                if (a.isActive()) {\n                    a.progress(dt);\n                } else {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => t.isActive()));\n            }\n        }\n    }\n\n    createAnimation(element, settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            // Convert plain object to proper settings object.\n            settings = this.createSettings(settings);\n        }\n\n        return new Animation(\n            this,\n            settings,\n            element\n        );\n    }\n\n    createSettings(settings) {\n        const animationSettings = new AnimationSettings();\n        Base.patchObject(animationSettings, settings);\n        return animationSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\nimport Animation from \"./Animation.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class RectangleTexture extends Texture {\n\n    _getLookupId() {\n        return '__whitepix';\n    }\n\n    _getSourceLoader() {\n        return function(cb) {\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\n        }\n    }\n\n    isAutosizeTexture() {\n        return false;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Application render tree.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Utils from \"./Utils.mjs\";\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Stage extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n        this._setOptions(options);\n\n        this._usedMemory = 0;\n        this._lastGcFrame = 0;\n\n        // attempt to track VRAM usage more accurately by accounting for different color channels\n        this._usedVramAlpha = 0;\n        this._usedVramNonAlpha = 0;\n\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\n        this.platform = new platformType();\n\n        if (this.platform.init) {\n            this.platform.init(this);\n        }\n\n        this.gl = null;\n        this.c2d = null;\n\n        const context = this.getOption('context');\n        if (context) {\n            if (context.useProgram) {\n                this.gl = context;\n            } else {\n                this.c2d = context;\n            }\n        } else {\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\n            } else {\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\n            }\n        }\n\n        if (this.gl) {\n            // Wrap in WebGLStateManager.\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\n            // Context switching is necessary when reusing the same context for Three.js.\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\n            //  when manually passing over a canvas or context in the options.\n            WebGLStateManager.enable(this.gl, \"lightning\")\n        }\n\n        this._mode = this.gl ? 0 : 1;\n\n        // Override width and height.\n        if (this.getCanvas()) {\n            if (this.getOption('devicePixelRatio') !== 1) {\n                const ratio = this.getOption('devicePixelRatio');\n                // set correct display sie\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\n            }\n\n            // set display buffer size\n            this._options.w = this.getCanvas().width;\n            this._options.h = this.getCanvas().height;\n        }\n\n        if (this._mode === 0) {\n            if (Utils.isSpark) {\n                this._renderer = new SparkRenderer(this);\n            } else {\n                this._renderer = new WebGLRenderer(this);\n            }\n        } else {\n            this._renderer = new C2dRenderer(this);\n        }\n\n        this.setClearColor(this.getOption('clearColor'));\n\n        this.frameCounter = 0;\n\n        this.transitions = new TransitionManager(this);\n        this.animations = new AnimationManager(this);\n\n        this.textureManager = new TextureManager(this);\n        this.textureThrottler = new TextureThrottler(this);\n\n        this.startTime = 0;\n        this.currentTime = 0;\n        this.dt = 0;\n\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\n        this.rectangleTexture = new RectangleTexture(this);\n        this.rectangleTexture.load();\n\n        // Never clean up because we use it all the time.\n        this.rectangleTexture.source.permanent = true;\n\n        this.ctx = new CoreContext(this);\n\n        this._updateSourceTextures = new Set();\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    static isWebglSupported() {\n        if (Utils.isNode) {\n            return true;\n        }\n\n        try {\n            return !!window.WebGLRenderingContext;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns the rendering mode.\n     * @returns {number}\n     *  0: WebGL\n     *  1: Canvas2d\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    isWebgl() {\n        return this.mode === 0;\n    }\n\n    isC2d() {\n        return this.mode === 1;\n    }\n\n    getOption(name) {\n        return this._options[name];\n    }\n\n    _setOptions(o) {\n        this._options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this._options[name] = def;\n            } else {\n                this._options[name] = value;\n            }\n        }\n\n        opt('canvas', null);\n        opt('context', null);\n        opt('w', 1920);\n        opt('h', 1080);\n        opt('srcBasePath', null);\n        opt('memoryPressure', 24e6);\n        opt('bufferMemory', 2e6);\n        opt('textRenderIssueMargin', 0);\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\n        opt('clearColor', [0, 0, 0, 0]);\n        opt('defaultFontFace', 'sans-serif');\n        opt('fixedDt', 0);\n        opt('useImageWorker', true);\n        opt('autostart', true);\n        opt('precision', 1);\n        opt('canvas2d', false);\n        opt('platform', null);\n        opt('readPixelsBeforeDraw', false);\n        opt('devicePixelRatio', 1)       \n        opt('readPixelsAfterDraw', false);\n        opt('readPixelsAfterDrawThreshold', 0);\n        opt('debugFrame', false);\n        opt('forceTxCanvasSource', false);\n        opt('pauseRafLoopOnIdle', false);\n        opt('RTL', false);\n\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\n            this._options['precision'] *= o['devicePixelRatio']\n            this._options['w'] *= o['devicePixelRatio']\n            this._options['h'] *= o['devicePixelRatio']\n        }\n    }\n\n    setApplication(app) {\n        this.application = app;\n    }\n\n    init() {\n\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\n            console.log('[Lightning] Using image worker!');\n        }\n\n        if (this.application.getOption('debug') && this.c2d) {\n            console.log('[Lightning] Using canvas2d renderer');\n        }\n\n        this.application.setAsRoot();\n        if (this.getOption('autostart')) {\n            this.platform.startLoop();\n        }\n    }\n\n    destroy() {\n        this.platform.stopLoop();\n        this.platform.destroy();\n        this.ctx.destroy();\n        this.textureManager.destroy();\n        this._renderer.destroy();\n\n        // clear last rendered frame\n        if (this.gl) {\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        } else if (this.c2d) {\n            this.c2d.clearRect(\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\n            );\n        }\n\n        this.gl = null;\n        this.c2d = null;\n        this.ctx = null;\n        this._options = null;\n        this.platform = null;\n        this.textureManager = null;\n        this._renderer = null;\n\n        delete this.gl;\n        delete this.c2d;\n        delete this.ctx;\n        delete this._options;\n        delete this.platform;\n        delete this.textureManager;\n        delete this._renderer;\n    }\n\n    stop() {\n        this.platform.stopLoop();\n    }\n\n    resume() {\n        this.platform.startLoop();\n    }\n\n    get root() {\n        return this.application;\n    }\n\n    getCanvas() {\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\n    }\n\n    getRenderPrecision() {\n        return this._options.precision;\n    }\n\n    /**\n     * Marks a texture for updating it's source upon the next drawFrame.\n     * @param texture\n     */\n    addUpdateSourceTexture(texture) {\n        if (this._updatingFrame) {\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\n            texture._performUpdateSource();\n        } else {\n            this._updateSourceTextures.add(texture);\n        }\n    }\n\n    removeUpdateSourceTexture(texture) {\n        if (this._updateSourceTextures) {\n            this._updateSourceTextures.delete(texture);\n        }\n    }\n\n    hasUpdateSourceTexture(texture) {\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\n    }\n\n\n    _performUpdateSource() {\n        if (this._updateSourceTextures.size) {\n            this._updateSourceTextures.forEach(texture => {\n                texture._performUpdateSource();\n            });\n            this._updateSourceTextures = new Set();\n        }\n    }\n\n    _calculateDt() {\n        this.startTime = this.currentTime;\n        this.currentTime = this.platform.getHrTime();\n\n        if (this._options.fixedDt) {\n            this.dt = this._options.fixedDt;\n        } else {\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\n        }\n    }\n\n    updateFrame() {\n        this._calculateDt();\n        this.emit('frameStart');\n        this._performUpdateSource();\n        this.emit('update');\n    }\n\n    idleFrame() {\n        this.textureThrottler.processSome();\n        this.emit('frameEnd');\n        this.frameCounter++;\n    }\n\n    renderFrame() {\n        const changes = this.ctx.hasRenderUpdates();\n\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\n        // during the current frame already.\n        this.textureThrottler.processSome();\n\n        if (changes) {\n            this._updatingFrame = true;\n            this.ctx.update();\n            this.ctx.render();\n            this._updatingFrame = false;\n        }\n\n        this.platform.nextFrame(changes);\n\n        this.emit('frameEnd');\n\n        this.frameCounter++;\n    }\n\n    isUpdatingFrame() {\n        return this._updatingFrame;\n    }\n\n    drawFrame() {\n        // Maintain original functionality of `drawFrame()` while retaining the\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\n        // The full functionality of this method is relied directly by our own unit tests and\n        // the unit tests of third party users\n        this.updateFrame();\n        this.renderFrame();\n    }\n\n    forceRenderUpdate() {\n        // Enforce re-rendering.\n        if (this.root) {\n            this.root.core._parent.setHasRenderUpdates(1);\n        }\n    }\n\n    setClearColor(clearColor) {\n        this.forceRenderUpdate();\n        if (clearColor === null) {\n            // Do not clear.\n            this._clearColor = null;\n        } else if (Array.isArray(clearColor)) {\n            this._clearColor = clearColor;\n        } else {\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\n        }\n    }\n\n    getClearColor() {\n        return this._clearColor;\n    }\n\n    createElement(settings) {\n        if (settings) {\n            return this.element(settings);\n        } else {\n            return new Element(this);\n        }\n    }\n\n    createShader(settings) {\n        return Shader.create(this, settings);\n    }\n\n    element(settings) {\n        if (settings.isElement) return settings;\n\n        let element;\n        if (settings.type) {\n            element = new settings.type(this);\n        } else {\n            element = new Element(this);\n        }\n\n        element.patch(settings);\n\n        return element;\n    }\n\n    c(settings) {\n        return this.element(settings);\n    }\n\n    get w() {\n        return this._options.w;\n    }\n\n    get h() {\n        return this._options.h;\n    }\n\n    get coordsWidth() {\n        return this.w / this._options.precision;\n    }\n\n    get coordsHeight() {\n        return this.h / this._options.precision;\n    }\n\n    addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        if (this._lastGcFrame !== this.frameCounter) {\n            if (this._usedMemory > this.getOption('memoryPressure')) {\n                this.gc(false);\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\n                    // Too few released. Aggressive cleanup.\n                    this.gc(true);\n                }\n            }\n        }\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    addVramUsage(delta, alpha) {\n        if (alpha) {\n            this._usedVramAlpha += delta;\n        }\n        else {\n            this._usedVramNonAlpha += delta;\n        }\n    }\n\n    get usedVramAlpha() {\n        return this._usedVramAlpha;\n    }\n\n    get usedVramNonAlpha() {\n        return this._usedVramNonAlpha;\n    }\n\n    get usedVram() {\n        return this._usedVramAlpha + this._usedVramNonAlpha;\n    }\n\n    gc(aggressive) {\n        if (this._lastGcFrame !== this.frameCounter) {\n            this._lastGcFrame = this.frameCounter;\n            const memoryUsageBefore = this._usedMemory;\n            this.gcTextureMemory(aggressive);\n            this.gcRenderTextureMemory(aggressive);\n            this.renderer.gc(aggressive);\n\n            if (this.application.getOption('debug')) {\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\n            }\n        }\n    }\n\n    gcTextureMemory(aggressive = false) {\n        if (aggressive && this.ctx.root.visible) {\n            // Make sure that ALL textures are cleaned;\n            this.ctx.root.visible = false;\n            this.textureManager.gc();\n            this.ctx.root.visible = true;\n        } else {\n            this.textureManager.gc();\n        }\n    }\n\n    gcRenderTextureMemory(aggressive = false) {\n        if (aggressive && this.root.visible) {\n            // Make sure that ALL render textures are cleaned;\n            this.root.visible = false;\n            this.ctx.freeUnusedRenderTextures(0);\n            this.root.visible = true;\n        } else {\n            this.ctx.freeUnusedRenderTextures(0);\n        }\n    }\n\n    getDrawingCanvas() {\n        return this.platform.getDrawingCanvas();\n    }\n\n    update() {\n        this.ctx.update()\n    }\n\n    addServiceProvider(serviceprovider) {\n        if (Utils.isSpark) {\n            this.platform.addServiceProvider(serviceprovider);\n        }\n    }\n\n    getChildrenByPosition(x, y) {\n        const children = [];\n        this.root.core.update();\n        this.root.core.collectAtCoord(x, y, children);\n\n        return children;\n    }\n}\n\nimport Element from \"./Element.mjs\";\nimport StageUtils from \"./StageUtils.mjs\";\nimport TextureManager from \"./TextureManager.mjs\";\nimport TextureThrottler from \"./TextureThrottler.mjs\";\nimport CoreContext from \"./core/CoreContext.mjs\";\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"./Component.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class Application extends Component {\n\n    constructor(options = {}, properties) {\n        // Save options temporarily to avoid having to pass it through the constructor.\n        Application._temp_options = options;\n\n        // Booting flag is used to postpone updateFocusSettings;\n        Application.booting = true;\n        const stage = new Stage(options.stage);\n        super(stage, properties);\n        Application.booting = false;\n\n        this.__updateFocusCounter = 0;\n        this.__keypressTimers = new Map();\n        this.__hoveredChild = null;\n\n        // We must construct while the application is not yet attached.\n        // That's why we 'init' the stage later (which actually emits the attach event).\n        this.stage.init();\n\n        // Initially, the focus settings are updated after both the stage and application are constructed.\n        this.updateFocusSettings();\n\n        this.__keymap = this.getOption('keys');\n\n        if (this.__keymap) {\n            this.stage.platform.registerKeydownHandler((e) => {\n                this._receiveKeydown(e);\n            });\n\n            this.stage.platform.registerKeyupHandler((e) => {\n                this._receiveKeyup(e);\n            });\n        }\n\n        if (this.getOption(\"enablePointer\")) {\n            this.stage.platform.registerClickHandler((e) => {\n                this._receiveClick(e);\n            });\n\n            this.stage.platform.registerHoverHandler((e) => {\n                this._receiveHover(e);\n            });\n\n            this.stage.platform.registerScrollWheelHandler((e) => {\n                this._recieveScrollWheel(e);\n            });\n\n            this.cursor = 'default';\n        }\n    }\n\n    getOption(name) {\n        return this.__options[name];\n    }\n\n    _setOptions(o) {\n        this.__options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this.__options[name] = def;\n            } else {\n                this.__options[name] = value;\n            }\n        }\n\n        opt('debug', false);\n        opt('keys', {\n            38: \"Up\",\n            40: \"Down\",\n            37: \"Left\",\n            39: \"Right\",\n            13: \"Enter\",\n            8: \"Back\",\n            27: \"Exit\"\n        });\n        opt('enablePointer', false);\n    }\n\n    __construct() {\n        this.stage.setApplication(this);\n\n        this._setOptions(Application._temp_options);\n        delete Application._temp_options;\n\n        super.__construct();\n    }\n\n    __init() {\n        super.__init();\n        this.__updateFocus();\n    }\n\n    updateFocusPath() {\n        this.__updateFocus();\n    }\n\n    __updateFocus() {\n        const notOverridden = this.__updateFocusRec();\n\n        if (!Application.booting && notOverridden) {\n            this.updateFocusSettings();\n        }\n    }\n\n    __updateFocusRec() {\n        const updateFocusId = ++this.__updateFocusCounter;\n        this.__updateFocusId = updateFocusId;\n\n        const newFocusPath = this.__getFocusPath();\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\n\n        if (!prevFocusedComponent) {\n            // Focus events.\n            this._focusPath = [];\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\n                this._focusPath.push(newFocusPath[i]);\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                if (focusOverridden) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\n            let index;\n            for (index = 0; index < m; index++) {\n                if (this._focusPath[index] !== newFocusPath[index]) {\n                    break;\n                }\n            }\n\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\n\n                if (this.getOption('debug')) {\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\n                }\n\n                // Unfocus events.\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\n                    const unfocusedElement = this._focusPath.pop();\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus events.\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\n                    this._focusPath.push(newFocusPath[i]);\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus changed events.\n                for (let i = 0; i < index; i++) {\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    updateFocusSettings() {\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\n\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\n        // focus directly (such as the application background).\n        const focusSettings = {};\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\n                this._focusPath[i]._setFocusSettings(focusSettings);\n            }\n        }\n\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\n            }\n        }\n\n        this.__prevFocusSettings = focusSettings;\n    }\n\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\n        // Override to handle focus-based settings.\n    }\n\n    __getFocusPath() {\n        const path = [this];\n        let current = this;\n        do {\n            const nextFocus = current._getFocused();\n            if (!nextFocus || (nextFocus === current)) {\n                // Found!;\n                break;\n            }\n\n\n            let ptr = nextFocus.cparent;\n            if (ptr === current) {\n                path.push(nextFocus);\n            } else {\n                // Not an immediate child: include full path to descendant.\n                const newParts = [nextFocus];\n                do {\n                    if (!ptr) {\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\n                    }\n                    newParts.push(ptr);\n                    ptr = ptr.cparent;\n                } while (ptr !== current);\n\n                // Add them reversed.\n                for (let i = 0, n = newParts.length; i < n; i++) {\n                    path.push(newParts[n - i - 1]);\n                }\n            }\n\n            current = nextFocus;\n        } while (true);\n\n        return path;\n    }\n\n    get focusPath() {\n        return this._focusPath;\n    }\n\n    /**\n     * Injects an event in the state machines, top-down from application to focused component.\n     */\n    focusTopDownEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = 0; i < n; i++) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Injects an event in the state machines, bottom-up from focused component to application.\n     */\n    focusBottomUpEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = n - 1; i >= 0; i--) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _receiveKeydown(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n        const path = this.focusPath;\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                const hasTimer = this.__keypressTimers.has(keys[i]);\n                // prevent event from getting fired when the timeout is still active\n                if (path[path.length - 1].longpress && hasTimer) {\n                    return;\n                }\n\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        const consumer = path[path.length - 1];\n\n        if (keys && consumer.longpress) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                this._startLongpressTimer(keys[i], consumer);\n            }\n        }\n    }\n\n    /**\n     * Keyup listener\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\n     *\n     * @param e\n     * @private\n     */\n    _receiveKeyup(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (this.__keypressTimers.has(keys[i])) {\n                    // keyup has fired before end of timeout so we clear it\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\n                    // delete so we can register it again\n                    this.__keypressTimers.delete(keys[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\n     * before the timer goes off.\n     *\n     * If key is not release (keyup) the longpress handler will be fired.\n     * Configuration can be via the Components template:\n     *\n     * static _template() {\n     *     return {\n     *         w:100, h:100,\n     *         longpress:{up:700, down:500}\n     *     }\n     * }     *\n     * // this will get called when up has been pressed for 700ms\n     * _handleUpLong() {\n     *\n     * }\n     *\n     * @param key\n     * @param element\n     * @private\n     */\n    _startLongpressTimer(key, element) {\n        const config = element.longpress;\n        const lookup = key.toLowerCase();\n\n        if (config[lookup]) {\n            const timeout = config[lookup];\n            if (!Utils.isNumber(timeout)) {\n                element._throwError(\"config value for longpress must be a number\");\n            } else {\n                this.__keypressTimers.set(key, setTimeout(() => {\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\n                    }\n\n                    this.__keypressTimers.delete(key);\n                }, timeout || 500 /* prevent 0ms */));\n            }\n        }\n        return;\n    }\n\n    _recieveScrollWheel(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\n            }\n        }\n    }\n\n    fireTopDownScrollWheelHandler(event, obj) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children).reverse();\n        let n = affected.length;\n\n        while (n--) {\n            const child = affected[n];\n            if (child && child[event]) {\n                child._captureScroll(obj);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    fireBottomUpScrollWheelHandler(event, obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[event]) {\n                child._handleScroll(obj);\n                return true;\n            }\n            child = child.parent;\n        }\n        return false;\n    }\n\n    _receiveClick(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpClickHandler(obj);\n        }\n    }\n\n    fireBottomUpClickHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[\"_handleClick\"]) {\n                const { px, py } = child.core._worldContext;\n                const cx = px * precision;\n                const cy = py * precision;\n\n                const localCoords = {\n                    x: clientX - cx,\n                    y: clientY - cy\n                }\n\n                const returnValue = child._handleClick(target, localCoords);\n                if (returnValue !== false) {\n                    break;\n                }\n            }\n            child = child.parent;\n        }\n    }\n\n    _receiveHover(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpHoverHandler(obj);\n        }\n    }\n\n    fireBottomUpHoverHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n\n        // Only fire handlers when pointer target changes\n        if (target !== this.__hoveredChild) {\n\n            let hoveredBranch = new Set();\n            let newHoveredBranch = new Set();\n\n            if (target) {\n                newHoveredBranch = new Set(target.getAncestors());\n            }\n\n            if (this.__hoveredChild) {\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\n                    const c = Component.getComponent(elem);\n                    if (c[\"_handleUnhover\"]) {\n                        c._handleUnhover(elem);\n                    }\n                    if (elem.parent && elem.parent.cursor) {\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\n                    }\n                }\n            }\n\n            this.__hoveredChild = target;\n\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\n            for (const elem of diffBranch) {\n                const c = Component.getComponent(elem);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(elem);\n                }\n            }\n\n            // New element hover cursor\n            const lastElement = diffBranch[0];\n            if (lastElement && lastElement.cursor) {\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\n            }\n\n            // Rerun _handleHover for target element in case it's been hovered\n            // back from its child\n            if (diffBranch.length === 0 && target) {\n                const c = Component.getComponent(target);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(target);\n                }\n            }\n        }\n    }\n\n    _getTargetChild(clientX, clientY) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children);\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\n\n        hoverableChildren.sort((a, b) => {\n            // Sort by zIndex and then id\n            if (a.zIndex > b.zIndex) {\n                return 1;\n            } else if (a.zIndex < b.zIndex) {\n                return -1;\n            } else {\n                return a.id > b.id ? 1 : -1;\n            }\n        });\n\n        if (hoverableChildren.length) {\n            // Assume target has highest zIndex (id when zIndex equal)\n            return hoverableChildren.slice(-1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    _findChildren(bucket, children) {\n        let n = children.length;\n        while (n--) {\n            const child = children[n];\n            // only add active children\n            if (child.__active && child.collision) {\n                if (child.collision === true) {\n                    bucket.push(child);\n                }\n                if (child.hasChildren()) {\n                    this._findChildren(bucket, child.children);\n                }\n            }\n        }\n        return bucket;\n    }\n\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\n        let n = affectedChildren.length;\n        const candidates = [];\n\n        // loop through affected children\n        // and perform collision detection\n        while (n--) {\n            const child = affectedChildren[n];\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n            const ctx = child.core._worldContext;\n\n            const cx = ctx.px * precision;\n            const cy = ctx.py * precision;\n            const cw = child.finalW * ctx.ta * precision;\n            const ch = child.finalH * ctx.td * precision;\n\n            if (cx > this.stage.w || cy > this.stage.h) {\n                continue;\n            }\n\n            if (child.parent.core._scissor) {\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\n                    continue\n            }\n\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\n                candidates.push(child);\n            }\n        }\n        return candidates;\n    }\n\n    _testCollision(px, py, cx, cy, cw, ch) {\n        if (px >= cx &&\n            px <= cx + cw &&\n            py >= cy &&\n            py <= cy + ch) {\n            return true;\n        }\n        return false;\n    }\n\n    destroy() {\n        if (!this._destroyed) {\n            this._destroy();\n            this.stage.destroy();\n            this._destroyed = true;\n        }\n    }\n\n    _destroy() {\n        // This forces the _detach, _disabled and _active events to be called.\n        this.stage.setApplication(undefined);\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n\n        if (this.__keypressTimers.size) {\n            for (const timer of this.__keypressTimers.values()) {\n                clearTimeout(timer);\n            }\n\n            this.__keypressTimers.clear();\n        }\n    }\n\n    getCanvas() {\n        return this.stage.getCanvas();\n    }\n\n}\n\nimport Stage from \"../tree/Stage.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticCanvasTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._factory = undefined;\n        this._lookupId = undefined;\n    }\n\n    set content({factory, lookupId = undefined}) {\n        this._factory = factory;\n        this._lookupId = lookupId;\n        this._changed();\n    }\n\n    _getIsValid() {\n        return !!this._factory;\n    }\n\n    _getLookupId() {\n        return this._lookupId;\n    }\n\n    _getSourceLoader() {\n        const f = this._factory;\n        return (cb) => {\n            return f((err, canvas) => {\n                if (err) {\n                    return cb(err);\n                }\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\n            }, this.stage);\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\n\nexport default class Tools {\n\n    static getCanvasTexture(canvasFactory, lookupId) {\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\n    }\n\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\n            } else {\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\n            }\n        };\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (fill === undefined) fill = true;\n        if (strokeWidth === undefined) strokeWidth = 0;\n\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + strokeWidth + 2;\n        canvas.height = h + strokeWidth + 2;\n\n        ctx.beginPath();\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n\n        if (fill) {\n            if (Utils.isNumber(fillColor)) {\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\n            } else {\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fill();\n        }\n\n        if (strokeWidth) {\n            if (Utils.isNumber(strokeColor)) {\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\n            } else {\n                ctx.strokeStyle = \"white\";\n            }\n            ctx.lineWidth = strokeWidth;\n            ctx.stroke();\n        }\n\n        return canvas;\n    }\n\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\n            } else {\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\n            }\n        };\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createShadowRect(stage, w, h, radius, blur, margin) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + margin * 2;\n        canvas.height = h + margin * 2;\n\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\n        ctx.globalAlpha = 0.01;\n        ctx.fillRect(0, 0, 0.01, 0.01);\n        ctx.globalAlpha = 1.0;\n\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.shadowBlur = blur;\n        ctx.shadowOffsetX = (w + 10) + margin;\n        ctx.shadowOffsetY = margin;\n\n        ctx.beginPath();\n        const x = -(w + 10);\n        const y = 0;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n        ctx.fill();\n\n        return canvas;\n    }\n\n    static getSvgTexture(url, w, h) {\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createSvg(cb, stage, url, w, h);\n            } else {\n                this.createSvg(cb, stage, url, w, h);\n            }\n        };\n        let id = 'svg' + [w, h, url].join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createSvg(cb, stage, url, w, h) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        let img = new Image();\n        img.onload = () => {\n            canvas.width = w;\n            canvas.height = h;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            cb(null, canvas);\n        }\n        img.onerror = (err) => {\n            cb(err);\n        }\n\n        // On the PS4 platform setting the `crossOrigin` attribute on images\n        // can cause CORS failures.\n        if (!Utils.isPS4) {\n            img.crossOrigin = \"Anonymous\";\n        }\n\n        img.src = url;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class ObjMerger {\n\n    static isMf(f) {\n        return Utils.isFunction(f) && f.__mf;\n    }\n\n    static mf(f) {\n        // Set as merge function.\n        f.__mf = true;\n        return f;\n    }\n\n    static merge(a, b) {\n        const aks = Object.keys(a);\n        const bks = Object.keys(b);\n\n        if (!bks.length) {\n            return a;\n        }\n\n        // Create index array for all elements.\n        const ai = {};\n        const bi = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n            ai[key] = -1;\n            bi[key] = i;\n        }\n        for (let i = 0, n = aks.length; i < n; i++) {\n            const key = aks[i];\n            ai[key] = i;\n            if (bi[key] === undefined) {\n                bi[key] = -1;\n            }\n        }\n\n        const aksl = aks.length;\n\n        const result = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n\n            // Prepend all items in a that are not in b - before the now added b attribute.\n            const aIndex = ai[key];\n            let curIndex = aIndex;\n            while(--curIndex >= 0) {\n                const akey = aks[curIndex];\n                if (bi[akey] !== -1) {\n                    // Already found? Stop processing.\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\n                    break;\n                }\n            }\n            while(++curIndex < aIndex) {\n                const akey = aks[curIndex];\n                result[akey] = a[akey];\n            }\n\n            const bv = b[key];\n            const av = a[key];\n            let r;\n            if (this.isMf(bv)) {\n                r = bv(av);\n            } else {\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\n                    r = bv;\n                } else {\n                    r = ObjMerger.merge(av, bv);\n                }\n            }\n\n            // When marked as undefined, property is deleted.\n            if (r !== undefined) {\n                result[key] = r;\n            }\n        }\n\n        // Append remaining final items in a.\n        let curIndex = aksl;\n        while(--curIndex >= 0) {\n            const akey = aks[curIndex];\n            if (bi[akey] !== -1) {\n                break;\n            }\n        }\n        while(++curIndex < aksl) {\n            const akey = aks[curIndex];\n            result[akey] = a[akey];\n        }\n\n        return result;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"../tree/ObjectList.mjs\";\n\nexport default class ObjectListProxy extends ObjectList {\n\n    constructor(target) {\n        super();\n        this._target = target;\n    }\n\n    onAdd(item, index) {\n        this._target.addAt(item, index);\n    }\n\n    onRemove(item, index) {\n        this._target.removeAt(index);\n    }\n\n    onSync(removed, added, order) {\n        this._target._setByArray(order);\n    }\n\n    onSet(item, index) {\n        this._target.setAt(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._target.setAt(item, toIndex);\n    }\n\n    createItem(object) {\n        return this._target.createItem(object);\n    }\n\n    isItem(object) {\n        return this._target.isItem(object);\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\n\nexport default class ObjectListWrapper extends ObjectListProxy {\n\n    constructor(target, wrap) {\n        super(target);\n        this._wrap = wrap;\n    }\n\n    wrap(item) {\n        let wrapper = this._wrap(item);\n        item._wrapper = wrapper;\n        return wrapper;\n    }\n\n    onAdd(item, index) {\n        item = this.wrap(item);\n        super.onAdd(item, index);\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n    }\n\n    onSync(removed, added, order) {\n        added.forEach(a => this.wrap(a));\n        order = order.map(a => a._wrapper);\n        super.onSync(removed, added, order);\n    }\n\n    onSet(item, index) {\n        item = this.wrap(item);\n        super.onSet(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        super.onMove(item, fromIndex, toIndex);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class NoiseTexture extends Texture {\n\n    _getLookupId() {\n        return '__noise';\n    }\n\n    _getSourceLoader() {\n        const gl = this.stage.gl;\n        return function(cb) {\n            const noise = new Uint8Array(128 * 128 * 4);\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\n                const v = Math.floor(Math.random() * 256);\n                noise[i] = v;\n                noise[i+1] = v;\n                noise[i+2] = v;\n                noise[i+3] = 255;\n            }\n            const texParams = {}\n\n            if (gl) {\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class HtmlTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._htmlElement = undefined;\n        this._scale = 1;\n    }\n\n    set htmlElement(v) {\n        this._htmlElement = v;\n        this._changed();\n    }\n\n    get htmlElement() {\n        return this._htmlElement;\n    }\n\n    set scale(v) {\n        this._scale = v;\n        this._changed();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set html(v) {\n        if (!v) {\n            this.htmlElement = undefined;\n        } else {\n            const d = document.createElement('div');\n            d.innerHTML = \"<div>\" + v + \"</div>\";\n            this.htmlElement = d.firstElementChild;\n        }\n    }\n\n    get html() {\n        return this._htmlElement.innerHTML;\n    }\n\n    _getIsValid() {\n        return this.htmlElement;\n    }\n\n    _getLookupId() {\n        return this._scale + \":\" + this._htmlElement.innerHTML;\n    }\n\n    _getSourceLoader() {\n        const htmlElement = this._htmlElement;\n        const scale = this._scale;\n        return function(cb) {\n            if (!window.html2canvas) {\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\n            }\n\n            const area = HtmlTexture.getPreloadArea();\n            area.appendChild(htmlElement);\n\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\n                area.removeChild(htmlElement);\n                if (canvas.height === 0) {\n                    return cb(new Error(\"Canvas height is 0\"));\n                }\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\n            }).catch(e => {\n                console.error('[Lightning]', e);\n            });\n        }\n    }\n\n    static getPreloadArea() {\n        if (!this._preloadArea) {\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\n            this._preloadArea = document.createElement('div');\n            if (this._preloadArea.attachShadow) {\n                // Use a shadow DOM if possible to prevent styling from interfering.\n                this._preloadArea.attachShadow({mode: 'closed'});\n            }\n            this._preloadArea.style.opacity = 0;\n            this._preloadArea.style.pointerEvents = 'none';\n            this._preloadArea.style.position = 'fixed';\n            this._preloadArea.style.display = 'block';\n            this._preloadArea.style.top = '100vh';\n            this._preloadArea.style.overflow = 'hidden';\n            document.body.appendChild(this._preloadArea);\n        }\n        return this._preloadArea;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticTexture extends Texture {\n\n    constructor(stage, options) {\n        super(stage);\n\n        this._options = options;\n    }\n\n    set options(v) {\n        if (this._options !== v) {\n            this._options = v;\n            this._changed();\n        }\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    _getIsValid() {\n        return !!this._options;\n    }\n\n    _getSourceLoader() {\n        return (cb) => {\n            cb(null, this._options);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class ListComponent extends Component {\n\n    constructor(stage) {\n        super(stage);\n\n        this._wrapper = super._children.a({});\n\n        this._reloadVisibleElements = false;\n\n        this._visibleItems = new Set();\n\n        this._index = 0;\n\n        this._started = false;\n\n        /**\n         * The transition definition that is being used when scrolling the items.\n         * @type TransitionSettings\n         */\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\n\n        /**\n         * The scroll area size in pixels per item.\n         */\n        this._itemSize = 100;\n\n        this._viewportScrollOffset = 0;\n\n        this._itemScrollOffset = 0;\n\n        /**\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\n         */\n        this._roll = false;\n\n        /**\n         * Allows restricting the start scroll position.\n         */\n        this._rollMin = 0;\n\n        /**\n         * Allows restricting the end scroll position.\n         */\n        this._rollMax = 0;\n\n        /**\n         * Definition for a custom animation that is applied when an item is (partially) selected.\n         * @type AnimationSettings\n         */\n        this._progressAnimation = null;\n\n        /**\n         * Inverts the scrolling direction.\n         * @type {boolean}\n         * @private\n         */\n        this._invertDirection = false;\n\n        /**\n         * Layout the items horizontally or vertically?\n         * @type {boolean}\n         * @private\n         */\n        this._horizontal = true;\n\n        this.itemList = new ListItems(this);\n    }\n\n    _allowChildrenAccess() {\n        return false;\n    }\n\n    get items() {\n        return this.itemList.get();\n    }\n\n    set items(children) {\n        this.itemList.patch(children);\n    }\n\n    start() {\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\n        this._scrollTransition = this._wrapper.transition(this.property);\n        this._scrollTransition.on('progress', p => this.update());\n\n        this.setIndex(0, true, true);\n\n        this._started = true;\n\n        this.update();\n    }\n\n    setIndex(index, immediate = false, closest = false) {\n        let nElements = this.length;\n        if (!nElements) return;\n\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\n\n        if (closest) {\n            // Scroll to same offset closest to the index.\n            let offset = Utils.getModuloIndex(index, nElements);\n            let o = Utils.getModuloIndex(this.index, nElements);\n            let diff = offset - o;\n            if (diff > 0.5 * nElements) {\n                diff -= nElements;\n            } else if (diff < -0.5 * nElements) {\n                diff += nElements;\n            }\n            this._index += diff;\n        } else {\n            this._index = index;\n        }\n\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\n            this._index = Utils.getModuloIndex(this._index, nElements);\n        }\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = direction * this._index * this._itemSize;\n\n        if (this._roll) {\n            let min, max, scrollDelta;\n            if (direction == 1) {\n                max = (nElements - 1) * this._itemSize;\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max -= scrollDelta;\n\n                min = this.viewportSize - (this._itemSize + scrollDelta);\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.max(Math.min(value, max), min);\n            } else {\n                max = (nElements * this._itemSize - this.viewportSize);\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max += scrollDelta;\n\n                let min = scrollDelta;\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.min(Math.max(-max, value), -min);\n            }\n        }\n\n        this._scrollTransition.start(value);\n\n        if (immediate) {\n            this._scrollTransition.finish();\n        }\n\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\n    }\n\n    getAxisPosition() {\n        let target = -this._scrollTransition._targetValue;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = -direction * this._index * this._itemSize;\n\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\n    }\n\n    update() {\n        if (!this._started) return;\n\n        let nElements = this.length;\n        if (!nElements) return;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n\n        // Map position to index value.\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\n\n        let viewportSize = this.viewportSize;\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\n        v += scrollDelta;\n\n        let s, e, ps, pe;\n        if (direction == -1) {\n            s = Math.floor(-v / this._itemSize);\n            ps = 1 - ((-v / this._itemSize) - s);\n            e = Math.floor((viewportSize - v) / this._itemSize);\n            pe = (((viewportSize - v) / this._itemSize) - e);\n        } else {\n            s = Math.ceil(v / this._itemSize);\n            ps = 1 + (v / this._itemSize) - s;\n            e = Math.ceil((v - viewportSize) / this._itemSize);\n            pe = e - ((v - viewportSize) / this._itemSize);\n        }\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\n            // Don't show additional items.\n            if (e >= nElements) {\n                e = nElements - 1;\n                pe = 1;\n            }\n            if (s >= nElements) {\n                s = nElements - 1;\n                ps = 1;\n            }\n            if (e <= -1) {\n                e = 0;\n                pe = 1;\n            }\n            if (s <= -1) {\n                s = 0;\n                ps = 1;\n            }\n        }\n\n        let offset = -direction * s * this._itemSize;\n\n        let item;\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n\n            let element = this.getElement(realIndex);\n            item = element.parent;\n            this._visibleItems.delete(item);\n            if (this._horizontal) {\n                item.x = offset + scrollDelta;\n            } else {\n                item.y = offset + scrollDelta;\n            }\n\n            let wasVisible = item.visible;\n            item.visible = true;\n\n            if (!wasVisible || this._reloadVisibleElements) {\n                // Turned visible.\n                this.emit('visible', index, realIndex);\n            }\n\n\n\n            if (this._progressAnimation) {\n                let p = 1;\n                if (index == s) {\n                    p = ps;\n                } else if (index == e) {\n                    p = pe;\n                }\n\n                // Use animation to progress.\n                this._progressAnimation.apply(element, p);\n            }\n\n            offset += this._itemSize;\n        }\n\n        // Handle item visibility.\n        let self = this;\n        this._visibleItems.forEach(function(invisibleItem) {\n            invisibleItem.visible = false;\n            self._visibleItems.delete(invisibleItem);\n        });\n\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n            this._visibleItems.add(this.getWrapper(realIndex));\n        }\n\n        this._reloadVisibleElements = false;\n    }\n\n    setPrevious() {\n        this.setIndex(this._index - 1);\n    }\n\n    setNext() {\n        this.setIndex(this._index + 1);\n    }\n\n    getWrapper(index) {\n        return this._wrapper.children[index];\n    }\n\n    getElement(index) {\n        let e = this._wrapper.children[index];\n        return e ? e.children[0] : null;\n    }\n\n    reload() {\n        this._reloadVisibleElements = true;\n        this.update();\n    }\n\n    get element() {\n        let e = this._wrapper.children[this.realIndex];\n        return e ? e.children[0] : null;\n    }\n\n    get length() {\n        return this._wrapper.children.length;\n    }\n\n    get property() {\n        return this._horizontal ? 'x' : 'y';\n    }\n\n    get viewportSize() {\n        return this._horizontal ? this.w : this.h;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get realIndex() {\n        return Utils.getModuloIndex(this._index, this.length);\n    }\n\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    set itemSize(v) {\n        this._itemSize = v;\n        this.update();\n    }\n\n    get viewportScrollOffset() {\n        return this._viewportScrollOffset;\n    }\n\n    set viewportScrollOffset(v) {\n        this._viewportScrollOffset = v;\n        this.update();\n    }\n\n    get itemScrollOffset() {\n        return this._itemScrollOffset;\n    }\n\n    set itemScrollOffset(v) {\n        this._itemScrollOffset = v;\n        this.update();\n    }\n\n    get scrollTransitionSettings() {\n        return this._scrollTransitionSettings;\n    }\n\n    set scrollTransitionSettings(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    set scrollTransition(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    get scrollTransition() {\n        return this._scrollTransition;\n    }\n\n    get progressAnimation() {\n        return this._progressAnimation;\n    }\n\n    set progressAnimation(v) {\n        if (Utils.isObjectLiteral(v)) {\n            this._progressAnimation = this.stage.animations.createSettings(v);\n        } else {\n            this._progressAnimation = v;\n        }\n        this.update();\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(v) {\n        this._roll = v;\n        this.update();\n    }\n\n    get rollMin() {\n        return this._rollMin;\n    }\n\n    set rollMin(v) {\n        this._rollMin = v;\n        this.update();\n    }\n\n    get rollMax() {\n        return this._rollMax;\n    }\n\n    set rollMax(v) {\n        this._rollMax = v;\n        this.update();\n    }\n\n    get invertDirection() {\n        return this._invertDirection;\n    }\n\n    set invertDirection(v) {\n        if (!this._started) {\n            this._invertDirection = v;\n        }\n    }\n\n    get horizontal() {\n        return this._horizontal;\n    }\n\n    set horizontal(v) {\n        if (v !== this._horizontal) {\n            if (!this._started) {\n                this._horizontal = v;\n            }\n        }\n    }\n\n}\n\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\nclass ListItems extends ObjectListWrapper {\n    constructor(list) {\n        let wrap = (item => {\n            let parent = item.stage.createElement();\n            parent.add(item);\n            parent.visible = false;\n            return parent;\n        })\n\n        super(list._wrapper._children, wrap);\n        this.list = list;\n    }\n\n    onAdd(item, index) {\n        super.onAdd(item, index);\n        this.checkStarted(index);\n    }\n\n    checkStarted(index) {\n        this.list._reloadVisibleElements = true;\n        if (!this.list._started) {\n            this.list.start();\n        } else {\n            if (this.list.length === 1) {\n                this.list.setIndex(0, true, true);\n            } else {\n                if (this.list._index >= this.list.length) {\n                    this.list.setIndex(0);\n                }\n            }\n            this.list.update();\n        }\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n        let ri = this.list.realIndex;\n        if (ri === index) {\n            if (ri === this.list.length) {\n                ri--;\n            }\n            if (ri >= 0) {\n                this.list.setIndex(ri);\n            }\n        } else if (ri > index) {\n            this.list.setIndex(ri - 1);\n        }\n\n        this.list._reloadVisibleElements = true;\n    }\n\n    onSet(item, index) {\n        super.onSet(item, index);\n        this.checkStarted(index);\n    }\n\n    onSync(removed, added, order) {\n        super.onSync(removed, added, order);\n        this.checkStarted(0);\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nimport Utils from \"../tree/Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class LinearBlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n\n        this._direction = new Float32Array([1, 0]);\n        this._kernelRadius = 1;\n    }\n\n    get x() {\n        return this._direction[0];\n    }\n\n    set x(v) {\n        this._direction[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._direction[1];\n    }\n\n    set y(v) {\n        this._direction[1] = v;\n        this.redraw();\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n\n    useDefault() {\n        return (this._kernelRadius === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\n\n        const w = operation.getRenderWidth();\n        const h = operation.getRenderHeight();\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\n    }\n}\n\nLinearBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 resolution;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 direction;\n    uniform int kernelRadius;\n    \n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3333333333333333) * direction;\n        color += texture2D(image, uv) * 0.29411764705882354;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n        return color; \n    }\n    \n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n    }\n    \n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.411764705882353) * direction;\n        vec2 off2 = vec2(3.2941176470588234) * direction;\n        vec2 off3 = vec2(5.176470588235294) * direction;\n        color += texture2D(image, uv) * 0.1964825501511404;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n        return color;\n    }    \n\n    void main(void){\n        if (kernelRadius == 1) {\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else if (kernelRadius == 2) {\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else {\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\n */\nexport default class BoxBlurShader extends DefaultShader {\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const dx = 1.0 / operation.getTextureWidth(0);\n        const dy = 1.0 / operation.getTextureHeight(0);\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\n    }\n\n}\n\nBoxBlurShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 stepTextureCoord;\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec4 vColor;\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nBoxBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class BlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._kernelRadius = 1;\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\nimport Shader from \"../tree/Shader.mjs\";\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\n\nexport default class FastBlurComponent extends Component {\n    static _template() {\n        return {}\n    }\n\n    get wrap() {\n        return this.tag(\"Wrap\");\n    }\n\n    set content(v) {\n        return this.wrap.content = v;\n    }\n\n    get content() {\n        return this.wrap.content;\n    }\n\n    set padding(v) {\n        this.wrap._paddingX = v;\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this.wrap._paddingX = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set amount(v) {\n        return this.wrap.amount = v;\n    }\n\n    get amount() {\n        return this.wrap.amount;\n    }\n\n    _onResize() {\n        this.wrap.w = this.renderWidth;\n        this.wrap.h = this.renderHeight;\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    _build() {\n        this.patch({\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\n        });\n    }\n\n}\n\n\nclass C2dFastBlurComponent extends Component {\n\n    static _template() {\n        return {\n            forceZIndexContext: true,\n            rtt: true,\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n\n    }\n\n    static getSpline() {\n        if (!this._multiSpline) {\n            this._multiSpline = new MultiSpline();\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\n        }\n        return this._multiSpline;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        this._wrapper.x = paddingX;\n        this._textwrap.x = -paddingX;\n\n        this._wrapper.y = paddingY;\n        this._textwrap.y = -paddingY;\n\n        this._textwrap.w = w + paddingX * 2;\n        this._textwrap.h = h + paddingY * 2;\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\n    }\n\n    static _amountToKernelRadius(v) {\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nclass WebGLFastBlurComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            },\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n        this._layers = this.sel(\"Layers\");\n        this._output = this.sel(\"Result\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _buildLayers() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._output.x = -paddingX;\n        this._textwrap.x = -paddingX;\n        this._output.w = fw;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._output.y = -paddingY;\n        this._textwrap.y = -paddingY;\n        this._output.h = fh;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v === 0) {\n            this._textwrap.renderToTexture = false;\n            this._output.shader.otherTextureSource = null;\n            this._output.visible = false;\n        } else {\n            this._textwrap.renderToTexture = true;\n            this._output.visible = true;\n\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n\n            if (v <= 1) {\n                this._output.texture = this._textwrap.getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\n                this._output.shader.a = v;\n            } else if (v <= 2) {\n                this._output.texture = this.getLayer(0).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\n                this._output.shader.a = v - 1;\n            } else if (v <= 3) {\n                this._output.texture = this.getLayer(1).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\n                this._output.shader.a = v - 2;\n            } else if (v <= 4) {\n                this._output.texture = this.getLayer(2).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\n                this._output.shader.a = v - 3;\n            }\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._buildLayers();\n    }\n\n}\n\n/**\n * Shader that combines two textures into one output.\n */\nclass FastBlurOutputShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._a = 0;\n        this._otherTextureSource = null;\n    }\n\n    get a() {\n        return this._a;\n    }\n\n    set a(v) {\n        this._a = v;\n        this.redraw();\n    }\n\n    set otherTextureSource(v) {\n        this._otherTextureSource = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\n    }\n\n    beforeDraw(operation) {\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\n\n        let gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n}\n\nFastBlurOutputShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uSampler2;\n    uniform float a;\n    void main(void){\n        if (a == 1.0) {\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\n        } else {\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\n\nexport default class BloomComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\n                BloomBase: {shader: {type: BloomBaseShader},\n                    Content: {}\n                }\n            },\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap.Content\");\n        this._layers = this.sel(\"Layers\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _build() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap.Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap.Content').patch(v);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._textwrap.x = -paddingX;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._textwrap.y = -paddingY;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v > 0) {\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._build();\n    }\n\n}\n\nclass BloomBaseShader extends DefaultShader {\n}\n\nBloomBaseShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float m = max(max(color.r, color.g), color.b);\n        float c = max(0.0, (m - 0.80)) * 5.0;\n        color = color * c;\n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class SmoothScaleComponent extends Component {\n\n    static _template() {\n        return {\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\n                Content: {}\n            },\n            Scale: {visible: false}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._smoothScale = 1;\n        this._iterations = 0;\n    }\n\n    get content() {\n        return this.tag('Content');\n    }\n\n    set content(v) {\n        this.tag('Content').patch(v, true);\n    }\n\n    get smoothScale() {\n        return this._smoothScale;\n    }\n\n    set smoothScale(v) {\n        if (this._smoothScale !== v) {\n            let its = 0;\n            while(v < 0.5 && its < 12) {\n                its++;\n                v = v * 2;\n            }\n\n            this.scale = v;\n            this._setIterations(its);\n\n            this._smoothScale = v;\n        }\n    }\n\n    _setIterations(its) {\n        if (this._iterations !== its) {\n            const scalers = this.sel(\"Scale\").childList;\n            const content = this.sel(\"ContentWrap\");\n            while (scalers.length < its) {\n                const first = scalers.length === 0;\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\n            }\n\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\n\n            const useScalers = (its > 0);\n            this.patch({\n                ContentWrap: {renderToTexture: useScalers},\n                Scale: {visible: useScalers}\n            });\n\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                scalers.getAt(i).patch({\n                    visible: i < its,\n                    renderOffscreen: i !== its - 1\n                });\n            }\n            this._iterations = its;\n        }\n    }\n\n    static _updateDimensions(contentWrap, force) {\n        const content = contentWrap.children[0];\n        let w = content.renderWidth;\n        let h = content.renderHeight;\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\n            contentWrap.w = w;\n            contentWrap.h = h;\n\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                w = w * 0.5;\n                h = h * 0.5;\n                scalers[i].w = w;\n                scalers[i].h = h;\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class BorderComponent extends Component {\n\n    static _template() {\n        return {\n            Content: {},\n            Borders: {\n                Top: {rect: true, visible: false, mountY: 1},\n                Right: {rect: true, visible: false},\n                Bottom: {rect: true, visible: false},\n                Left: {rect: true, visible: false, mountX: 1}\n            }\n        };\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._borderTop = this.tag(\"Top\");\n        this._borderRight = this.tag(\"Right\");\n        this._borderBottom = this.tag(\"Bottom\");\n        this._borderLeft = this.tag(\"Left\");\n\n        this.onAfterUpdate = function (element) {\n            const content = element.childList.first;\n            let w = element.core.w || content.renderWidth;\n            let h = element.core.h || content.renderHeight;\n            element._borderTop.w = w;\n            element._borderBottom.y = h;\n            element._borderBottom.w = w;\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderLeft.y = -element._borderTop.h;\n            element._borderRight.x = w;\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderRight.y = -element._borderTop.h;\n        };\n\n        this.borderWidth = 1;\n    }\n\n    get content() {\n        return this.sel('Content');\n    }\n\n    set content(v) {\n        this.sel('Content').patch(v, true);\n    }\n\n    get borderWidth() {\n        return this.borderWidthTop;\n    }\n\n    get borderWidthTop() {\n        return this._borderTop.h;\n    }\n\n    get borderWidthRight() {\n        return this._borderRight.w;\n    }\n\n    get borderWidthBottom() {\n        return this._borderBottom.h;\n    }\n\n    get borderWidthLeft() {\n        return this._borderLeft.w;\n    }\n\n    set borderWidth(v) {\n        this.borderWidthTop = v;\n        this.borderWidthRight = v;\n        this.borderWidthBottom = v;\n        this.borderWidthLeft = v;\n    }\n\n    set borderWidthTop(v) {\n        this._borderTop.h = v;\n        this._borderTop.visible = (v > 0);\n    }\n\n    set borderWidthRight(v) {\n        this._borderRight.w = v;\n        this._borderRight.visible = (v > 0);\n    }\n\n    set borderWidthBottom(v) {\n        this._borderBottom.h = v;\n        this._borderBottom.visible = (v > 0);\n    }\n\n    set borderWidthLeft(v) {\n        this._borderLeft.w = v;\n        this._borderLeft.visible = (v > 0);\n    }\n\n    get colorBorder() {\n        return this.colorBorderTop;\n    }\n\n    get colorBorderTop() {\n        return this._borderTop.color;\n    }\n\n    get colorBorderRight() {\n        return this._borderRight.color;\n    }\n\n    get colorBorderBottom() {\n        return this._borderBottom.color;\n    }\n\n    get colorBorderLeft() {\n        return this._borderLeft.color;\n    }\n\n    set colorBorder(v) {\n        this.colorBorderTop = v;\n        this.colorBorderRight = v;\n        this.colorBorderBottom = v;\n        this.colorBorderLeft = v;\n    }\n\n    set colorBorderTop(v) {\n        this._borderTop.color = v;\n    }\n\n    set colorBorderRight(v) {\n        this._borderRight.color = v;\n    }\n\n    set colorBorderBottom(v) {\n        this._borderBottom.color = v;\n    }\n\n    set colorBorderLeft(v) {\n        this._borderLeft.color = v;\n    }\n\n    get borderTop() {\n        return this._borderTop;\n    }\n\n    set borderTop(settings) {\n        this.borderTop.patch(settings);\n    }\n\n    get borderRight() {\n        return this._borderRight;\n    }\n\n    set borderRight(settings) {\n        this.borderRight.patch(settings);\n    }\n\n    get borderBottom() {\n        return this._borderBottom;\n    }\n\n    set borderBottom(settings) {\n        this.borderBottom.patch(settings);\n    }\n\n    get borderLeft() {\n        return this._borderLeft;\n    }\n\n    set borderLeft(settings) {\n        this.borderLeft.patch(settings);\n    }\n\n    set borders(settings) {\n        this.borderTop = settings;\n        this.borderLeft = settings;\n        this.borderBottom = settings;\n        this.borderRight = settings;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\n\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getC2d() {\n        return C2dGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nWebGLGrayscaleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\n    }\n`;\n\nexport class C2dGrayscaleShader extends C2dDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getWebGL() {\n        return WebGLGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * This shader can be used to fix a problem that is known as 'gradient banding'.\n */\nexport default class DitheringShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._noiseTexture = new NoiseTexture(ctx.stage);\n\n        this._graining = 1/256;\n\n        this._random = false;\n    }\n\n    set graining(v) {\n        this._graining = v;\n        this.redraw();\n    }\n\n    set random(v) {\n        this._random = v;\n        this.redraw();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Make sure that the noise texture is uploaded to the GPU.\n        this._noiseTexture.load();\n\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            // Calculate noise texture coordinates so that it spans the full element.\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\n\n            let ulx = 0;\n            let uly = 0;\n            if (this._random) {\n                ulx = Math.random();\n                uly = Math.random();\n\n                brx += ulx;\n                bry += uly;\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = ulx;\n                    ulx = brx;\n                    brx = t;\n                }\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = uly;\n                    uly = bry;\n                    bry = t;\n                }\n            }\n\n            // Specify all corner points.\n            floats[offset] = ulx;\n            floats[offset + 1] = uly;\n\n            floats[offset + 2] = brx;\n            floats[offset + 3] = uly;\n\n            floats[offset + 4] = brx;\n            floats[offset + 5] = bry;\n\n            floats[offset + 6] = ulx;\n            floats[offset + 7] = bry;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n\n        let glTexture = this._noiseTexture.source.nativeTexture;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    useDefault() {\n        return this._graining === 0;\n    }\n\n    afterDraw(operation) {\n        if (this._random) {\n            this.redraw();\n        }\n    }\n\n}\n\nDitheringShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec2 aNoiseTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vNoiseTextureCoord = aNoiseTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDitheringShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uNoiseSampler;\n    uniform float graining;\n    void main(void){\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../../tree/Utils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class CircularPushShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._inputValue = 0;\n\n        this._maxDerivative = 0.01;\n\n        this._normalizedValue = 0;\n\n        // The offset between buckets. A value between 0 and 1.\n        this._offset = 0;\n\n        this._amount = 0.1;\n\n        this._aspectRatio = 1;\n\n        this._offsetX = 0;\n\n        this._offsetY = 0;\n\n        this.buckets = 100;\n    }\n\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(v) {\n        this._aspectRatio = v;\n        this.redraw();\n    }\n\n    get offsetX() {\n        return this._offsetX;\n    }\n\n    set offsetX(v) {\n        this._offsetX = v;\n        this.redraw();\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        this._offsetY = v;\n        this.redraw();\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    set inputValue(v) {\n        this._inputValue = v;\n    }\n\n    get inputValue() {\n        return this._inputValue;\n    }\n\n    set maxDerivative(v) {\n        this._maxDerivative = v;\n    }\n\n    get maxDerivative() {\n        return this._maxDerivative;\n    }\n\n    set buckets(v) {\n        if (v > 100) {\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\n            v = 100;\n        }\n\n        // This should be set before starting.\n        this._buckets = v;\n\n        // Init values array in the correct length.\n        this._values = new Uint8Array(this._getValues(v));\n\n        this.redraw();\n    }\n\n    get buckets() {\n        return this._buckets;\n    }\n\n    _getValues(n) {\n        const v = [];\n        for (let i = 0; i < n; i++) {\n            v.push(this._inputValue);\n        }\n        return v;\n    }\n\n    /**\n     * Progresses the shader with the specified (fractional) number of buckets.\n     * @param {number} o;\n     *   A number from 0 to 1 (1 = all buckets).\n     */\n    progress(o) {\n        this._offset += o * this._buckets;\n        const full = Math.floor(this._offset);\n        this._offset -= full;\n        this._shiftBuckets(full);\n        this.redraw();\n    }\n\n    _shiftBuckets(n) {\n        for (let i = this._buckets - 1; i >= 0; i--) {\n            const targetIndex = i - n;\n            if (targetIndex < 0) {\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\n                this._values[i] = 255 * this._normalizedValue;\n            } else {\n                this._values[i] = this._values[targetIndex];\n            }\n        }\n    }\n\n    set offset(v) {\n        this._offset = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    beforeDraw(operation) {\n        const gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        if (!this._valuesTexture) {\n            this._valuesTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (Utils.isNode) {\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\n            }\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n        }\n\n        // Upload new values.\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    cleanup() {\n        if (this._valuesTexture) {\n            this.gl.deleteTexture(this._valuesTexture);\n        }\n    }\n\n\n}\n\nCircularPushShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    uniform float offsetX;\n    uniform float offsetY;\n    uniform float aspectRatio;\n    varying vec2 vTextureCoord;\n    varying vec2 vPos;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vPos = vTextureCoord * 2.0 - 1.0;\n        vPos.y = vPos.y * aspectRatio;\n        vPos.y = vPos.y + offsetY;\n        vPos.x = vPos.x + offsetX;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nCircularPushShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vPos;\n    uniform float amount;\n    uniform float offset;\n    uniform float values[100];\n    uniform float buckets;\n    uniform sampler2D uSampler;\n    uniform sampler2D uValueSampler;\n    void main(void){\n        float l = length(vPos);\n        float m = (l * buckets * 0.678 - offset) / buckets;\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\n        vec2 unit = vPos / l;\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\n    }\n`;\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class InversionShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nInversionShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class OutlineShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._width = 5;\n        this._col = 0xFFFFFFFF;\n        this._color = [1,1,1,1];\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    get color() {\n        return this._col;\n    }\n\n    set color(v) {\n        if (this._col !== v) {\n            const col = StageUtils.getRgbaComponentsNormalized(v);\n            col[0] = col[0] * col[3];\n            col[1] = col[1] * col[3];\n            col[2] = col[2] * col[3];\n\n            this._color = col;\n\n            this.redraw();\n\n            this._col = v;\n        }\n    }\n\n    useDefault() {\n        return (this._width === 0 || this._col[3] === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            const elementCore = operation.getElementCore(i);\n\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\n            const ddw = this._width / elementCore.w;\n            const dw = ddw / (1 - 2 * ddw);\n            const ddh = this._width / elementCore.h;\n            const dh = ddh / (1 - 2 * ddh);\n\n            // Specify all corner points.\n            floats[offset] = -dw;\n            floats[offset + 1] = -dh;\n\n            floats[offset + 2] = 1 + dw;\n            floats[offset + 3] = -dh;\n\n            floats[offset + 4] = 1 + dw;\n            floats[offset + 5] = 1 + dh;\n\n            floats[offset + 6] = -dw;\n            floats[offset + 7] = 1 + dh;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n}\n\nOutlineShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aCorner;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vCorner;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vCorner = aCorner;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nOutlineShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vCorner;\n    uniform vec4 color;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec2 m = min(vCorner, 1.0 - vCorner);\n        float value = step(0.0, min(m.x, m.y));\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\n */\nexport default class PixelateShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._size = new Float32Array([4, 4]);\n    }\n\n    get x() {\n        return this._size[0];\n    }\n\n    set x(v) {\n        this._size[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._size[1];\n    }\n\n    set y(v) {\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    get size() {\n        return this._size[0];\n    }\n\n    set size(v) {\n        this._size[0] = v;\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return ((this._size[0] === 0) && (this._size[1] === 0));\n    }\n\n    static getWebGLImpl() {\n        return WebGLPixelateShaderImpl;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            let w = operation.quads.getTextureWidth(operation.index + i);\n            let h = operation.quads.getTextureHeight(operation.index + i);\n\n            floats[offset] = w;\n            floats[offset + 1] = h;\n            floats[offset + 2] = w;\n            floats[offset + 3] = h;\n            floats[offset + 4] = w;\n            floats[offset + 5] = h;\n            floats[offset + 6] = w;\n            floats[offset + 7] = h;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\n    }\n}\n\nPixelateShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aTextureRes;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        vTextureRes = aTextureRes;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPixelateShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n\n    uniform vec2 size;\n    uniform sampler2D uSampler;\n    \n    vec2 mapCoord( vec2 coord )\n    {\n        coord *= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 unmapCoord( vec2 coord )\n    {\n        coord /= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 pixelate(vec2 coord, vec2 size)\n    {\n        return floor( coord / size ) * size;\n    }\n    \n    void main(void)\n    {\n        vec2 coord = mapCoord(vTextureCoord);\n        coord = pixelate(coord, size);\n        coord = unmapCoord(coord);\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class RadialFilterShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._radius = 0;\n        this._cutoff = 1;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set cutoff(v) {\n        this._cutoff = v;\n        this.redraw();\n    }\n\n    get cutoff() {\n        return this._cutoff;\n    }\n    \n    useDefault() {\n        return this._radius === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        // We substract half a pixel to get a better cutoff effect.\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\n    }\n\n}\n\nRadialFilterShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 pos;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n        pos = gl_Position.xy;\n    }\n`;\n\nRadialFilterShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 pos;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float radius;\n    uniform float cutoff;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RoundedRectangleShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._blend = 0;\n        this._radius = [1, 1, 1, 1];\n        this._stroke = 0;\n        this._fc = 0x00ffffff;\n        this._fillColor = this._getNormalizedColor(0xffffffff);\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\n    }\n\n    set blend(p) {\n        this._blend = Math.min(Math.max(p, 0), 1);\n    }\n\n    set radius(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._radius = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\n            }\n            else if (v.length === 4) {\n                this._radius = v;\n            }\n            else {\n                this._radius = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._radius = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set topLeft(num) {\n        this._radius[0] = num;\n        this.redraw();\n    }\n\n    get topLeft() {\n        return this._radius[0];\n    }\n\n    set topRight(num) {\n        this._radius[1] = num;\n        this.redraw();\n    }\n\n    get topRight() {\n        return this._radius[1];\n    }\n\n    set bottomRight(num) {\n        this._radius[2] = num;\n        this.redraw();\n    }\n\n    get bottomRight() {\n        return this._radius[2];\n    }\n\n    set bottomLeft(num) {\n        this._radius[3] = num;\n        this.redraw();\n    }\n\n    get bottomLeft() {\n        return this._radius[4];\n    }\n\n    set strokeColor(argb) {\n        this._sc = argb;\n        this._strokeColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get strokeColor() {\n        return this._sc;\n    }\n\n    set fillColor(argb) {\n        this._fc = argb;\n        this._fillColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get fillColor() {\n        return this._fc;\n    }\n\n    set stroke(num) {\n        this._stroke = num;\n        this.redraw();\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nRoundedRectangleShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nRoundedRectangleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n\n    #define PI 3.14159265359\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 radius;\n    uniform float stroke;\n    uniform vec4 strokeColor;\n    uniform vec4 fillColor;\n    uniform float alpha;\n    uniform float fill;\n    uniform float blend;\n    \n    float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    float innerBorderMask(float dist, float width){\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\n        float alpha2 = clamp(dist, 0.0, 1.0);\n        return alpha1 - alpha2;\n    }\n\n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        float r = 0.0;\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[0];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[1];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\n            r = radius[2];\n        } else {\n            r = radius[3];\n        }\n        \n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from './DefaultShader.mjs';\n\nexport default class FadeOutShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._fade = [0, 0, 0, 0];\n    }\n\n    set top(num) {\n        this._fade[0] = num;\n        this.redraw();\n    }\n\n    get top() {\n        return this._fade[0];\n    }\n\n    set right(num) {\n        this._fade[1] = num;\n        this.redraw();\n    }\n\n    get right() {\n        return this._fade[1];\n    }\n\n    set bottom(num) {\n        this._fade[2] = num;\n        this.redraw();\n    }\n\n    get bottom() {\n        return this._fade[2];\n    }\n\n    set left(num) {\n        this._fade[3] = num;\n        this.redraw();\n    }\n\n    get left() {\n        return this._fade[3];\n    }\n\n    set fade(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._fade = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\n            }\n            else if (v.length === 4) {\n                this._fade = v;\n            }\n            else {\n                this._fade = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._fade = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get fade() {\n        return this._fade;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const fade = this._fade.map((f) => f * renderPrecision);\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nFadeOutShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 fade;\n    \n    void main() {\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 point = vTextureCoord.xy * resolution.xy;\n        \n        vec2 pos1;\n        vec2 pos2;\n        vec2 d;\n        float c;\n        float t = 0.0;\n             \n        if(fade[0] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x, point.y + fade[0]);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[1] > 0.0) {\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[2] > 0.0) {\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[3] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x + fade[3], point.y);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class VignetteShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._magnitude = 1.3;\n        this._intensity = 0.7;\n        this._pivot = [0.5, 0.5];\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\n        this.redraw()\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v)) {\n            this._pivot = v;\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    set pivotX(v) {\n        this._pivot[0] = v;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotY(v) {\n        this._pivot[1] = v;\n        this.redraw();\n    }\n\n    get intensity() {\n        return this._intensity;\n    }\n\n    set intensity(v) {\n        this._intensity = v;\n        this.redraw();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n\n    }\n\n    set magnitude(v) {\n        this._magnitude = v;\n        this.redraw();\n    }\n}\n\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nVignetteShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float magnitude;\n    uniform float intensity;\n    uniform vec2 pivot;\n\n    void main() {\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\n        uv.x = clamp(uv.x, 0.0, 1.0);\n        uv.y = clamp(uv.y, 0.0, 1.0);\n   \n        uv *=  1.00 - uv.yx;\n        float vig = uv.x * uv.y * 25.0 * intensity;\n        vig = pow(vig, 0.45 * magnitude);\n        vec4 fragColor = vec4(vig) * vColor;\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\n\n    }\n`\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from '../../../tree/StageUtils.mjs'\n\nexport default class SpinnerShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._radius = 100;\n        this._width = 50;\n        this._period = 1;\n        this._angle = 0.5;\n        this._smooth = 0.005;\n        this._color = 0xffffffff;\n        this._backgroundColor = 0xff000000;\n        this._time = Date.now();\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    set period(v) {\n        this._period = v;\n        this.redraw();\n    }\n\n    set angle(v) {\n        this._angle = v\n        this.redraw();\n    }\n\n    set smooth(v) {\n        this._smooth = v;\n        this.redraw();\n    }\n\n    set color(v) {\n        this._color = v;\n        this.redraw();\n    }\n\n    set backgroundColor(v) {\n        this._backgroundColor = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner\n\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\n\n        this.redraw()\n    }\n}\n\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nSpinnerShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float iTime;\n    uniform float radius;\n    uniform float width;\n    uniform float period;\n    uniform float angle;\n    uniform float smooth;\n    uniform vec2 resolution;\n\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n\n    float ratio = resolution.y / resolution.x;\n\n    vec2 transpose_pos(vec2 pos) {\n        if (ratio < 1.) {\n            float diff = 0.5 - pos.x;\n            pos.x = 0.5 - diff / ratio;\n        } else {\n            float diff = 0.5 - pos.y;\n            pos.y = 0.5 - diff * ratio;\n        }\n        return pos;\n    }\n\n    float get_angle(vec2 pos) {\n        pos = transpose_pos(pos);\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\n        a = (1.0+a/3.14159)/2.0;\n        \n        return a;\n    }\n\n    float dist(vec2 pos1, vec2 pos2) {\n        pos1 = transpose_pos(pos1);\n        return distance(pos1, pos2);\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vTextureCoord;\n        vec4 fragColor = vColor;\n        \n        vec2 st = vTextureCoord;\n        float pct = dist(st, vec2(0.5));\n\n        float a = get_angle(st);\n        float t = iTime / 1000.0 / period;\n\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\n        float outer = max(radius / resolution.x, radius / resolution.y);\n\n        float x1 = mod(t, 1.0);\n        float x2 = mod(t + angle, 1.0);\n\n        if (x1 < x2) {\n            if (a > x1 && a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        } else {\n            if (a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else if (a > x1) {\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        }\n\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class HoleShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n        this._radius = 0;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        this._x = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        this._y = v;\n        this.redraw();\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        this._w = v;\n        this.redraw();\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        this._h = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\n\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n\n    useDefault() {\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\n    }\n}\n\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nHoleShader.fragmentShaderSource = `\n   #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float x;\n    uniform float y;\n    uniform float w;\n    uniform float h;\n    uniform vec2 resolution;\n    uniform float radius;\n\n    float roundBox(vec2 p, vec2 b, float r) {\n        float d = length(max(abs(p)-b+r, 0.1))-r;\n        return smoothstep(1.0, 0.0, d);\n    }\n\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n        vec2 size = vec2(w, h) / 2.0;\n        float b = roundBox(pos, size, radius);\n        gl_FragColor = mix(color, vec4(0.0), b) * vColor;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RadialGradientShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._pivot = [0, 0];\n        this._ic = 0xffffffff;\n        this._normalizedIC = this._getNormalizedColor(this._ic);\n        this._oc = 0x00ffffff;\n        this._normalizedOC = this._getNormalizedColor(this._oc);\n        this._radius = 0;\n    }\n\n    set radiusX(v) {\n        this.radius = v;\n    }\n\n    get radiusX() {\n        return this._radius;\n    }\n\n    set radiusY(v) {\n        this._radiusY = v;\n        this.redraw();\n    }\n\n    get radiusY() {\n        return this._radiusY;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set innerColor(argb) {\n        this._ic = argb;\n        this._normalizedIC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get innerColor() {\n        return this._ic;\n    }\n\n    set outerColor(argb) {\n        this._oc = argb;\n        this._normalizedOC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    set color(argb) {\n        this.innerColor = argb;\n    }\n\n    get color() {\n        return this.innerColor;\n    }\n\n    get outerColor() {\n        return this._ic;\n    }\n\n    set x(f) {\n        this._x = f;\n        this.redraw();\n    }\n\n    set y(f) {\n        this._y = f;\n        this.redraw();\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v) && v.length === 2) {\n            this._pivot = v;\n        }\n        else if(Array.isArray(v)) {\n            this._pivot = [v[0], v[1] || v[0]];\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivot() {\n        return this._pivot[0];\n    }\n\n    set pivotY(f) {\n        this._pivot[1] = f;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotX(f) {\n        this._pivot[0] = f;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        if(this._x) {\n            this._pivot[0] = this._x / owner.w;\n        }\n        if(this._y) {\n            this._pivot[1] = this._y / owner.h;\n        }\n\n        if(this._radius === 0) {\n            this._radius = owner.w * 0.5;\n        }\n\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\n    }\n}\n\nRadialGradientShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec2 pivot;\n    uniform vec4 innerColor;\n    uniform vec4 outerColor;\n    uniform float radius;\n    uniform float radiusY;\n    uniform float alpha;\n    uniform float fill;\n    uniform float aspectRatio;\n    \n    void main() {\n        vec2 point = vTextureCoord.xy * resolution;\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class Light3dShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._strength = 0.5;\n        this._ambient = 0.5;\n        this._fudge = 0.4;\n\n        this._rx = 0;\n        this._ry = 0;\n\n        this._z = 0;\n        this._pivotX = NaN;\n        this._pivotY = NaN;\n        this._pivotZ = 0;\n\n        this._lightY = 0;\n        this._lightZ = 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        let vr = operation.shaderOwner;\n        let element = vr.element;\n\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        let gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set strength(v) {\n        this._strength = v;\n        this.redraw();\n    }\n\n    get strength() {\n        return this._strength;\n    }\n\n    set ambient(v) {\n        this._ambient = v;\n        this.redraw();\n    }\n\n    get ambient() {\n        return this._ambient;\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        this._pivotX = v + 1;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        this._pivotY = v + 1;\n        this.redraw();\n    }\n\n    get lightY() {\n        return this._lightY;\n    }\n\n    set lightY(v) {\n        this._lightY = v;\n        this.redraw();\n    }\n\n    get pivotZ() {\n        return this._pivotZ;\n    }\n\n    set pivotZ(v) {\n        this._pivotZ = v;\n        this.redraw();\n    }\n\n    get lightZ() {\n        return this._lightZ;\n    }\n\n    set lightZ(v) {\n        this._lightZ = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\n    }\n\n}\n\nLight3dShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float fudge;\n    uniform float strength;\n    uniform float ambient;\n    uniform float z;\n    uniform float lightY;\n    uniform float lightZ;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Set depth perspective\n        float perspective = 1.0 + fudge * pos.z;\n\n        pos.z += lightZ * projection.x;\n\n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, perspective);\n\n        // Correct light source position.\n        pos.y += lightY * abs(projection.y);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nLight3dShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec3 pos;\n    uniform sampler2D uSampler;\n    uniform float ambient;\n    uniform float strength;\n    void main(void){\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\n        float d = length(pos);\n        float n = 1.0 / max(0.1, d);\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\n        gl_FragColor = rgba * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class PerspectiveShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._fudge = 0.2;\n        this._rx = 0;\n        this._ry = 0;\n        this._z = 1.0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const vr = operation.shaderOwner;\n        const element = vr.element;\n\n        const pivotX = element.pivotX * vr.w;\n        const pivotY = element.pivotY * vr.h;\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        const gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\n    }\n\n}\n\nPerspectiveShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float z;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, z);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPerspectiveShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform vec3 rot;\n    uniform float fudge;\n\n    void main(void) {\n        vec2 coords = vTextureCoord;\n\n        coords.xy -= vec2(0.5);\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\n        coords.xy += vec2(0.5);\n\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\n            gl_FragColor = vec4(0.0);\n        } else {\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class MagnifierShader extends DefaultShader {\n\tconstructor(context) {\n\t  super(context);\n\t  this._x = 0;\n\t  this._y = 0;\n\t  this._w = 0;\n\t  this._h = 0;\n\t  this._radius = 0;\n\t  this._magnification = 0.6;\n\t}\n  \n\tget x() {\n\t  return this._x;\n\t}\n  \n\tset x(v) {\n\t  this._x = v;\n\t  this.redraw();\n\t}\n  \n\tget y() {\n\t  return this._y;\n\t}\n  \n\tset y(v) {\n\t  this._y = v;\n\t  this.redraw();\n\t}\n  \n\tget w() {\n\t  return this._w;\n\t}\n  \n\tset w(v) {\n\t  this._w = v;\n\t  this.redraw();\n\t}\n  \n\tget h() {\n\t  return this._h;\n\t}\n  \n\tset h(v) {\n\t  this._h = v;\n\t  this.redraw();\n\t}\n  \n\tget magnification() {\n\t  return this._magnification;\n\t}\n  \n\tset magnification(v) {\n\t  this._magnification = v;\n\t  this.redraw();\n\t}\n  \n\tget radius() {\n\t  return this._radius;\n\t}\n  \n\tset radius(v) {\n\t  this._radius = v;\n\t  this.redraw();\n\t}\n  \n\tsetupUniforms(operation) {\n\t  super.setupUniforms(operation);\n  \n\t  const owner = operation.shaderOwner;\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\n\t  this._setUniform(\n\t\t'radius',\n\t\t(this._radius + 0.5) * renderPrecision,\n\t\tthis.gl.uniform1f\n\t  );\n\t  this._setUniform(\n\t\t'resolution',\n\t\tnew Float32Array([\n\t\t  owner._w * renderPrecision,\n\t\t  owner._h * renderPrecision\n\t\t]),\n\t\tthis.gl.uniform2fv\n\t  );\n\t}\n \n\tuseDefault() {\n\t  return this._w === 0 && this._h === 0;\n\t}\n  }\n  \n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n  \n  MagnifierShader.fragmentShaderSource = `\n\t  #ifdef GL_ES\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\t# else\n\t\tprecision lowp float;\n\t\t# endif\n\t  #endif\n\n\t  varying vec2 vTextureCoord;\n\t  varying vec4 vColor;\n\t  uniform sampler2D uSampler;\n\t  uniform float x;\n\t  uniform float y;\n\t  uniform float w;\n\t  uniform float h;\n\t  uniform vec2 resolution;\n\t  uniform float radius;\n\t  uniform float magnification;\n  \n\t  float roundBox(vec2 p, vec2 b, float r) {\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\n\t\t  return smoothstep(1.0, 0.0, d);\n\t  }\n\n\t  float inside(vec2 v) {\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\n\t\treturn s.x * s.y;   \n      }\n  \n\t  void main(void) {\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n\t\tvec2 size = vec2(w, h) / 2.0;\n\t\tfloat b = roundBox(pos, size, radius);\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\n\t  }\n  `;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class SpinnerShader2 extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._period = 1;\n        this._stroke = 0;\n        this._showDot = true;\n        this._clockwise = true;\n        this._bc = 0xff000000;\n        this._normalizedBC = this._getNormalizedColor(this._bc);\n        this._c = 0xffffffff;\n        this._normalizedC = this._getNormalizedColor(this._c);\n    }\n\n    set radius(v) {\n        if(v === 0) {\n            v = 1;\n        }\n        this._radius = v;\n    }\n\n    set stroke(value) {\n        this._stroke = Math.abs(value);\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    set color(argb) {\n        this._c = argb;\n        this._normalizedC = this._getNormalizedColor(argb);\n    }\n\n    get color() {\n        return this._c;\n    }\n\n    set backgroundColor(argb) {\n        this._bc = argb;\n        this._normalizedBC = this._getNormalizedColor(argb);\n    }\n\n    get backgroundColor() {\n        return this._sc;\n    }\n\n    set showDot(bool) {\n        this._showDot = bool;\n    }\n\n    get showDot() {\n        return this._showDot;\n    }\n\n    set clockwise(bool) {\n        this._clockwise = bool;\n    }\n\n    get clockwise() {\n        return this._clockwise;\n    }\n\n    set period(v) {\n        this._period = v;\n    }\n\n    get period() {\n        return this._period;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const radius = this._radius || (owner._w / 2);\n\n        if(this._stroke === 0) {\n            this._stroke = radius * 0.33;\n        }\n\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\n        this._setUniform('radius',  radius, this.gl.uniform1f);\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\n            this.redraw();\n        }\n    }\n}\n\nSpinnerShader2.spinSync = Date.now();\n\nSpinnerShader2.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    \n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n    uniform float direction;\n    uniform float radius;\n    uniform float time;\n    uniform float stroke;\n    uniform float showDot;\n    uniform float period;\n    uniform float alpha;\n    \n    float circleDist(vec2 p, float radius){\n        return length(p) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\n        \n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n        \n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\n        \n        float strokeRad = stroke * 0.5;\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Application from \"./application/Application.mjs\";\nimport Component from \"./application/Component.mjs\";\nimport Base from \"./tree/Base.mjs\";\nimport Utils from \"./tree/Utils.mjs\";\nimport StageUtils from \"./tree/StageUtils.mjs\";\nimport Element from \"./tree/Element.mjs\";\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\nimport Texture from \"./tree/Texture.mjs\";\n\nimport Tools from \"./tools/Tools.mjs\";\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\n\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\nimport TextTexture from \"./textures/TextTexture.mjs\";\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\n\nimport ListComponent from \"./components/ListComponent.mjs\";\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\nimport BloomComponent from \"./components/BloomComponent.mjs\";\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\nimport BorderComponent from \"./components/BorderComponent.mjs\";\nimport EventEmitter from \"./EventEmitter.mjs\";\n\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\n\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\n\nimport Stage from \"./tree/Stage.mjs\";\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\n\nconst lightning = {\n    Application,\n    Component,\n    Base,\n    Utils,\n    StageUtils,\n    Element,\n    Tools,\n    Stage,\n    ElementCore,\n    ElementTexturizer,\n    Texture,\n    EventEmitter,\n    shaders: {\n        Grayscale: WebGLGrayscaleShader,\n        BoxBlur: BoxBlurShader,\n        Dithering: DitheringShader,\n        CircularPush: CircularPushShader,\n        Inversion: InversionShader,\n        LinearBlur: LinearBlurShader,\n        Outline: OutlineShader,\n        Pixelate: PixelateShader,\n        RadialFilter: RadialFilterShader,\n        RoundedRectangle: RoundedRectangleShader,\n        Spinner2: SpinnerShader2,\n        FadeOut: FadeOutShader,\n        Hole: HoleShader,\n        Vignette: VignetteShader,\n        Spinner: SpinnerShader,\n        RadialGradient: RadialGradientShader,\n        Light3d: Light3dShader,\n        Perspective: PerspectiveShader,\n        Magnifier: MagnifierShader,\n        WebGLShader,\n        WebGLDefaultShader,\n        C2dShader,\n        C2dDefaultShader,\n        c2d: {\n            Grayscale: C2dGrayscaleShader,\n            Blur: C2dBlurShader\n        }\n    },\n    textures: {\n        RectangleTexture,\n        NoiseTexture,\n        TextTexture,\n        ImageTexture,\n        HtmlTexture,\n        StaticTexture,\n        StaticCanvasTexture,\n        SourceTexture\n    },\n    components: {\n        FastBlurComponent,\n        BloomComponent,\n        SmoothScaleComponent,\n        BorderComponent,\n        ListComponent\n    },\n    tools: {\n        ObjMerger,\n        ObjectListProxy,\n        ObjectListWrapper\n    }\n};\n\nif (Utils.isWeb) {\n    window.lng = lightning;\n}\n\nexport default lightning;\n"],"names":["StageUtils","_classCallCheck","_createClass","key","value","mergeNumbers","v1","v2","p","rgb","r","g","b","rgba","a","getRgbString","color","getRgbaString","toFixed","getRgbaStringFromArray","Math","floor","getRgbaComponentsNormalized","argb","getRgbComponentsNormalized","getRgbaComponents","getArgbNumber","max","min","v","mergeColors","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","mergeMultiColors","c","t","n","length","i","mergeMultiColorsEqual","mergeColorAlpha","alpha","rad","deg","PI","getTimingBezier","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","getTimingFunction","str","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","isFunction","isNumber","isInteger","isBoolean","isString","clone","isObjectLiteral","Array","isArray","getDeepClone","cloneObjShallow","obj","keys","Object","merge","obj1","obj2","isObject","type","isPlainObject","constructor","getArrayIndex","index","arr","getModuloIndex","len","ceil","equalValues","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","setToArray","result","forEach","push","iteratorToArray","iterator","iteratorResult","next","done","isUcChar","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","defaultSetter","name","patchObject","settings","error","names","patchObjectProperty","setter","setSetting","charAt","__local","local","func","SpacingCalculator","getSpacing","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","get","_lines","init","_getTotalCrossAxisSize","align","crossAxisSize","_this$_getSpacing","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","getParentAxisSizeWithPadding","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","getRelAxisSize","funcW","_allowRelAxisSizeFunction","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","isZeroAxisSize","getAxisLayoutPos","x","y","setAxisLayoutPos","pos","setAxisLayoutSize","size","getAxisMinSize","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","isShrinkable","flexItem","shrink","resizeAxis","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","getPaddingOffset","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","getMarginOffset","marginLeft","marginTop","getTotalMargin","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","getShrunkSize","SizeGrower","_grownSize","grow","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","getGrownSize","ItemPositioner","lineLayout","position","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","performLayout","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","shrinker","positioner","_calcCrossAxisMaxLayoutSize","getMainAxisMinSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","layoutLines","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","finalize","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","_reversed","_recalc","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","layoutTree","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","mainAxisContentSize","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_changedDimensions","changedDimensions","_changedContents","changedContents","f","direction","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","patch","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","_getCrossAxisLayoutSize","_getMainAxisPadding","_getMainAxisMargin","FlexTarget","_target","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","layoutFlexTree","isChanged","_disableFlex","_enableFlex","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","setParent","from","to","isFlexContainer","_changedChildren","setVisible","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","arguments","changeHeight","_updateRecalc","forceLayout","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","setOriginalXWithoutUpdatingLayout","setOriginalYWithoutUpdatingLayout","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","addTexture","has","add","removeTexture","delete","incActiveTextureCount","becomesUsed","decActiveTextureCount","becomesUnused","forEachEnabledElement","cb","_this","texture","_newArrowCheck","elements","bind","hasEnabledElements","forEachActiveElement","_this2","_this3","element","active","getRenderWidth","getRenderHeight","allowCleanup","isUsed","load","cancel","isLoading","isLoaded","isError","reload","free","_this4","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","_this5","forceRenderUpdate","update","frameCounter","forceUpdateRenderCoords","_updateTextureCoords","clearNativeTexture","replaceNativeTexture","newNativeTexture","_this6","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","_updateDimensions","e","_this7","onTextureSourceLoadError","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","_getTextureSource","textureManager","updateResultTexture","hasResultTexture","resultTextureInUse","resultTexture","getResultTexture","nativeTexture","core","mustRenderToTexture","_hasRenderUpdates","deactivate","release","releaseRenderTexture","reuseTextureAsRenderTexture","hasRenderTexture","getRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","isRTL","getOption","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","_updateLocalTranslateDelta","_triggerRecalcTranslate","_disableFuncY","disableFuncW","disableFuncH","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setZParent","findZContext","disableZContext","enableZContext","enableZSort","newShaderOwner","_setShaderOwnerRecursive","force","forceZSort","addChildAt","splice","setChildAt","removeChildAt","removeChildren","syncChildren","removed","added","order","moveChild","fromIndex","toIndex","isEstimate","setTextureCoords","ulx","uly","brx","bry","setDisplayedTextureSource","textureSource","setAsRoot","root","coordsWidth","coordsHeight","isAncestorOf","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","_setShaderOwnerChildrenRecursive","_hasRenderContext","texturizer","_enableRenderToTexture","_disableRenderToTexture","_renderAdvanced","isWhite","hasSimpleTexCoords","_stashTexCoords","_stashedTexCoords","_unstashTexCoords","_stashColors","_stashedColors","_unstashColors","isVisible","_applyRelativeDimFuncs","pw","calculatedX","parentW","__parent","ta","td","tb","tc","pr","updateTreeOrder","useRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","renderToTextureCount","cleared","ignore","cache","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","renderTextureReused","setTexturizer","colorize","ptr","m","j","sort","mergeResult","getCornerPoints","getRenderTextureCoords","relX","relY","getAbsoluteCoords","collectAtCoord","inBound","inScissor","tx","ty","sc","_ensureLayout","EventEmitter","_hasEventListeners","on","listener","_eventFunction","_eventListeners","current","combiner","once","wrapper","arg1","arg2","arg3","off","__originalFunc","listeners","_iterator","_createForOfIteratorHelper","_step","l","map","removeListener","emit","listenerCount","removeAllListeners","object","_i","_arr","_toConsumableArray","addAsMixin","cls","Shader","coreContext","_initialized","_elements","addElement","removeElement","cleanup","redraw","useDefault","addEmpty","create","renderer","createShader","isShader","isValidShaderType","getWebGL","getC2d","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","incActiveCount","decActiveCount","_checkForNewerReusableTextureSource","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","_getLookupId","_getSourceLoader","_getIsValid","_updateSource","addUpdateSourceTexture","getTextureSource","getReusableTextureSource","newSource","oldSource","loadError","_ref","_ref$type","_ref$w","_ref$h","_ref$clipX","clipX","_ref$clipY","clipY","_clearResizeMode","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","enableClipping","disableClipping","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","getNonDefaults","nonDefaults","precision","isAutosizeTexture","isTexture","ImageTexture","_Texture","_inherits","_super","_createSuper","call","_src","src","fc","charCodeAt","platform","loadSrcTexture","_get","_getPrototypeOf","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","getPrecision","setFontProperties","font","getFontSetting","fontFace","fontStyle","fontSize","fontWeight","textBaseline","_load","document","fonts","fontSetting","check","text","catch","then","draw","loadPromise","drawText","_draw","_calculateRenderInfo","offsetY","lineHeight","wordWrapWidth","cutSx","cutEx","cutSy","cutEy","letterSpacing","textIndent","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","wrapText","maxLines","usedLines","otherLines","measureText","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","textAlign","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","drawLine","prevShadowSettings","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textColor","fillText","textSplit","word","suffixWidth","wordLen","wordWidth","cutoffIndex","truncWordWidth","substring","indent","space","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","reduce","acc","concat","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","_iterator2","_step2","_iterator3","_step3","firstWord","lastWord","shift","isSpace","pop","_iterator4","_step4","apply","lastLineText","filter","_iterator5","_step5","spl","alignLine","_iterator6","_step6","_iterator7","_step7","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","_iterator8","_step8","_iterator9","_step9","letters","_iterator10","_step10","tokenizeString","tokens","italic","bold","colorStack","colorRegexp","test","matched","exec","o","applyFontStyle","parsed","_iterator11","_step11","_iterator12","_step12","_getBreakIndex","breakIndex","_this$_getBreakIndex","_objectSpread","totalWidth","_iterator13","_step13","initialX","prevWidth","prevX","_iterator14","_step14","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontWeight","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","_set","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","texParams","sharpCfg","sharpen","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","_EventEmitter","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","start","targetValue","isAttached","_updateDrawValue","reset","delay","finish","stop","removeActive","pause","play","addActive","getDrawValue","attached","isRunning","progress","dt","delayLeft","duration","invokeListeners","updateTargetValue","timingFunctionImpl","_timingFunctionImpl","startValue","skipDelay","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","replaceByRef","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","getAt","remove","removeAt","onRemove","clear","onSync","isItem","_getRefs","clearRef","setRef","_setByObject","_setByArray","refs","crefs","cref","idx","_equalsArray","array","same","marker","newItems","_setItems","prevItems","ElementChildList","_ObjectList","_connectParent","prevChildList","childList","_setParent","gc","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","_throwError","removeTag","_addTag","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","getDepth","depth","getAncestor","getAncestors","getAncestorAtDepth","levels","getSharedAncestor","o1","o2","l1","l2","_isAttached","_isEnabled","_isActive","withinBoundsMargin","newAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","_setActiveFlag","_unsetActiveFlag","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","_onInactive","_onResize","_getRenderWidth","_getRenderHeight","textureIsLoaded","loadTexture","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","unknownSize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","tag","parentTreeTags","tags","tagSet","_loop","comp","Map","_loop2","_getByTag","getTags","setTags","removes","adds","hasTag","currentTags","addTag","list","_tag","mtag","values","res","level","resn","stag","sel","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","getLocationString","localTags","getSettings","getPrettyString","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","_collision","collision","_allowChildrenAccess","hasChildren","rectangleTexture","enableTextTexture","onUpdate","onAfterCalcs","onAfterUpdate","forceUpdate","rtt","getTexture","paths","firstCharCode","message","animation","animations","createAnimation","transition","_getTransition","_setTransition","setSmooth","fastForward","_transitions","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","getSmooth","toJSON","tree","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","isColorProperty","toLowerCase","properties","props","getBoolean","StateMachine","setupStateMachine","fire","event","_hasMethod","_len","_key","_getState","_state","__path","_inState","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","_hasMember","member","_setState","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","context","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","_stateIndex","__index","_initStateMachine","_routedType","_getMostSpecificHandledMember","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","StateMachineRouter","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","_this8","_this9","stateMap","_this10","_getStateMemberNames","_this11","_getStateMemberNamesForType","_this12","_isStateLocalMember","_createStateMap","_addState","parentState","_this13","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","_Element","tagRoot","_assertThisInitialized","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","application","updateFocusPath","_refocus","__bindProperty","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","_step$value","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","_focus","newTarget","prevTarget","_unfocus","_focusChange","_getFocused","_setFocusSettings","_handleFocusSettings","hasFinalFocus","_focusPath","hasFocus","seekAncestorByType","cparent","getSharedAncestorComponent","ancestor","isComponent","signal","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","fireAncestors","startsWith","_len2","_key2","_doFireAncestors","bindProp","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","collectSubComponents","subs","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","getElement","getElementCore","getTextureWidth","getTextureHeight","WebGLCoreQuadList","_CoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","getAttribsDataByteOffset","getQuadContents","CoreQuadOperation","shaderOwner","scissor","quads","getElementWidth","renderWidth","getElementHeight","renderHeight","WebGLCoreQuadOperation","_CoreQuadOperation","extraAttribsDataByteOffset","getNormalRenderTextureCoords","coords","getProjection","renderExec","_projection","projection","CoreRenderExecutor","destroy","_reset","_bindRenderTexture","_setScissor","_clearRenderTexture","execute","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_CoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","getScissor","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","compile","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getUniformLocation","location","getAttribLocation","_valueEquals","_valueClone","setUniformValue","glFunction","clonedValue","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","WebGLShader","_Shader","shaderPrograms","glProgram","initialize","_uniform","_attrib","_setUniform","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getVertexAttribPointerOffset","setExtraAttribsInBuffer","_getProjection","getFlipY","DefaultShader","_WebGLShader","vertexAttribPointer","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","copyRenderTexture","WebGLRenderer","_Renderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","getCompressedTextureExtensions","shaderProgram","createCoreRenderExecutor","createCoreRenderState","createRenderTexture","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","freeRenderTexture","deleteFramebuffer","deleteTexture","_getBytesPerPixel","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","bytesPerPixel","mca","cx","cy","extra","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","setRenderContext","setSimpleTc","setWhite","getRenderContext","getSimpleTc","getWhite","C2dCoreQuadOperation","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","globalCompositeOperation","beginPath","rect","closePath","fill","_restoreContext","restore","save","_equalScissorAreas","clip","C2dShader","_C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","_addMemoryUsage","delta","addMemoryUsage","_delete","_hasCache","_getCache","prevMemUsage","memoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","SparkShader","elementPostion","paint","SparkRenderer","_WebGLRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","_ref2","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","startLoop","loop","stopLoop","switchLoop","setInterval","updateFrame","idleFrame","lp","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","handleKtxLoad","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","includes","imageSize","handlePvrLoad","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","Image","crossOrigin","removeAttribute","createWebGLContext","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","createCanvasContext","getHrTime","performance","now","nextFrame","changes","registerKeydownHandler","keyhandler","_keydownListener","registerKeyupHandler","_keyupListener","removeEventListener","registerClickHandler","clickHandler","_clickListener","registerHoverHandler","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","_getDefaultFlag","cap","DITHER","setFlag","def","setBuffer","change","setFramebuffer","setRenderbuffer","setProgram","program","va","equal","setActiveTexture","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","setPixelStorei","pname","param","_getPixelStoreiIndex","migrate","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","_initStateManager","switchState","$useProgram","$bindBuffer","$bindFramebuffer","$bindRenderbuffer","$enable","$disable","$viewport","$scissor","$disableVertexAttribArray","$enableVertexAttribArray","$vertexAttribPointer","normalized","stride","$activeTexture","$bindTexture","$pixelStorei","$stencilFuncSeparate","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","$stencilMaskSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","$stencilOpSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","$blendColor","red","green","blue","_blendColor","$blendEquation","_blendEquation","$blendEquationSeparate","modeRGB","modeAlpha","_blendEquationSeparate","$blendFunc","sfactor","dfactor","_blendFunc","$blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","$clearColor","_clearColor","$clearDepth","_clearDepth","$clearStencil","_clearStencil","$colorMask","_colorMask","$cullFace","_cullFace","$depthFunc","_depthFunc","$depthMask","flag","_depthMask","$depthRange","zNear","zFar","_depthRange","$frontFace","_frontFace","$lineWidth","_lineWidth","$polygonOffset","factor","units","_polygonOffset","$sampleCoverage","invert","_sampleCoverage","$stencilFunc","_stencilFunc","$stencilMask","_stencilMask","$stencilOp","_stencilOp","$vertexAttrib1f","indx","_vertexAttrib1f","$vertexAttrib1fv","_vertexAttrib1fv","$vertexAttrib2f","_vertexAttrib2f","$vertexAttrib2fv","_vertexAttrib2fv","$vertexAttrib3f","z","_vertexAttrib3f","$vertexAttrib3fv","_vertexAttrib3fv","$vertexAttrib4f","_vertexAttrib4f","$vertexAttrib4fv","_vertexAttrib4fv","__proto__","method","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","_cleanupLookupMap","remainingTextureSources","ts","_freeManagedTextureSource","managed","TextureThrottler","_remove","_sources","_data","processSome","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","prec","_createRenderTexture","freeUnusedRenderTextures","maxAge","limit","TransitionSettings","_timingFunction","TransitionManager","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","getValue","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getResetValue","getAnimatedElements","sv","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","replay","STOPPED","stopNow","isPaused","isPlaying","isStopping","isFinished","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","isWebgl","isC2d","opt","setApplication","app","resume","_updatingFrame","_calculateDt","fixedDt","drawFrame","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","addServiceProvider","serviceprovider","getChildrenByPosition","Application","_Component","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","_receiveKeydown","_receiveKeyup","_receiveClick","_receiveHover","_recieveScrollWheel","__options","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","focusOverridden","unfocusedElement","focusedComponent","focusSettings","defaultSetFocusSettings","defaultHandleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","newParts","focusTopDownEvent","events","focusPath","_path$i","returnValue","focusBottomUpEvent","_path$i2","keyCode","hasTimer","longpress","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","_child$core$_worldCon","localCoords","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_ret","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","_ref$lookupId","Tools","getCanvasTexture","canvasFactory","content","getRoundRect","radius","strokeWidth","strokeColor","fillColor","createRoundRect","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","getShadowRect","blur","margin","createShadowRect","getSvgTexture","url","createSvg","img","ObjMerger","isMf","__mf","mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","ObjectListProxy","ObjectListWrapper","_ObjectListProxy","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_thisSuper","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","getAxisPosition","ps","wasVisible","invisibleItem","getWrapper","setPrevious","setNext","_ObjectListWrapper","_super2","checkStarted","ri","LinearBlurShader","_DefaultShader","_direction","_kernelRadius","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_Component2","_textwrap","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","getSpline","_multiSpline","_Component3","_super3","_layers","_output","_buildLayers","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_super4","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","_WebGLDefaultShader","C2dGrayscaleShader","WebGLDefaultShader","_C2dDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","getWebGLImpl","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":"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"}