{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mjs","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StageUtils {\n\n    static mergeNumbers(v1, v2, p) {\n        return v1 * p + v2 * (1 - p);\n    };\n\n    static rgb(r, g, b) {\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\n    };\n\n    static rgba(r, g, b, a) {\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\n    };\n\n    static getRgbString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    static getRgbaString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        let a = ((color / 16777216) | 0) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaStringFromArray(color) {\n        let r = Math.floor(color[0] * 255);\n        let g = Math.floor(color[1] * 255);\n        let b = Math.floor(color[2] * 255);\n        let a = Math.floor(color[3] * 255) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r / 255, g / 255, b / 255, a / 255];\n    };\n\n    static getRgbComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        return [r / 255, g / 255, b / 255];\n    };\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static mergeMultiColors(c, p) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1 * p[i];\n            g += g1 * p[i];\n            b += b1 * p[i];\n            a += a1 * p[i];\n            t += p[i];\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeMultiColorsEqual(c) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1;\n            g += g1;\n            b += b1;\n            a += a1;\n            t += 1.0;\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeColorAlpha(c, alpha) {\n        let a = ((c / 16777216 | 0) * alpha) | 0;\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\n            (a << 24);\n    };\n\n    static rad(deg) {\n        return deg * (Math.PI / 180);\n    };\n\n    static getTimingBezier(a, b, c, d) {\n        let xc = 3.0 * a;\n        let xb = 3.0 * (c - a) - xc;\n        let xa = 1.0 - xc - xb;\n        let yc = 3.0 * b;\n        let yb = 3.0 * (d - b) - yc;\n        let ya = 1.0 - yc - yb;\n\n        return function (time) {\n            if (time >= 1.0) {\n                return 1;\n            }\n            if (time <= 0) {\n                return 0;\n            }\n\n            let t = 0.5, cbx, cbxd, dx;\n\n            for (let it = 0; it < 20; it++) {\n                cbx = t * (t * (t * xa + xb) + xc);\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                // Cubic bezier derivative.\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\n                    // Problematic. Fall back to binary search method.\n                    break;\n                }\n\n                t += dx / cbxd;\n            }\n\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n            let minT = 0;\n            let maxT = 1;\n            for (let it = 0; it < 20; it++) {\n                t = 0.5 * (minT + maxT);\n\n                cbx = t * (t * (t * xa + xb) + xc);\n\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    // Solution found!\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                if (dx < 0) {\n                    maxT = t;\n                } else {\n                    minT = t;\n                }\n            }\n\n        };\n    };\n\n    static getTimingFunction(str) {\n        switch (str) {\n            case \"linear\":\n                return function (time) {\n                    return time\n                };\n            case \"ease\":\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\n            case \"ease-in\":\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\n            case \"ease-out\":\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\n            case \"ease-in-out\":\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\n            case \"step-start\":\n                return function () {\n                    return 1\n                };\n            case \"step-end\":\n                return function (time) {\n                    return time === 1 ? 1 : 0;\n                };\n            default:\n                let s = \"cubic-bezier(\";\n                if (str && str.indexOf(s) === 0) {\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\n                    if (parts.length !== 4) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n                    let a = parseFloat(parts[0]);\n                    let b = parseFloat(parts[1]);\n                    let c = parseFloat(parts[2]);\n                    let d = parseFloat(parts[3]);\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n\n                    return StageUtils.getTimingBezier(a, b, c, d);\n                } else {\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time\n                    };\n                }\n        }\n    };\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value === 'string';\n    }\n\n    static clone(v) {\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\n            return Utils.getDeepClone(v);\n        } else {\n            // Copy by value.\n            return v;\n        }\n    }\n\n    static cloneObjShallow(obj) {\n        let keys = Object.keys(obj);\n        let clone = {}\n        for (let i = 0; i < keys.length; i++) {\n            clone[keys[i]] = obj[keys[i]];\n        }\n        return clone;\n    }\n\n    static merge(obj1, obj2) {\n        let keys = Object.keys(obj2);\n        for (let i = 0; i < keys.length; i++) {\n            obj1[keys[i]] = obj2[keys[i]];\n        }\n        return obj1;\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object' || type === 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object;\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static getModuloIndex(index, len) {\n        if (len === 0) return index;\n        while (index < 0) {\n            index += Math.ceil(-index / len) * len;\n        }\n        index = index % len;\n        return index;\n    }\n\n    static getDeepClone(obj) {\n        let i, c;\n        if (Utils.isFunction(obj)) {\n            // Copy functions by reference.\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            c = [];\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else if (Utils.isObject(obj)) {\n            c = {}\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else {\n            return obj;\n        }\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false;\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\n        } else {\n            return v1 === v2;\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false;\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false;\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static setToArray(s) {\n        let result = [];\n        s.forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    }\n\n    static iteratorToArray(iterator) {\n        let result = [];\n        let iteratorResult = iterator.next();\n        while (!iteratorResult.done) {\n            result.push(iteratorResult.value);\n            iteratorResult = iterator.next();\n        }\n        return result;\n    }\n\n    static isUcChar(charcode) {\n        return charcode >= 65 && charcode <= 90;\n    }\n\n}\n\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Base {\n\n    static defaultSetter(obj, name, value) {\n        obj[name] = value;\n    }\n\n    static patchObject(obj, settings) {\n        if (!Utils.isObjectLiteral(settings)) {\n            console.error(\"[Lightning] Settings must be object literal\");\n        } else {\n            let names = Object.keys(settings);\n            for (let i = 0, n = names.length; i < n; i++) {\n                let name = names[i];\n\n                this.patchObjectProperty(obj, name, settings[name]);\n            }\n        }\n    }\n\n    static patchObjectProperty(obj, name, value) {\n        let setter = obj.setSetting || Base.defaultSetter;\n\n        if (name.charAt(0) === \"_\") {\n            // Disallow patching private variables.\n            if (name !== \"__create\") {\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\n            }\n        } else if (name !== \"type\") {\n            // Type is a reserved keyword to specify the class type on creation.\n            if (Utils.isFunction(value) && value.__local) {\n                // Local function (Base.local(s => s.something))\n                value = value.__local(obj);\n            }\n\n            setter(obj, name, value);\n        }\n    }\n\n    static local(func) {\n        // This function can be used as an object setting, which is called with the target object.\n        func.__local = true;\n    }\n\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SpacingCalculator {\n\n    static getSpacing(mode, numberOfItems, remainingSpace) {\n        const itemGaps = (numberOfItems - 1);\n        let spacePerGap;\n\n        let spacingBefore, spacingBetween;\n\n        switch(mode) {\n            case \"flex-start\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            case \"flex-end\":\n                spacingBefore = remainingSpace;\n                spacingBetween = 0;\n                break;\n            case \"center\":\n                spacingBefore = remainingSpace / 2;\n                spacingBetween = 0;\n                break;\n            case \"space-between\":\n                spacingBefore = 0;\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\n                break;\n            case \"space-around\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 1);\n                    spacingBefore = 0.5 * spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"space-evenly\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 2);\n                    spacingBefore = spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"stretch\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            default:\n                throw new Error(\"Unknown mode: \" + mode);\n        }\n\n        return {spacingBefore, spacingBetween}\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\n\nexport default class ContentAligner {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._totalCrossAxisSize = 0;\n    }\n\n    get _lines() {\n        return this._layout._lines;\n    }\n\n    init() {\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\n    }\n\n    align() {\n        const crossAxisSize = this._layout.crossAxisSize;\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\n\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\n\n        const lines = this._lines;\n\n        const mode = this._layout._flexContainer.alignContent;\n        let growSize = 0;\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\n            growSize = remainingSpace / lines.length;\n        }\n\n        let currentPos = spacingBefore;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const crossAxisLayoutOffset = currentPos;\n            const aligner = lines[i].createItemAligner();\n\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\n\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\n\n            aligner.align();\n\n            if (aligner.recursiveResizeOccured) {\n                lines[i].setItemPositions();\n            }\n\n            currentPos += finalCrossAxisLayoutSize;\n            currentPos += spacingBetween;\n        }\n    }\n\n    get totalCrossAxisSize() {\n        return this._totalCrossAxisSize;\n    }\n\n    _getTotalCrossAxisSize() {\n        const lines = this._lines;\n        let total = 0;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const line = lines[i];\n            total += line.crossAxisLayoutSize;\n        }\n        return total;\n    }\n\n    _getSpacing(remainingSpace) {\n        const mode = this._layout._flexContainer.alignContent;\n        const numberOfItems = this._lines.length;\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class FlexUtils {\n\n    static getParentAxisSizeWithPadding(item, horizontal) {\n        const target = item.target;\n        const parent = target.getParent();\n        if (!parent) {\n            return 0;\n        } else {\n            const flexParent = item.flexParent;\n            if (flexParent) {\n                // Use pending layout size.\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\n            } else {\n                // Use 'absolute' size.\n                return horizontal ? parent.w : parent.h;\n            }\n        }\n    }\n\n    static getRelAxisSize(item, horizontal) {\n        if (horizontal) {\n            if (item.funcW) {\n                if (this._allowRelAxisSizeFunction(item, true)) {\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalWidth;\n            }\n        } else {\n            if (item.funcH) {\n                if (this._allowRelAxisSizeFunction(item, false)) {\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalHeight;\n            }\n        }\n    }\n\n    static _allowRelAxisSizeFunction(item, horizontal) {\n        const flexParent = item.flexParent;\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\n            return false;\n        }\n        return true;\n    }\n\n    static isZeroAxisSize(item, horizontal) {\n        if (horizontal) {\n            return !item.originalWidth && !item.funcW;\n        } else {\n            return !item.originalHeight && !item.funcH;\n        }\n    }\n\n    static getAxisLayoutPos(item, horizontal) {\n        return horizontal ? item.x : item.y;\n    }\n\n    static getAxisLayoutSize(item, horizontal) {\n        return horizontal ? item.w : item.h;\n    }\n\n    static setAxisLayoutPos(item, horizontal, pos) {\n        if (horizontal) {\n            item.x = pos;\n        } else {\n            item.y = pos;\n        }\n    }\n\n    static setAxisLayoutSize(item, horizontal, size) {\n        if (horizontal) {\n            item.w = size;\n        } else {\n            item.h = size;\n        }\n    }\n\n    static getAxisMinSize(item, horizontal) {\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\n\n        let flexItemMinSize = 0;\n        if (item.isFlexItemEnabled()) {\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\n        }\n\n        const hasLimitedMinSize = (flexItemMinSize > 0);\n        if (hasLimitedMinSize) {\n            minSize = Math.max(minSize, flexItemMinSize);\n        }\n        return minSize;\n    }\n\n    static getPlainAxisMinSize(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            return item._flex._layout.getAxisMinSize(horizontal);\n        } else {\n            const isShrinkable = (item.flexItem.shrink !== 0);\n            if (isShrinkable) {\n                return 0;\n            } else {\n                return this.getRelAxisSize(item, horizontal);\n            }\n        }\n    }\n\n    static resizeAxis(item, horizontal, size) {\n        if (item.isFlexEnabled()) {\n            const isMainAxis = (item._flex._horizontal === horizontal);\n            if (isMainAxis) {\n                item._flex._layout.resizeMainAxis(size);\n            } else {\n                item._flex._layout.resizeCrossAxis(size);\n            }\n        } else {\n            this.setAxisLayoutSize(item, horizontal, size);\n        }\n    }\n\n\n    static getPaddingOffset(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingLeft;\n            } else {\n                return flex.paddingTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalPadding(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingRight + flex.paddingLeft;\n            } else {\n                return flex.paddingTop + flex.paddingBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getMarginOffset(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalMargin(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginRight + flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop + flexItem.marginBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeShrinker {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._shrunkSize = 0;\n    }\n\n    shrink(amount) {\n        this._shrunkSize = 0;\n\n        this._amountRemaining = amount;\n        let totalShrinkAmount = this._getTotalShrinkAmount();\n        if (totalShrinkAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const shrinkAmount = flexItem.shrink;\n                    const isShrinkableItem = (shrinkAmount > 0);\n                    if (isShrinkableItem) {\n                        let shrink = shrinkAmount * amountPerShrink;\n                        const minSize = flexItem._getMainAxisMinSize();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (size > minSize) {\n                            const maxShrink = size - minSize;\n                            const isFullyShrunk = (shrink >= maxShrink);\n                            if (isFullyShrunk) {\n                                shrink = maxShrink;\n\n                                // Destribute remaining amount over the other flex items.\n                                totalShrinkAmount -= shrinkAmount;\n                            }\n\n                            const finalSize = size - shrink;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._shrunkSize += shrink;\n                            this._amountRemaining -= shrink;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalShrinkAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.shrink) {\n                const minSize = flexItem._getMainAxisMinSize();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully shrunk.\n                if (size > minSize) {\n                    total += flexItem.shrink;\n                }\n            }\n        }\n        return total;\n    }\n\n    getShrunkSize() {\n        return this._shrunkSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeGrower {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._grownSize = 0;\n    }\n\n    grow(amount) {\n        this._grownSize = 0;\n\n        this._amountRemaining = amount;\n        let totalGrowAmount = this._getTotalGrowAmount();\n        if (totalGrowAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const growAmount = flexItem.grow;\n                    const isGrowableItem = (growAmount > 0);\n                    if (isGrowableItem) {\n                        let grow = growAmount * amountPerGrow;\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (maxSize > 0) {\n                            if (size >= maxSize) {\n                                // Already fully grown.\n                                grow = 0;\n                            } else {\n                                const maxGrow = maxSize - size;\n                                const isFullyGrown = (grow >= maxGrow);\n                                if (isFullyGrown) {\n                                    grow = maxGrow;\n\n                                    // Destribute remaining amount over the other flex items.\n                                    totalGrowAmount -= growAmount;\n                                }\n                            }\n                        }\n\n                        if (grow > 0) {\n                            const finalSize = size + grow;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._grownSize += grow;\n                            this._amountRemaining -= grow;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalGrowAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.grow) {\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully grown.\n                if (maxSize === 0 || size < maxSize) {\n                    total += flexItem.grow;\n                }\n            }\n        }\n        return total;\n    }\n\n    getGrownSize() {\n        return this._grownSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\n\nexport default class ItemPositioner {\n\n    constructor(lineLayout) {\n        this._line = lineLayout;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    position() {\n        const {spacingBefore, spacingBetween} = this._getSpacing();\n\n        let currentPos = spacingBefore;\n\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n\n            item.flexItem._setMainAxisLayoutPos(currentPos);\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n            currentPos += spacingBetween;\n        }\n    }\n\n    _getSpacing() {\n        const remainingSpace = this._line._availableSpace;\n        let mode = this._layout._flexContainer.justifyContent;\n        const numberOfItems = this._line.numberOfItems;\n\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ItemAligner {\n\n    constructor(line) {\n        this._line = line;\n        this._crossAxisLayoutSize = 0;\n        this._crossAxisLayoutOffset = 0;\n        this._alignItemsSetting = null;\n        this._recursiveResizeOccured = false;\n        this._isCrossAxisFitToContents = false;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    setCrossAxisLayoutSize(size) {\n        this._crossAxisLayoutSize = size;\n    }\n\n    setCrossAxisLayoutOffset(offset) {\n        this._crossAxisLayoutOffset = offset;\n    }\n\n    align() {\n        this._alignItemsSetting = this._flexContainer.alignItems;\n\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\n\n        this._recursiveResizeOccured = false;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            this._alignItem(item);\n        }\n    }\n\n    get recursiveResizeOccured() {\n        return this._recursiveResizeOccured;\n    }\n\n    _alignItem(item) {\n        const flexItem = item.flexItem;\n        let align = flexItem.alignSelf || this._alignItemsSetting;\n\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\n            align = \"flex-start\";\n        }\n\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\n            if (flexItem._hasRelCrossAxisSize()) {\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\n                flexItem._resetCrossAxisLayoutSize();\n            }\n        }\n\n        switch(align) {\n            case \"flex-start\":\n                this._alignItemFlexStart(flexItem);\n                break;\n            case \"flex-end\":\n                this._alignItemFlexEnd(flexItem);\n                break;\n            case \"center\":\n                this._alignItemFlexCenter(flexItem);\n                break;\n            case \"stretch\":\n                this._alignItemStretch(flexItem);\n                break;\n        }\n    }\n\n    _alignItemFlexStart(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n    }\n\n    _alignItemFlexEnd(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\n    }\n\n    _alignItemFlexCenter(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\n    }\n\n    _alignItemStretch(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\n\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\n        if (crossAxisMinSizeSetting > 0) {\n            size = Math.max(size, crossAxisMinSizeSetting);\n        }\n\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\n        if (crossAxisMaxSizeSettingEnabled) {\n            size = Math.min(size, crossAxisMaxSizeSetting);\n        }\n\n        flexItem._resizeCrossAxis(size);\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\n\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\n        if (recursiveResize) {\n            // Recursive resize can happen when this flex item has the opposite direction than the container\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\n            // item may decrease. If it does so, we must re-justify-content the complete line.\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\n            // as slow layout or endless loops.\n            this._recursiveResizeOccured = true;\n        }\n    }\n\n    _preventStretch(flexItem) {\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\n        return hasFixedCrossAxisSize && !forceStretch;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SizeShrinker from \"./SizeShrinker.mjs\";\nimport SizeGrower from \"./SizeGrower.mjs\";\nimport ItemPositioner from \"./ItemPositioner.mjs\";\nimport ItemAligner from \"./ItemAligner.mjs\";\n\nexport default class LineLayout {\n\n    constructor(layout, startIndex, endIndex, availableSpace) {\n        this._layout = layout;\n        this.items = layout.items;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this._availableSpace = availableSpace;\n    }\n\n    performLayout() {\n        this._setItemSizes();\n        this.setItemPositions();\n        this._calcLayoutInfo();\n    }\n\n    _setItemSizes() {\n        if (this._availableSpace > 0) {\n            this._growItemSizes(this._availableSpace);\n        } else if (this._availableSpace < 0) {\n            this._shrinkItemSizes(-this._availableSpace);\n        }\n    }\n\n    _growItemSizes(amount) {\n        const grower = new SizeGrower(this);\n        grower.grow(amount);\n        this._availableSpace -= grower.getGrownSize();\n    }\n\n    _shrinkItemSizes(amount) {\n        const shrinker = new SizeShrinker(this);\n        shrinker.shrink(amount);\n        this._availableSpace += shrinker.getShrunkSize();\n    }\n\n    setItemPositions() {\n        const positioner = new ItemPositioner(this);\n        positioner.position();\n    }\n\n    createItemAligner() {\n        return new ItemAligner(this);\n    }\n\n    _calcLayoutInfo() {\n        this._calcCrossAxisMaxLayoutSize();\n    }\n\n    getMainAxisMinSize() {\n        let mainAxisMinSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\n        }\n        return mainAxisMinSize;\n    }\n    \n    get numberOfItems() {\n        return this.endIndex - this.startIndex + 1;\n    }\n\n    get crossAxisLayoutSize() {\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\n        if (shouldFitToContents) {\n            return this._crossAxisMaxLayoutSize;\n        } else {\n            return this._layout.crossAxisSize;\n        }\n    }\n\n    _calcCrossAxisMaxLayoutSize() {\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\n    }\n\n    _getCrossAxisMaxLayoutSize() {\n        let crossAxisMaxSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\n        }\n        return crossAxisMaxSize;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LineLayout from \"./line/LineLayout.mjs\";\n\n/**\n * Distributes items over layout lines.\n */\nexport default class LineLayouter {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    get lines() {\n        return this._lines;\n    }\n\n    get mainAxisMinSize() {\n        if (this._mainAxisMinSize === -1) {\n            this._mainAxisMinSize = this._getMainAxisMinSize();\n        }\n        return this._mainAxisMinSize;\n    }\n\n    get crossAxisMinSize() {\n        if (this._crossAxisMinSize === -1) {\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\n        }\n        return this._crossAxisMinSize;\n    }\n\n    get mainAxisContentSize() {\n        return this._mainAxisContentSize;\n    }\n\n    layoutLines() {\n        this._setup();\n        const items = this._layout.items;\n        const wrap = this._layout.isWrapping();\n\n        let startIndex = 0;\n        let i;\n        const n = items.length;\n        for (i = 0; i < n; i++) {\n            const item = items[i];\n\n            this._layoutFlexItem(item);\n\n            // Get predicted main axis size.\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n\n            if (wrap && (i > startIndex)) {\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\n                if (isOverflowing) {\n                    this._layoutLine(startIndex, i - 1);\n                    this._curMainAxisPos = 0;\n                    startIndex = i;\n                }\n            }\n\n            this._addToMainAxisPos(itemMainAxisSize);\n        }\n\n        if (startIndex < i) {\n            this._layoutLine(startIndex, i - 1);\n        }\n    }\n\n    _layoutFlexItem(item) {\n        if (item.isFlexEnabled()) {\n            item.flexLayout.updateTreeLayout();\n        } else {\n            item.flexItem._resetLayoutSize();\n        }\n    }\n\n    _setup() {\n        this._mainAxisSize = this._layout.mainAxisSize;\n        this._curMainAxisPos = 0;\n        this._maxMainAxisPos = 0;\n        this._lines = [];\n\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    _addToMainAxisPos(itemMainAxisSize) {\n        this._curMainAxisPos += itemMainAxisSize;\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\n            this._maxMainAxisPos = this._curMainAxisPos;\n        }\n    }\n\n    _layoutLine(startIndex, endIndex) {\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\n        line.performLayout();\n        this._lines.push(line);\n\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\n            this._mainAxisContentSize = this._curMainAxisPos;\n        }\n    }\n\n    _getAvailableMainAxisLayoutSpace() {\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\n            return 0;\n        } else {\n            return this._mainAxisSize - this._curMainAxisPos;\n        }\n    }\n\n    _getCrossAxisMinSize() {\n        let crossAxisMinSize = 0;\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\n        }\n        return crossAxisMinSize;\n    }\n\n    _getMainAxisMinSize() {\n        if (this._lines.length === 1) {\n            return this._lines[0].getMainAxisMinSize();\n        } else {\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\n            return this._layout.mainAxisSize;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexUtils from \"../FlexUtils.mjs\";\n\nexport default class ItemCoordinatesUpdater {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._isReverse = this._flexContainer._reverse;\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    finalize() {\n        const parentFlex = this._layout.getParentFlexContainer();\n        if (parentFlex) {\n            // We must update it from the parent to set padding offsets and reverse position.\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\n            updater._finalizeItemAndChildren(this._flexContainer.item);\n        } else {\n            this._finalizeRoot();\n            this._finalizeItems();\n        }\n    }\n\n    _finalizeRoot() {\n        const item = this._flexContainer.item;\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        w += this._layout._getHorizontalPadding();\n        h += this._layout._getVerticalPadding();\n\n        item.clearRecalcFlag();\n\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItems() {\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const validCache = this._validateItemCache(item);\n\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\n            this._finalizeItem(item);\n\n            if (!validCache) {\n                this._finalizeItemChildren(item);\n            }\n        }\n    }\n\n    _validateItemCache(item) {\n        if (item.recalc === 0) {\n            if (item.isFlexEnabled()) {\n                const layout = item._flex._layout;\n\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\n                if (dimensionsMatchPreviousResult) {\n                    // Cache is valid.\n                    return true;\n                } else {\n                    const crossAxisSize = layout.crossAxisSize;\n                    layout.performResizeMainAxis(layout.mainAxisSize);\n                    layout.performResizeCrossAxis(crossAxisSize);\n                }\n            }\n        }\n        return false;\n    }\n\n    _finalizeItemAndChildren(item) {\n        this._finalizeItem(item);\n        this._finalizeItemChildren(item);\n    }\n\n    _finalizeItem(item) {\n        if (this._isReverse) {\n            this._reverseMainAxisLayoutPos(item);\n        }\n\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        x += this._horizontalPaddingOffset;\n        y += this._verticalPaddingOffset;\n\n        const flex = item.flex;\n        if (flex) {\n            w += item._flex._layout._getHorizontalPadding();\n            h += item._flex._layout._getVerticalPadding();\n        }\n\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            x += flexItem._getHorizontalMarginOffset();\n            y += flexItem._getVerticalMarginOffset();\n        }\n\n        item.clearRecalcFlag();\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItemChildren(item) {\n        const flex = item._flex;\n        if (flex) {\n            const updater = new ItemCoordinatesUpdater(flex._layout);\n            updater._finalizeItems();\n        }\n    }\n\n    _reverseMainAxisLayoutPos(item) {\n        if (item._reversed && item._recalc == 0) {\n            item._reversed = false;\n        }\n        if (!item._reversed) {\n            const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\n            const reversedPos = this._layout.mainAxisSize - endPos;\n            item.flexItem._setMainAxisLayoutPos(reversedPos);\n            if (item._recalc != 0) {\n                item._reversed = true;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ContentAligner from \"./ContentAligner.mjs\";\nimport FlexUtils from \"../FlexUtils.mjs\";\nimport LineLayouter from \"./LineLayouter.mjs\";\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\n\n/**\n * Layouts a flex container (and descendants).\n */\nexport default class FlexLayout {\n\n    constructor(flexContainer) {\n        this._flexContainer = flexContainer;\n\n        this._lineLayouter = new LineLayouter(this);\n\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n\n        this._cachedMainAxisSizeAfterLayout = 0;\n        this._cachedCrossAxisSizeAfterLayout = 0;\n\n        this._shrunk = false;\n    }\n\n    get shrunk() {\n        return this._shrunk;\n    }\n\n    get recalc() {\n        return this.item.recalc;\n    }\n\n    layoutTree() {\n        const isSubTree = (this.item.flexParent !== null);\n        if (isSubTree) {\n            // Use the dimensions set by the parent flex tree.\n            this._updateSubTreeLayout();\n        } else {\n            this.updateTreeLayout();\n        }\n        this.updateItemCoords();\n    }\n\n    updateTreeLayout() {\n        if (this.recalc) {\n            this._performUpdateLayoutTree();\n        } else {\n            this._performUpdateLayoutTreeFromCache();\n        }\n    }\n\n    _performUpdateLayoutTree() {\n        this._setInitialAxisSizes();\n        this._layoutAxes();\n        this._refreshLayoutCache();\n    }\n\n    _refreshLayoutCache() {\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\n    }\n\n    _performUpdateLayoutTreeFromCache() {\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\n        if (sizeMightHaveChanged) {\n            // Update after all.\n            this.item.enableLocalRecalcFlag();\n            this._performUpdateLayoutTree();\n        } else {\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\n        }\n    }\n\n    updateItemCoords() {\n        const updater = new ItemCoordinatesUpdater(this);\n        updater.finalize();\n    }\n\n    _updateSubTreeLayout() {\n        // The dimensions of this container are guaranteed not to have changed.\n        // That's why we can safely 'reuse' those and re-layout the contents.\n        const crossAxisSize = this.crossAxisSize;\n        this._layoutMainAxis();\n        this.performResizeCrossAxis(crossAxisSize);\n    }\n\n    _setInitialAxisSizes() {\n        if (this.item.isFlexItemEnabled()) {\n            this.item.flexItem._resetLayoutSize();\n        } else {\n            this.mainAxisSize = this._getMainAxisBasis();\n            this.crossAxisSize = this._getCrossAxisBasis();\n        }\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n        this._shrunk = false;\n    }\n\n    _layoutAxes() {\n        this._layoutMainAxis();\n        this._layoutCrossAxis();\n    }\n\n    /**\n     * @pre mainAxisSize should exclude padding.\n     */\n    _layoutMainAxis() {\n        this._layoutLines();\n        this._fitMainAxisSizeToContents();\n    }\n\n    _layoutLines() {\n        this._lineLayouter.layoutLines();\n    }\n\n    get _lines() {\n        return this._lineLayouter.lines;\n    }\n\n    _fitMainAxisSizeToContents() {\n        if (!this._resizingMainAxis) {\n            if (this.isMainAxisFitToContents()) {\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\n            }\n        }\n    }\n\n    /**\n     * @pre crossAxisSize should exclude padding.\n     */\n    _layoutCrossAxis() {\n        const aligner = new ContentAligner(this);\n        aligner.init();\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\n        this._fitCrossAxisSizeToContents();\n        aligner.align();\n    }\n\n    _fitCrossAxisSizeToContents() {\n        if (!this._resizingCrossAxis) {\n            if (this.isCrossAxisFitToContents()) {\n                this.crossAxisSize = this._totalCrossAxisSize;\n            }\n        }\n    }\n\n    isWrapping() {\n        return this._flexContainer.wrap;\n    }\n\n    isAxisFitToContents(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this.isMainAxisFitToContents();\n        } else {\n            return this.isCrossAxisFitToContents();\n        }\n    }\n\n    isMainAxisFitToContents() {\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\n    }\n\n    isCrossAxisFitToContents() {\n        return !this._hasFixedCrossAxisBasis();\n    }\n\n    _hasFixedMainAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\n    }\n\n    _hasFixedCrossAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\n    }\n\n    getAxisMinSize(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this._getMainAxisMinSize();\n        } else {\n            return this._getCrossAxisMinSize();\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return this._lineLayouter.mainAxisMinSize;\n    }\n\n    _getCrossAxisMinSize() {\n        return this._lineLayouter.crossAxisMinSize;\n    }\n\n    resizeMainAxis(size) {\n        if (this.mainAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeMainAxis(size);\n            } else {\n                if (this._checkValidCacheMainAxisResize()) {\n                    this.mainAxisSize = size;\n                    this._fitCrossAxisSizeToContents();\n                } else {\n                    // Cache miss.\n                    this.item.enableLocalRecalcFlag();\n                    this.performResizeMainAxis(size);\n                }\n            }\n        }\n    }\n\n    _checkValidCacheMainAxisResize(size) {\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\n        if (isFinalMainAxisSize) {\n            return true;\n        }\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\n        if (canIgnoreCacheMiss) {\n            // Allow other main axis resizes and check if final resize matches the target main axis size\n            //  (ItemCoordinatesUpdater).\n            return true;\n        }\n        return false;\n    }\n\n    performResizeMainAxis(size) {\n        const isShrinking = (size < this.mainAxisSize);\n        this._shrunk = isShrinking;\n\n        this.mainAxisSize = size;\n\n        this._resizingMainAxis = true;\n        this._layoutAxes();\n        this._resizingMainAxis = false;\n    }\n\n    resizeCrossAxis(size) {\n        if (this.crossAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeCrossAxis(size);\n            } else {\n                this.crossAxisSize = size;\n            }\n        }\n    }\n\n    performResizeCrossAxis(size) {\n        this.crossAxisSize = size;\n\n        this._resizingCrossAxis = true;\n        this._layoutCrossAxis();\n        this._resizingCrossAxis = false;\n    }\n\n    get targetMainAxisSize() {\n        return this._horizontal ? this.item.target.w : this.item.target.h;\n    }\n\n    get targetCrossAxisSize() {\n        return this._horizontal ? this.item.target.h : this.item.target.w;\n    }\n\n    getParentFlexContainer() {\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\n    }\n\n    _getHorizontalPadding() {\n        return FlexUtils.getTotalPadding(this.item, true);\n    }\n\n    _getVerticalPadding() {\n        return FlexUtils.getTotalPadding(this.item, false);\n    }\n\n    _getHorizontalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, true);\n    }\n\n    _getVerticalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, false);\n    }\n\n    _getMainAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\n    }\n\n    _getCrossAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\n    }\n\n    get _horizontal() {\n        return this._flexContainer._horizontal;\n    }\n\n    get _reverse() {\n        return this._flexContainer._reverse;\n    }\n\n    get item() {\n        return this._flexContainer.item;\n    }\n\n    get items() {\n        return this.item.items;\n    }\n\n    get resizingMainAxis() {\n        return this._resizingMainAxis;\n    }\n\n    get resizingCrossAxis() {\n        return this._resizingCrossAxis;\n    }\n\n    get numberOfItems() {\n        return this.items.length;\n    }\n\n    get mainAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\n    }\n\n    get crossAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\n    }\n\n    set mainAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\n    }\n\n    set crossAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport Layout from \"./layout/FlexLayout.mjs\";\n\nexport default class FlexContainer {\n\n\n    constructor(item) {\n        this._item = item;\n\n        this._layout = new Layout(this);\n        this._horizontal = true;\n        this._reverse = false;\n        this._wrap = false;\n        this._alignItems = 'stretch';\n        this._justifyContent = 'flex-start';\n        this._alignContent = 'flex-start';\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    _changedDimensions() {\n        this._item.changedDimensions();\n    }\n\n    _changedContents() {\n        this._item.changedContents();\n    }\n\n    get direction() {\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\n    }\n\n    set direction(f) {\n        if (this.direction === f) return;\n\n        this._horizontal = (f === 'row' || f === 'row-reverse');\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\n\n        this._changedContents();\n    }\n\n    set wrap(v) {\n        this._wrap = v;\n        this._changedContents();\n    }\n\n    get wrap() {\n        return this._wrap;\n    }\n\n    get alignItems() {\n        return this._alignItems;\n    }\n\n    set alignItems(v) {\n        if (this._alignItems === v) return;\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n        }\n        this._alignItems = v;\n\n        this._changedContents();\n    }\n\n    get alignContent() {\n        return this._alignContent;\n    }\n\n    set alignContent(v) {\n        if (this._alignContent === v) return;\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\n        }\n        this._alignContent = v;\n\n        this._changedContents();\n    }\n\n    get justifyContent() {\n        return this._justifyContent;\n    }\n\n    set justifyContent(v) {\n        if (this._justifyContent === v) return;\n\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\n        }\n        this._justifyContent = v;\n\n        this._changedContents();\n    }\n\n    set padding(v) {\n        this.paddingLeft = v;\n        this.paddingTop = v;\n        this.paddingRight = v;\n        this.paddingBottom = v;\n    }\n\n    get padding() {\n        return this.paddingLeft;\n    }\n    \n    set paddingLeft(v) {\n        this._paddingLeft = v;\n        this._changedDimensions();\n    }\n    \n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingTop(v) {\n        this._paddingTop = v;\n        this._changedDimensions();\n    }\n\n    get paddingTop() {\n        return this._paddingTop;\n    }\n\n    set paddingRight(v) {\n        this._paddingRight = v;\n        this._changedDimensions();\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingBottom(v) {\n        this._paddingBottom = v;\n        this._changedDimensions();\n    }\n\n    get paddingBottom() {\n        return this._paddingBottom;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\nimport FlexContainer from \"./FlexContainer.mjs\";\n\nexport default class FlexItem {\n\n    constructor(item) {\n        this._ctr = null;\n        this._item = item;\n        this._grow = 0;\n        this._shrink = FlexItem.SHRINK_AUTO;\n        this._alignSelf = undefined;\n        this._minWidth = 0;\n        this._minHeight = 0;\n        this._maxWidth = 0;\n        this._maxHeight = 0;\n\n        this._marginLeft = 0;\n        this._marginTop = 0;\n        this._marginRight = 0;\n        this._marginBottom = 0;\n        this._reversed = false;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    get grow() {\n        return this._grow;\n    }\n\n    set grow(v) {\n        if (this._grow === v) return;\n\n        this._grow = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get shrink() {\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\n            return this._getDefaultShrink();\n        }\n        return this._shrink;\n    }\n\n    _getDefaultShrink() {\n        if (this.item.isFlexEnabled()) {\n            return 1;\n        } else {\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\n            return 0;\n        }\n    }\n\n    set shrink(v) {\n        if (this._shrink === v) return;\n\n        this._shrink = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get alignSelf() {\n        return this._alignSelf;\n    }\n\n    set alignSelf(v) {\n        if (this._alignSelf === v) return;\n\n        if (v === undefined) {\n            this._alignSelf = undefined;\n        } else {\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n            }\n            this._alignSelf = v;\n        }\n\n        this._changed();\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minWidth(v) {\n        this._minWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    set minHeight(v) {\n        this._minHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    get maxWidth() {\n        return this._maxWidth;\n    }\n\n    set maxWidth(v) {\n        this._maxWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get maxHeight() {\n        return this._maxHeight;\n    }\n\n    set maxHeight(v) {\n        this._maxHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    /**\n     * @note margins behave slightly different than in HTML with regard to shrinking.\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\n     */\n    set margin(v) {\n        this.marginLeft = v;\n        this.marginTop = v;\n        this.marginRight = v;\n        this.marginBottom = v;\n    }\n\n    get margin() {\n        return this.marginLeft;\n    }\n\n    set marginLeft(v) {\n        this._marginLeft = v;\n        this._changed();\n    }\n\n    get marginLeft() {\n        return this._marginLeft;\n    }\n\n    set marginTop(v) {\n        this._marginTop = v;\n        this._changed();\n    }\n\n    get marginTop() {\n        return this._marginTop;\n    }\n\n    set marginRight(v) {\n        this._marginRight = v;\n        this._changed();\n    }\n\n    get marginRight() {\n        return this._marginRight;\n    }\n\n    set marginBottom(v) {\n        this._marginBottom = v;\n        this._changed();\n    }\n\n    get marginBottom() {\n        return this._marginBottom;\n    }\n    \n    _changed() {\n        if (this.ctr) this.ctr._changedContents();\n    }\n\n    set ctr(v) {\n        this._ctr = v;\n    }\n\n    get ctr() {\n        return this._ctr;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    _resetLayoutSize() {\n        this._resetHorizontalAxisLayoutSize();\n        this._resetVerticalAxisLayoutSize();\n    }\n\n    _resetCrossAxisLayoutSize() {\n        if (this.ctr._horizontal) {\n            this._resetVerticalAxisLayoutSize();\n        } else {\n            this._resetHorizontalAxisLayoutSize();\n        }\n    }\n\n    _resetHorizontalAxisLayoutSize() {\n        let w = FlexUtils.getRelAxisSize(this.item, true);\n        if (this._minWidth) {\n            w = Math.max(this._minWidth, w);\n        }\n        if (this._maxWidth) {\n            w = Math.min(this._maxWidth, w);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\n    }\n\n    _resetVerticalAxisLayoutSize() {\n        let h = FlexUtils.getRelAxisSize(this.item, false);\n        if (this._minHeight) {\n            h = Math.max(this._minHeight, h);\n        }\n        if (this._maxHeight) {\n            h = Math.min(this._maxHeight, h);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\n    }\n\n    _getCrossAxisMinSizeSetting() {\n        return this._getMinSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getCrossAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getMainAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(this.ctr._horizontal);\n    }\n\n    _getMinSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._minWidth;\n        } else {\n            return this._minHeight;\n        }\n    }\n\n    _getMaxSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._maxWidth;\n        } else {\n            return this._maxHeight;\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutPos() {\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\n    }\n\n    _setMainAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\n    }\n\n    _setCrossAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\n    }\n\n    _getCrossAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\n    }\n\n    _resizeCrossAxis(size) {\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\n    }\n\n    _resizeMainAxis(size) {\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\n    }\n\n    _getMainAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\n    }\n\n    _getHorizontalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, true);\n    }\n\n    _getVerticalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, false);\n    }\n\n    _getMainAxisMinSizeWithPaddingAndMargin() {\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _hasFixedCrossAxisSize() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\n    }\n\n    _hasRelCrossAxisSize() {\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\n    }\n\n}\n\n\nFlexItem.SHRINK_AUTO = -1;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexContainer from \"./FlexContainer.mjs\";\nimport FlexItem from \"./FlexItem.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\n\n/**\n * This is the connection between the render tree with the layout tree of this flex container/item.\n */\nexport default class FlexTarget {\n\n    constructor(target) {\n        this._target = target;\n\n        /**\n         * Possible values (only in case of container):\n         * bit 0: has changed or contains items with changes\n         * bit 1: width changed\n         * bit 2: height changed\n         */\n        this._recalc = 0;\n        \n        this._enabled = false;\n\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n\n        this._originalX = 0;\n        this._originalY = 0;\n        this._originalWidth = 0;\n        this._originalHeight = 0;\n\n        this._flex = null;\n        this._flexItem = null;\n        this._flexItemDisabled = false;\n\n        this._items = null;\n    }\n\n    get flexLayout() {\n        return this.flex ? this.flex._layout : null;\n    }\n\n    layoutFlexTree() {\n        if (this.isFlexEnabled() && this.isChanged()) {\n            this.flexLayout.layoutTree();\n        }\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get flex() {\n        return this._flex;\n    }\n\n    set flex(v) {\n        if (!v) {\n            if (this.isFlexEnabled()) {\n                this._disableFlex();\n            }\n        } else {\n            if (!this.isFlexEnabled()) {\n                this._enableFlex();\n            }\n            this._flex.patch(v);\n        }\n    }\n\n    get flexItem() {\n        if (this._flexItemDisabled) {\n            return false;\n        }\n        this._ensureFlexItem();\n        return this._flexItem;\n    }\n\n    set flexItem(v) {\n        if (v === false) {\n            if (!this._flexItemDisabled) {\n                const parent = this.flexParent;\n                this._flexItemDisabled = true;\n                this._checkEnabled();\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        } else {\n            this._ensureFlexItem();\n\n            this._flexItem.patch(v);\n\n            if (this._flexItemDisabled) {\n                this._flexItemDisabled = false;\n                this._checkEnabled();\n                const parent = this.flexParent;\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        }\n    }\n\n    _enableFlex() {\n        this._flex = new FlexContainer(this);\n        this._checkEnabled();\n        this.changedDimensions();\n        this._enableChildrenAsFlexItems();\n    }\n\n    _disableFlex() {\n        this.changedDimensions();\n        this._flex = null;\n        this._checkEnabled();\n        this._disableChildrenAsFlexItems();\n    }\n\n    _enableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._enableFlexItem();\n            }\n        }\n    }\n\n    _disableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._disableFlexItem();\n            }\n        }\n    }\n\n    _enableFlexItem() {\n        this._ensureFlexItem();\n        const flexParent = this._target._parent._layout;\n        this._flexItem.ctr = flexParent._flex;\n        flexParent.changedContents();\n        this._checkEnabled();\n    }\n\n    _disableFlexItem() {\n        if (this._flexItem) {\n            this._flexItem.ctr = null;\n        }\n\n        // We keep the flexItem object because it may contain custom settings.\n        this._checkEnabled();\n\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\n        this._resetOffsets();\n    }\n\n    _resetOffsets() {\n        this.x = 0;\n        this.y = 0;\n    }\n\n    _ensureFlexItem() {\n        if (!this._flexItem) {\n            this._flexItem = new FlexItem(this);\n        }\n    }\n\n    _checkEnabled() {\n        const enabled = this.isEnabled();\n        if (this._enabled !== enabled) {\n            if (enabled) {\n                this._enable();\n            } else {\n                this._disable();\n            }\n            this._enabled = enabled;\n        }\n    }\n    \n    _enable() {\n        this._setupTargetForFlex();\n        this._target.enableFlexLayout();\n    }\n\n    _disable() {\n        this._restoreTargetToNonFlex();\n        this._target.disableFlexLayout();\n    }\n\n    isEnabled() {\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\n    }\n\n    isFlexEnabled() {\n        return this._flex !== null;\n    }\n\n    isFlexItemEnabled() {\n        return this.flexParent !== null;\n    }\n\n    _restoreTargetToNonFlex() {\n        const target = this._target;\n        target.x = this._originalX;\n        target.y = this._originalY;\n        target.setDimensions(this._originalWidth, this._originalHeight);\n    }\n\n    _setupTargetForFlex() {\n        const target = this._target;\n        this._originalX = target._x;\n        this._originalY = target._y;\n        this._originalWidth = target._w;\n        this._originalHeight = target._h;\n    }\n    \n    setParent(from, to) {\n        if (from && from.isFlexContainer()) {\n            from._layout._changedChildren();\n        }\n\n        if (to && to.isFlexContainer()) {\n            this._enableFlexItem();\n            to._layout._changedChildren();\n        }\n        this._checkEnabled();\n    }\n\n    get flexParent() {\n        if (this._flexItemDisabled) {\n            return null;\n        }\n\n        const parent = this._target._parent;\n        if (parent && parent.isFlexContainer()) {\n            return parent._layout;\n        }\n        return null;\n    }\n\n    setVisible(v) {\n        const parent = this.flexParent;\n        if (parent) {\n            parent._changedChildren();\n        }\n    }\n\n    get items() {\n        if (!this._items) {\n            this._items = this._getFlexItems();\n        }\n        return this._items;\n    }\n\n    _getFlexItems() {\n        const items = [];\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const item = children[i];\n                if (item.visible) {\n                    if (item.isFlexItem()) {\n                        items.push(item.layout);\n                    }\n                }\n            }\n        }\n        return items;\n    }\n\n    _changedChildren() {\n        this._clearFlexItemsCache();\n        this.changedContents();\n    }\n\n    _clearFlexItemsCache() {\n        this._items = null;\n    }\n\n    setLayout(x, y, w, h) {\n        let originalX = this._originalX;\n        let originalY = this._originalY;\n        if (this.funcX) {\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\n        }\n        if (this.funcY) {\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\n        }\n\n        if (this.isFlexItemEnabled()) {\n            this.target.setLayout(x + originalX, y + originalY, w, h);\n        } else {\n            // Reuse the x,y 'settings'.\n            this.target.setLayout(originalX, originalY, w, h);\n        }\n    }\n\n    changedDimensions(changeWidth = true, changeHeight = true) {\n        this._updateRecalc(changeWidth, changeHeight);\n    }\n\n    changedContents() {\n        this._updateRecalc();\n    }\n\n    forceLayout() {\n        this._updateRecalc();\n    }\n\n    isChanged() {\n        return this._recalc > 0;\n    }\n\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\n        if (this.isFlexEnabled()) {\n            const layout = this._flex._layout;\n\n            // When something internal changes, it can have effect on the external dimensions.\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\n        }\n\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\n        this._recalc |= recalc;\n        if (newRecalcFlags > 1) {\n            if (this.flexParent) {\n                this.flexParent._updateRecalcBottomUp(recalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    getNewRecalcFlags(flags) {\n        return (7 - this._recalc) & flags;\n    }\n\n    _updateRecalcBottomUp(childRecalc) {\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\n        this._recalc |= newRecalc;\n        if (newRecalcFlags > 1) {\n            const flexParent = this.flexParent;\n            if (flexParent) {\n                flexParent._updateRecalcBottomUp(newRecalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    _getRecalcFromChangedChildRecalc(childRecalc) {\n        const layout = this._flex._layout;\n\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\n\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\n        if (!crossAxisDimensionsChangedInChild) {\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\n            if (mainAxisDimensionsChangedInChild) {\n                const mainAxisIsWrapping = layout.isWrapping();\n                if (mainAxisIsWrapping) {\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\n                    if (crossAxisIsFitToContents) {\n                        // Special case: due to wrapping, the cross axis size may be changed.\n                        childRecalc += crossAxisRecalcFlag;\n                    }\n                }\n            }\n        }\n\n        let isWidthDynamic = layout.isAxisFitToContents(true);\n        let isHeightDynamic = layout.isAxisFitToContents(false);\n\n        if (layout.shrunk) {\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\n            if (layout._horizontal) {\n                isWidthDynamic = true;\n            } else {\n                isHeightDynamic = true;\n            }\n        }\n\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\n\n        const combinedRecalc = childRecalc & localRecalc;\n        return combinedRecalc;\n    }\n\n    get recalc() {\n        return this._recalc;\n    }\n\n    clearRecalcFlag() {\n        this._recalc = 0;\n    }\n\n    enableLocalRecalcFlag() {\n        this._recalc = 1;\n    }\n\n    get originalX() {\n        return this._originalX;\n    }\n\n    setOriginalXWithoutUpdatingLayout(v) {\n        this._originalX = v;\n    }\n\n    get originalY() {\n        return this._originalY;\n    }\n\n    setOriginalYWithoutUpdatingLayout(v) {\n        this._originalY = v;\n    }\n\n    get originalWidth() {\n        return this._originalWidth;\n    }\n\n    set originalWidth(v) {\n        if (this._originalWidth !== v) {\n            this._originalWidth = v;\n            this.changedDimensions(true, false);\n        }\n    }\n\n    get originalHeight() {\n        return this._originalHeight;\n    }\n\n    set originalHeight(v) {\n        if (this._originalHeight !== v) {\n            this._originalHeight = v;\n            this.changedDimensions(false, true);\n        }\n    }\n\n    get funcX() {\n        return this._target.funcX;\n    }\n\n    get funcY() {\n        return this._target.funcY;\n    }\n\n    get funcW() {\n        return this._target.funcW;\n    }\n\n    get funcH() {\n        return this._target.funcH;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TextureSource {\n\n    constructor(manager, loader = null) {\n        this.id = TextureSource.id++;\n\n        this.manager = manager;\n\n        this.stage = manager.stage;\n\n        /**\n         * All enabled textures (textures that are used by visible elements).\n         * @type {Set<Texture>}\n         */\n        this.textures = new Set();\n\n        /**\n         * The number of active textures (textures that have at least one active element).\n         * @type {number}\n         * @private\n         */\n        this._activeTextureCount = 0;\n\n        /**\n         * The factory for the source of this texture.\n         * @type {Function}\n         */\n        this.loader = loader;\n\n        /**\n         * Identifier for reuse.\n         * @type {String}\n         */\n        this.lookupId = null;\n\n        /**\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\n         * @type {Function}\n         */\n        this._cancelCb = null;\n\n        /**\n         * Loading since timestamp in millis.\n         * @type {number}\n         */\n        this.loadingSince = 0;\n\n        this.w = 0;\n        this.h = 0;\n\n        this._nativeTexture = null;\n\n        /**\n         * If true, then this.texture source is never freed from memory during garbage collection.\n         * @type {boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Sub-object with texture-specific rendering information.\n         * For images, contains the src property, for texts, contains handy rendering information.\n         * @type {Object}\n         */\n        this.renderInfo = null;\n\n        /**\n         * Generated for 'renderToTexture'.\n         * @type {boolean}\n         * @private\n         */\n        this._isResultTexture = !this.loader;\n\n        /**\n         * Contains the load error, if the texture source could previously not be loaded.\n         * @type {object}\n         * @private\n         */\n        this._loadError = null;\n\n        /**\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\n         * @type {object}\n         * @private\n         */\n        this._imageRef = null;\n\n\n        /**\n         * Track whether or not there is an alpha channel in this source\n         * @type {boolean}\n         * @private\n         */\n         this._hasAlpha = false;\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    get loadError() {\n        return this._loadError;\n    }\n\n    addTexture(v) {\n        if (!this.textures.has(v)) {\n            this.textures.add(v);\n        }\n    }\n\n    removeTexture(v) {\n        this.textures.delete(v);\n    }\n\n    incActiveTextureCount() {\n        this._activeTextureCount++;\n        if (this._activeTextureCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveTextureCount() {\n        this._activeTextureCount--;\n        if (this._activeTextureCount === 0) {\n            this.becomesUnused();\n        }\n    }\n\n    get isResultTexture() {\n        return this._isResultTexture;\n    }\n\n    set isResultTexture(v) {\n        this._isResultTexture = v;\n    }\n\n    forEachEnabledElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(cb);\n        });\n    }\n\n    hasEnabledElements() {\n        return this.textures.size > 0;\n    }\n\n    forEachActiveElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(element => {\n                if (element.active) {\n                    cb(element);\n                }\n            });\n        });\n    }\n\n    getRenderWidth() {\n        return this.w;\n    }\n\n    getRenderHeight() {\n        return this.h;\n    }\n\n    allowCleanup() {\n        return !this.permanent && !this.isUsed();\n    }\n\n    becomesUsed() {\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\n        this.load();\n    }\n\n    becomesUnused() {\n        this.cancel();\n    }\n\n    cancel() {\n        if (this.isLoading()) {\n            if (this._cancelCb) {\n                this._cancelCb(this);\n\n                // Clear callback to avoid memory leaks.\n                this._cancelCb = null;\n            }\n            this.loadingSince = 0;\n        }\n    }\n\n    isLoaded() {\n        return !!this._nativeTexture;\n    }\n\n    isLoading() {\n        return (this.loadingSince > 0);\n    }\n\n    isError() {\n        return !!this._loadError;\n    }\n\n    reload() {\n        this.free();\n        if (this.isUsed()) {\n            this.load();\n        }\n    }\n\n    load(forceSync = false) {\n        // From the moment of loading (when a texture source becomes used by active elements)\n        if (this.isResultTexture) {\n            // Element result texture source, for which the loading is managed by the core.\n            return;\n        }\n\n        if (!this._nativeTexture && !this.isLoading()) {\n            this.loadingSince = (new Date()).getTime();\n            this._cancelCb = this.loader((err, options) => {\n                // Ignore loads that come in after a cancel.\n                if (this.isLoading()) {\n                    // Clear callback to avoid memory leaks.\n                    this._cancelCb = null;\n\n                    if (this.manager.stage.destroyed) {\n                        // Ignore async load when stage is destroyed.\n                        return;\n                    }\n                    if (err) {\n                        // Emit txError.\n                        this.onError(err);\n                    } else if (options && options.source) {\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\n                            const textureThrottler = this.stage.textureThrottler;\n                            this._cancelCb = textureThrottler.genericCancelCb;\n                            textureThrottler.add(this, options);\n                        } else {\n                            this.processLoadedSource(options);\n                        }\n                    }\n                }\n            }, this);\n        }\n    }\n\n    processLoadedSource(options) {\n        this.loadingSince = 0;\n        this.setSource(options);\n    }\n\n    setSource(options) {\n        const source = options.source;\n\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\n        this.w = source.width || (options && options.w) || 0;\n        this.h = source.height || (options && options.h) || 0;\n\n        if (options && options.renderInfo) {\n            // Assign to id in cache so that it can be reused.\n            this.renderInfo = options.renderInfo;\n        }\n\n        this.permanent = !!options.permanent;\n\n        if (options && options.imageRef)\n            this._imageRef = options.imageRef;\n        if (options && options.flipTextureY) {\n            this._flipTextureY = options.flipTextureY;\n        } else {\n            this._flipTextureY = false;\n        }\n\n        if (this._isNativeTexture(source)) {\n            // Texture managed by caller.\n            this._nativeTexture = source;\n\n            this.w = this.w || source.w;\n            this.h = this.h || source.h;\n\n            // WebGLTexture objects are by default;\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\n        } else {\n            this.manager.uploadTextureSource(this, options);\n        }\n\n        // Must be cleared when reload is succesful.\n        this._loadError = null;\n\n        this.onLoad();\n    }\n\n    isUsed() {\n        return this._activeTextureCount > 0;\n    }\n\n    onLoad() {\n        if (this.isUsed()) {\n            this.textures.forEach(texture => {\n                texture.onLoad();\n            });\n        }\n    }\n\n    forceRenderUpdate() {\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\n        //  (using tex[Sub]Image2d for example).\n\n        if (this._nativeTexture) {\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\n            this._nativeTexture.update = this.stage.frameCounter;\n        }\n\n        this.forEachActiveElement(function (element) {\n            element.forceRenderUpdate();\n        });\n\n    }\n\n    forceUpdateRenderCoords() {\n        this.forEachActiveElement(function (element) {\n            element._updateTextureCoords();\n        });\n    }\n\n    get nativeTexture() {\n        return this._nativeTexture;\n    }\n\n    clearNativeTexture() {\n        this._nativeTexture = null;\n        //also clear the reference to the texture variable.\n        this._imageRef = null;\n    }\n\n    /**\n     * Used for result textures.\n     */\n    replaceNativeTexture(newNativeTexture, w, h) {\n        let prevNativeTexture = this._nativeTexture;\n        // Loaded by core.\n        this._nativeTexture = newNativeTexture;\n        this.w = w;\n        this.h = h;\n\n        if (!prevNativeTexture && this._nativeTexture) {\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\n        }\n\n        if (!this._nativeTexture) {\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\n        }\n\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\n        this.forEachEnabledElement(element => element._updateDimensions());\n\n        // Notice that the sprite map must never contain render textures.\n    }\n\n    onError(e) {\n        this._loadError = e;\n        this.loadingSince = 0;\n        console.error('[Lightning] texture load error', e, this.lookupId);\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\n    }\n\n    free() {\n        if (this.isLoaded()) {\n            this.manager.freeTextureSource(this);\n        }\n    }\n\n    _isNativeTexture(source) {\n        if (Utils.isNode) {\n            return source.constructor.name === \"WebGLTexture\";\n        }\n\n        if ('WebGLTexture' in window) {\n            return source instanceof WebGLTexture;\n        }\n\n        return false;\n    }\n\n}\n\nTextureSource.prototype.isTextureSource = true;\n\nTextureSource.id = 1;\n\nimport Utils from \"./Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from '../TextureSource.mjs';\n\nexport default class ElementTexturizer {\n\n    constructor(elementCore) {\n\n        this._element = elementCore.element;\n        this._core = elementCore;\n\n        this.ctx = this._core.ctx;\n\n        this._enabled = false;\n        this.lazy = false;\n        this._colorize = false;\n\n        this._renderTexture = null;\n\n        this._renderTextureReused = false;\n\n        this._resultTextureSource = null;\n\n        this._renderOffscreen = false;\n\n        this.empty = false;\n    }\n\n    get enabled() {\n        return this._enabled;\n    }\n\n    set enabled(v) {\n        this._enabled = v;\n        this._core.updateRenderToTextureEnabled();\n    }\n\n    get renderOffscreen() {\n        return this._renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this._renderOffscreen = v;\n        this._core.setHasRenderUpdates(1);\n\n        // This enforces rechecking the 'within bounds'.\n        this._core._setRecalc(6);\n    }\n\n    get colorize() {\n        return this._colorize;\n    }\n\n    set colorize(v) {\n        if (this._colorize !== v) {\n            this._colorize = v;\n\n            // Only affects the finally drawn quad.\n            this._core.setHasRenderUpdates(1);\n        }\n    }\n\n    _getTextureSource() {\n        if (!this._resultTextureSource) {\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\n            this.updateResultTexture();\n        }\n        return this._resultTextureSource;\n    }\n\n    hasResultTexture() {\n        return !!this._resultTextureSource;\n    }\n\n    resultTextureInUse() {\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\n    }\n\n    updateResultTexture() {\n        let resultTexture = this.getResultTexture();\n        if (this._resultTextureSource) {\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\n                let w = resultTexture ? resultTexture.w : 0;\n                let h = resultTexture ? resultTexture.h : 0;\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\n            }\n\n            // Texture will be updated: all elements using the source need to be updated as well.\n            this._resultTextureSource.forEachEnabledElement(element => {\n                element._updateDimensions();\n                element.core.setHasRenderUpdates(3);\n            });\n        }\n    }\n\n    mustRenderToTexture() {\n        // Check if we must really render as texture.\n        if (this._enabled && !this.lazy) {\n            return true;\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\n            return true;\n        }\n        return false;\n    }\n\n    deactivate() {\n        this.release();\n    }\n\n    get renderTextureReused() {\n        return this._renderTextureReused;\n    }\n\n    release() {\n        this.releaseRenderTexture();\n    }\n\n    releaseRenderTexture() {\n        if (this._renderTexture) {\n            if (!this._renderTextureReused) {\n                this.ctx.releaseRenderTexture(this._renderTexture);\n            }\n            this._renderTexture = null;\n            this._renderTextureReused = false;\n            this.updateResultTexture();\n        }\n    }\n\n    // Reuses the specified texture as the render texture (in ancestor).\n    reuseTextureAsRenderTexture(nativeTexture) {\n        if (this._renderTexture !== nativeTexture) {\n            this.releaseRenderTexture();\n            this._renderTexture = nativeTexture;\n            this._renderTextureReused = true;\n        }\n    }\n\n    hasRenderTexture() {\n        return !!this._renderTexture;\n    }\n\n    getRenderTexture() {\n        if (!this._renderTexture) {\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\n            this._renderTextureReused = false;\n        }\n        return this._renderTexture;\n    }\n\n    getResultTexture() {\n        return this._renderTexture;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\n\nexport default class ElementCore {\n\n    constructor(element) {\n        this._element = element;\n\n        this.ctx = element.stage.ctx;\n\n        // The memory layout of the internal variables is affected by their position in the constructor.\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\n\n        this._recalc = 0;\n\n        this._parent = null;\n\n        this._onUpdate = null;\n\n        this._pRecalc = 0;\n\n        this._worldContext = new ElementCoreContext();\n\n        this._hasUpdates = false;\n\n        this._localAlpha = 1;\n\n        this._onAfterCalcs = null;\n\n        this._onAfterUpdate = null;\n\n        // All local translation/transform updates: directly propagated from x/y/w/h/scale/whatever.\n        this._localPx = 0;\n        this._localPy = 0;\n\n        this._localTa = 1;\n        this._localTb = 0;\n        this._localTc = 0;\n        this._localTd = 1;\n\n        this._isComplex = false;\n\n        this._dimsUnknown = false;\n\n        this._clipping = false;\n\n        // Used by both update and render.\n        this._zSort = false;\n\n        this._outOfBounds = 0;\n\n        /**\n         * The texture source to be displayed.\n         * @type {TextureSource}\n         */\n        this._displayedTextureSource = null;\n\n        this._zContextUsage = 0;\n\n        this._children = null;\n\n        this._hasRenderUpdates = 0;\n\n        this._zIndexedChildren = null;\n\n        this._renderContext = this._worldContext;\n\n        this.renderState = this.ctx.renderState;\n\n        this._scissor = null;\n\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\n        this._shaderOwner = null;\n\n\n        this._updateTreeOrder = 0;\n\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\n\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n\n        this._optFlags = 0;\n        this._funcX = null;\n        this._funcY = null;\n        this._funcW = null;\n        this._funcH = null;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n        this._pivotX = 0.5;\n        this._pivotY = 0.5;\n        this._mountX = 0;\n        this._mountY = 0;\n        this._rotation = 0;\n\n        this._alpha = 1;\n        this._visible = true;\n\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n\n        this._zIndex = 0;\n        this._forceZIndexContext = false;\n        this._zParent = null;\n\n        this._isRoot = false;\n\n        /**\n         * Iff true, during zSort, this element should be 're-sorted' because either:\n         * - zIndex did chang\n         * - zParent did change\n         * - element was moved in the render tree\n         * @type {boolean}\n         */\n        this._zIndexResort = false;\n\n        this._shader = null;\n\n        // Element is rendered on another texture.\n        this._renderToTextureEnabled = false;\n\n        this._texturizer = null;\n\n        this._useRenderToTexture = false;\n\n        this._boundsMargin = null;\n\n        this._recBoundsMargin = null;\n\n        this._withinBoundsMargin = false;\n\n        this._viewport = null;\n\n        this._clipbox = true;\n\n        this.render = this._renderSimple;\n\n        this._layout = null;\n    }\n\n    get offsetX() {\n        if (this._funcX) {\n            return this._funcX;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalX;\n            } else {\n                return this._x;\n            }\n        }\n    }\n\n    set offsetX(v) {\n        if (Utils.isFunction(v)) {\n            this.funcX = v;\n        } else {\n            this._disableFuncX();\n            if (this.hasFlexLayout()) {\n                this.x += (v - this._layout.originalX);\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\n            } else {\n                this.x = v;\n            }\n        }\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        if (v !== this._x) {\n            this._updateLocalTranslateDelta(v - this._x, 0);\n            this._x = v;\n        }\n    }\n\n    get funcX() {\n        return (this._optFlags & 1 ? this._funcX : null);\n    }\n\n    set funcX(v) {\n        if (this._funcX !== v) {\n            this._optFlags |= 1;\n            this._funcX = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._x = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncX() {\n        this._optFlags = this._optFlags & (0xFFFF - 1);\n        this._funcX = null;\n    }\n\n    get offsetY() {\n        if (this._funcY) {\n            return this._funcY;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalY;\n            } else {\n                return this._y;\n            }\n        }\n    }\n\n    set offsetY(v) {\n        if (Utils.isFunction(v)) {\n            this.funcY = v;\n        } else {\n            this._disableFuncY();\n            if (this.hasFlexLayout()) {\n                this.y += (v - this._layout.originalY);\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\n            } else {\n                this.y = v;\n            }\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        if (v !== this._y) {\n            this._updateLocalTranslateDelta(0, v - this._y);\n            this._y = v;\n        }\n    }\n\n    get funcY() {\n        return (this._optFlags & 2 ? this._funcY : null);\n    }\n\n    set funcY(v) {\n        if (this._funcY !== v) {\n            this._optFlags |= 2;\n            this._funcY = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._y = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncY() {\n        this._optFlags = this._optFlags & (0xFFFF - 2);\n        this._funcY = null;\n    }\n\n    get funcW() {\n        return (this._optFlags & 4 ? this._funcW : null);\n    }\n\n    set funcW(v) {\n        if (this._funcW !== v) {\n            this._optFlags |= 4;\n            this._funcW = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalWidth = 0;\n                this.layout.changedDimensions(true, false);\n            } else {\n                this._w = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncW() {\n        this._optFlags = this._optFlags & (0xFFFF - 4);\n        this._funcW = null;\n    }\n\n    get funcH() {\n        return (this._optFlags & 8 ? this._funcH : null);\n    }\n\n    set funcH(v) {\n        if (this._funcH !== v) {\n            this._optFlags |= 8;\n            this._funcH = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalHeight = 0;\n                this.layout.changedDimensions(false, true);\n            } else {\n                this._h = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncH() {\n        this._optFlags = this._optFlags & (0xFFFF - 8);\n        this._funcH = null;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    getRenderWidth() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalWidth;\n        } else {\n            return this._w;\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    getRenderHeight() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalHeight;\n        } else {\n            return this._h;\n        }\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(v) {\n        if (this._scaleX !== v) {\n            this._scaleX = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(v) {\n        if (this._scaleY !== v) {\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scale() {\n        return this.scaleX;\n    }\n\n    set scale(v) {\n        if (this._scaleX !== v || this._scaleY !== v) {\n            this._scaleX = v;\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        if (this._pivotX !== v) {\n            this._pivotX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        if (this._pivotY !== v) {\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivot() {\n        return this._pivotX;\n    }\n\n    set pivot(v) {\n        if (this._pivotX !== v || this._pivotY !== v) {\n            this._pivotX = v;\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountX() {\n        return this._mountX;\n    }\n\n    set mountX(v) {\n        if (this._mountX !== v) {\n            this._mountX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountY() {\n        return this._mountY;\n    }\n\n    set mountY(v) {\n        if (this._mountY !== v) {\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mount() {\n        return this._mountX;\n    }\n\n    set mount(v) {\n        if (this._mountX !== v || this._mountY !== v) {\n            this._mountX = v;\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(v) {\n        if (this._rotation !== v) {\n            this._rotation = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get alpha() {\n        return this._alpha;\n    }\n\n    set alpha(v) {\n        // Account for rounding errors.\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\n        if (this._alpha !== v) {\n            let prev = this._alpha;\n            this._alpha = v;\n            this._updateLocalAlpha();\n            if ((prev === 0) !== (v === 0)) {\n                this._element._updateEnabledFlag();\n            }\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (this._visible !== v) {\n            this._visible = v;\n            this._updateLocalAlpha();\n            this._element._updateEnabledFlag();\n\n            if (this.hasFlexLayout()) {\n                this.layout.setVisible(v);\n            }\n        }\n    }\n\n    _updateLocalTransform() {\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\n            let _sr = Math.sin(this._rotation);\n            let _cr = Math.cos(this._rotation);\n\n            this._setLocalTransform(\n                _cr * this._scaleX,\n                -_sr * this._scaleY,\n                _sr * this._scaleX,\n                _cr * this._scaleY\n            );\n        } else {\n            this._setLocalTransform(\n                this._scaleX,\n                0,\n                0,\n                this._scaleY\n            );\n        }\n        this._updateLocalTranslate();\n    };\n\n    _updateLocalTranslate() {\n        this._recalcLocalTranslate();\n        this._triggerRecalcTranslate();\n    };\n\n    _recalcLocalTranslate() {\n        let pivotXMul = this._pivotX * this._w;\n        let pivotYMul = this._pivotY * this._h;\n        let px;\n        if (this.ctx.stage.getOption('RTL')) {\n            px = this._x + (pivotXMul * this._localTa + pivotYMul * this._localTb) - pivotXMul;\n        } else {\n            px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\n        }\n\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\n        px -= this._mountX * this._w;\n        py -= this._mountY * this._h;\n        this._localPx = px;\n        this._localPy = py;\n    }\n\n    _updateLocalTranslateDelta(dx, dy) {\n        this._addLocalTranslate(dx, dy);\n    };\n\n    _updateLocalAlpha() {\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\n    };\n\n    /**\n     * @param {number} type\n     * 0: no updates\n     * 1: re-invoke shader\n     * 3: re-create render texture and re-invoke shader\n     */\n    setHasRenderUpdates(type) {\n        if (this._worldContext.alpha) {\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\n            let p = this;\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\n                p._hasRenderUpdates = 3;\n            }\n        }\n    }\n\n    /**\n     * @param {Number} type\n     *   1: alpha\n     *   2: translate\n     *   4: transform\n     * 128: becomes visible\n     * 256: flex layout updated\n     */\n    _setRecalc(type) {\n        this._recalc |= type;\n\n        this._setHasUpdates();\n\n        // Any changes in descendants should trigger texture updates.\n        if (this._parent) {\n            this._parent.setHasRenderUpdates(3);\n        }\n    }\n\n    _setHasUpdates() {\n        let p = this;\n        while (p && !p._hasUpdates) {\n            p._hasUpdates = true;\n            p = p._parent;\n        }\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(parent) {\n        if (parent !== this._parent) {\n            let prevIsZContext = this.isZContext();\n            let prevParent = this._parent;\n            this._parent = parent;\n\n            // Notify flex layout engine.\n            if (this._layout || (parent && parent.isFlexContainer())) {\n                this.layout.setParent(prevParent, parent);\n            }\n\n            if (prevParent) {\n                // When elements are deleted, the render texture must be re-rendered.\n                prevParent.setHasRenderUpdates(3);\n            }\n\n            this._setRecalc(1 + 2 + 4);\n\n            if (this._parent) {\n                // Force parent to propagate hasUpdates flag.\n                this._parent._setHasUpdates();\n            }\n\n            if (this._zIndex === 0) {\n                this.setZParent(parent);\n            } else {\n                this.setZParent(parent ? parent.findZContext() : null);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(prevParent.findZContext());\n                }\n            }\n\n            // Tree order did change: even if zParent stays the same, we must resort.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n\n            if (!this._shader) {\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\n                if (newShaderOwner !== this._shaderOwner) {\n                    this.setHasRenderUpdates(1);\n                    this._setShaderOwnerRecursive(newShaderOwner);\n                }\n            }\n        }\n    };\n\n    enableZSort(force = false) {\n        if (!this._zSort && this._zContextUsage > 0) {\n            this._zSort = true;\n            if (force) {\n                // ZSort must be done, even if this element is invisible.\n                // This is done to prevent memory leaks when removing element from inactive render branches.\n                this.ctx.forceZSort(this);\n            }\n        }\n    }\n\n    addChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children.splice(index, 0, child);\n        child.setParent(this);\n    };\n\n    setChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children[index].setParent(null);\n        this._children[index] = child;\n        child.setParent(this);\n    }\n\n    removeChildAt(index) {\n        let child = this._children[index];\n        this._children.splice(index, 1);\n        child.setParent(null);\n    };\n\n    removeChildren() {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i].setParent(null);\n            }\n\n            this._children.splice(0);\n\n            if (this._zIndexedChildren) {\n                this._zIndexedChildren.splice(0);\n            }\n        }\n    };\n\n    syncChildren(removed, added, order) {\n        this._children = order;\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i].setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            added[i].setParent(this);\n        }\n    }\n\n    moveChild(fromIndex, toIndex) {\n        let c = this._children[fromIndex];\n        this._children.splice(fromIndex, 1);\n        this._children.splice(toIndex, 0, c);\n\n        // Tree order changed: must resort!;\n        this._zIndexResort = true;\n        if (this._zParent) {\n            this._zParent.enableZSort();\n        }\n    }\n\n    _setLocalTransform(a, b, c, d) {\n        this._setRecalc(4);\n        this._localTa = a;\n        this._localTb = b;\n        this._localTc = c;\n        this._localTd = d;\n\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\n    };\n\n    _addLocalTranslate(dx, dy) {\n        this._localPx += dx;\n        this._localPy += dy;\n        this._triggerRecalcTranslate();\n    }\n\n    _setLocalAlpha(a) {\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\n            // Element is becoming visible. We need to force update.\n            this._setRecalc(1 + 128);\n        } else {\n            this._setRecalc(1);\n        }\n\n        if (a < 1e-14) {\n            // Tiny rounding errors may cause failing visibility tests.\n            a = 0;\n        }\n\n        this._localAlpha = a;\n    };\n\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\n        // In case of an estimation, the update loop should perform different bound checks.\n        this._dimsUnknown = isEstimate;\n\n        if (this.hasFlexLayout()) {\n            this._layout.originalWidth = w;\n            this._layout.originalHeight = h;\n        } else {\n            if (this._w !== w || this._h !== h) {\n                this._updateDimensions(w, h);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _updateDimensions(w, h) {\n        if (this._w !== w || this._h !== h) {\n            this._w = w;\n            this._h = h;\n\n            this._triggerRecalcTranslate();\n\n            if (this._texturizer) {\n                this._texturizer.releaseRenderTexture();\n                this._texturizer.updateResultTexture();\n            }\n            // Due to width/height change: update the translation vector.\n            this._updateLocalTranslate();\n        }\n    }\n\n    setTextureCoords(ulx, uly, brx, bry) {\n        this.setHasRenderUpdates(3);\n\n        this._ulx = ulx;\n        this._uly = uly;\n        this._brx = brx;\n        this._bry = bry;\n    };\n\n    get displayedTextureSource() {\n        return this._displayedTextureSource;\n    }\n\n    setDisplayedTextureSource(textureSource) {\n        this.setHasRenderUpdates(3);\n        this._displayedTextureSource = textureSource;\n    };\n\n    get isRoot() {\n        return this._isRoot;\n    }\n\n    setAsRoot() {\n        // Use parent dummy.\n        this._parent = new ElementCore(this._element);\n\n        // After setting root, make sure it's updated.\n        this._parent._hasRenderUpdates = 3;\n        this._parent._hasUpdates = true;\n\n        // Root is, and will always be, the primary zContext.\n        this._isRoot = true;\n\n        this.ctx.root = this;\n\n        // Set scissor area of 'fake parent' to stage's viewport.\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\n        this._parent._scissor = this._parent._viewport;\n\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\n        this._parent._recBoundsMargin = null;\n\n        this._setRecalc(1 + 2 + 4);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while (p = p._parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    isZContext() {\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\n    };\n\n    findZContext() {\n        if (this.isZContext()) {\n            return this;\n        } else {\n            return this._parent.findZContext();\n        }\n    };\n\n    setZParent(newZParent) {\n        if (this._zParent !== newZParent) {\n            if (this._zParent !== null) {\n                if (this._zIndex !== 0) {\n                    this._zParent.decZContextUsage();\n                }\n\n                // We must filter out this item upon the next resort.\n                this._zParent.enableZSort();\n            }\n\n            if (newZParent !== null) {\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\n\n                // @pre: new parent's children array has already been modified.\n                if (this._zIndex !== 0) {\n                    newZParent.incZContextUsage();\n                }\n\n                if (newZParent._zContextUsage > 0) {\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\n                        // This child was already in the children list.\n                        // Do not add double.\n                    } else {\n                        // Add new child to array.\n                        newZParent._zIndexedChildren.push(this);\n                    }\n\n                    // Order should be checked.\n                    newZParent.enableZSort();\n                }\n            }\n\n            this._zParent = newZParent;\n\n            // Newly added element must be marked for resort.\n            this._zIndexResort = true;\n        }\n    };\n\n    incZContextUsage() {\n        this._zContextUsage++;\n        if (this._zContextUsage === 1) {\n            if (!this._zIndexedChildren) {\n                this._zIndexedChildren = [];\n            }\n            if (this._children) {\n                // Copy.\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._zIndexedChildren.push(this._children[i]);\n                }\n                // Initially, children are already sorted properly (tree order).\n                this._zSort = false;\n            }\n        }\n    };\n\n    decZContextUsage() {\n        this._zContextUsage--;\n        if (this._zContextUsage === 0) {\n            this._zSort = false;\n            this._zIndexedChildren.splice(0);\n        }\n    };\n\n    get zIndex() {\n        return this._zIndex;\n    }\n\n    set zIndex(zIndex) {\n        if (this._zIndex !== zIndex) {\n            this.setHasRenderUpdates(1);\n\n            let newZParent = this._zParent;\n\n            let prevIsZContext = this.isZContext();\n            if (zIndex === 0 && this._zIndex !== 0) {\n                if (this._parent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.decZContextUsage();\n                    }\n                } else {\n                    newZParent = this._parent;\n                }\n            } else if (zIndex !== 0 && this._zIndex === 0) {\n                newZParent = this._parent ? this._parent.findZContext() : null;\n                if (newZParent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.incZContextUsage();\n                        this._zParent.enableZSort();\n                    }\n                }\n            } else if (zIndex !== this._zIndex) {\n                if (this._zParent && this._zParent._zContextUsage) {\n                    this._zParent.enableZSort();\n                }\n            }\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(null);\n            }\n\n            this._zIndex = zIndex;\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(newZParent);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(this._parent.findZContext());\n                }\n            }\n\n            // Make sure that resort is done.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n        }\n    };\n\n    get forceZIndexContext() {\n        return this._forceZIndexContext;\n    }\n\n    set forceZIndexContext(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevIsZContext = this.isZContext();\n        this._forceZIndexContext = v;\n\n        if (prevIsZContext !== this.isZContext()) {\n            if (!this.isZContext()) {\n                this.disableZContext();\n            } else {\n                this.enableZContext(this._parent.findZContext());\n            }\n        }\n    };\n\n    enableZContext(prevZContext) {\n        if (prevZContext && prevZContext._zContextUsage > 0) {\n            // Transfer from upper z context to this z context.\n            const results = this._getZIndexedDescs();\n            results.forEach((c) => {\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\n                    c.setZParent(this);\n                }\n            });\n        }\n    }\n\n    _getZIndexedDescs() {\n        const results = [];\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n        return results;\n    }\n\n    _getZIndexedDescsRec(results) {\n        if (this._zIndex) {\n            results.push(this);\n        } else if (this._children && !this.isZContext()) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n    }\n\n    disableZContext() {\n        // Transfer from this z context to upper z context.\n        if (this._zContextUsage > 0) {\n            let newZParent = this._parent.findZContext();\n\n            // Make sure that z-indexed children are up to date (old ones removed).\n            if (this._zSort) {\n                this.sortZIndexedChildren();\n            }\n\n            this._zIndexedChildren.slice().forEach(function (c) {\n                if (c._zIndex !== 0) {\n                    c.setZParent(newZParent);\n                }\n            });\n        }\n    };\n\n    get colorUl() {\n        return this._colorUl;\n    }\n\n    set colorUl(color) {\n        if (this._colorUl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUl = color;\n        }\n    }\n\n    get colorUr() {\n        return this._colorUr;\n    }\n\n    set colorUr(color) {\n        if (this._colorUr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUr = color;\n        }\n    };\n\n    get colorBl() {\n        return this._colorBl;\n    }\n\n    set colorBl(color) {\n        if (this._colorBl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBl = color;\n        }\n    };\n\n    get colorBr() {\n        return this._colorBr;\n    }\n\n    set colorBr(color) {\n        if (this._colorBr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBr = color;\n        }\n    };\n\n\n    set onUpdate(f) {\n        this._onUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterUpdate(f) {\n        this._onAfterUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterCalcs(f) {\n        this._onAfterCalcs = f;\n        this._setRecalc(7);\n    }\n\n    get shader() {\n        return this._shader;\n    }\n\n    set shader(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevShader = this._shader;\n        this._shader = v;\n        if (!v && prevShader) {\n            // Disabled shader.\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\n            this._setShaderOwnerRecursive(newShaderOwner);\n        } else if (v) {\n            // Enabled shader.\n            this._setShaderOwnerRecursive(this);\n        }\n    }\n\n    get activeShader() {\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\n    }\n\n    get activeShaderOwner() {\n        return this._shaderOwner;\n    }\n\n    get clipping() {\n        return this._clipping;\n    }\n\n    set clipping(v) {\n        if (this._clipping !== v) {\n            this._clipping = v;\n\n            // Force update of scissor by updating translate.\n            // Alpha must also be updated because the scissor area may have been empty.\n            this._setRecalc(1 + 2);\n        }\n    }\n\n    get clipbox() {\n        return this._clipbox;\n    }\n\n    set clipbox(v) {\n        // In case of out-of-bounds element, all children will also be ignored.\n        // It will save us from executing the update/render loops for those.\n        // The optimization will be used immediately during the next frame.\n        this._clipbox = v;\n    }\n\n    _setShaderOwnerRecursive(elementCore) {\n        this._shaderOwner = elementCore;\n\n        if (this._children && !this._renderToTextureEnabled) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _setShaderOwnerChildrenRecursive(elementCore) {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _hasRenderContext() {\n        return this._renderContext !== this._worldContext;\n    }\n\n    get renderContext() {\n        return this._renderContext;\n    }\n\n    updateRenderToTextureEnabled() {\n        // Enforce texturizer initialisation.\n        let v = this.texturizer._enabled;\n\n        if (v) {\n            this._enableRenderToTexture();\n        } else {\n            this._disableRenderToTexture();\n            this._texturizer.releaseRenderTexture();\n        }\n    }\n\n    _enableRenderToTexture() {\n        if (!this._renderToTextureEnabled) {\n            let prevIsZContext = this.isZContext();\n\n            this._renderToTextureEnabled = true;\n\n            this._renderContext = new ElementCoreContext();\n\n            // If render to texture is active, a new shader context is started.\n            this._setShaderOwnerChildrenRecursive(null);\n\n            if (!prevIsZContext) {\n                // Render context forces z context.\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\n            }\n\n            this.setHasRenderUpdates(3);\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.render = this._renderAdvanced;\n        }\n    }\n\n    _disableRenderToTexture() {\n        if (this._renderToTextureEnabled) {\n            this._renderToTextureEnabled = false;\n\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\n\n            this._renderContext = this._worldContext;\n\n            if (!this.isZContext()) {\n                this.disableZContext();\n            }\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.setHasRenderUpdates(3);\n\n            this.render = this._renderSimple;\n        }\n    }\n\n    isWhite() {\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\n    }\n\n    hasSimpleTexCoords() {\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\n    }\n\n    _stashTexCoords() {\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n    }\n\n    _unstashTexCoords() {\n        this._ulx = this._stashedTexCoords[0];\n        this._uly = this._stashedTexCoords[1];\n        this._brx = this._stashedTexCoords[2];\n        this._bry = this._stashedTexCoords[3];\n        this._stashedTexCoords = null;\n    }\n\n    _stashColors() {\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\n        this._colorUl = 0xFFFFFFFF;\n        this._colorUr = 0xFFFFFFFF;\n        this._colorBr = 0xFFFFFFFF;\n        this._colorBl = 0xFFFFFFFF;\n    }\n\n    _unstashColors() {\n        this._colorUl = this._stashedColors[0];\n        this._colorUr = this._stashedColors[1];\n        this._colorBr = this._stashedColors[2];\n        this._colorBl = this._stashedColors[3];\n        this._stashedColors = null;\n    }\n\n    isVisible() {\n        return (this._localAlpha > 1e-14);\n    };\n\n    get outOfBounds() {\n        return this._outOfBounds;\n    }\n\n    set boundsMargin(v) {\n\n        /**\n         *  null: inherit from parent.\n         *  number[4]: specific margins: left, top, right, bottom.\n         */\n        this._boundsMargin = v ? v.slice() : null;\n\n        // We force recalc in order to set all boundsMargin recursively during the next update.\n        this._triggerRecalcTranslate();\n    }\n\n    get boundsMargin() {\n        return this._boundsMargin;\n    }\n\n    update() {\n        this._recalc |= this._parent._pRecalc;\n\n        if (this._layout && this._layout.isEnabled()) {\n            if (this._recalc & 256) {\n                this._layout.layoutFlexTree();\n            }\n        } else if ((this._recalc & 2) && this._optFlags) {\n            this._applyRelativeDimFuncs();\n        }\n\n        if (this._onUpdate) {\n            // Block all 'upwards' updates when changing things in this branch.\n            this._hasUpdates = true;\n            this._onUpdate(this.element, this);\n        }\n\n        const pw = this._parent._worldContext;\n        let w = this._worldContext;\n        const visible = (pw.alpha && this._localAlpha);\n\n        /**\n         * We must update if:\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\n         * - there are (inherited) updates and this branch is visible\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\n         */\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\n            let recalc = this._recalc;\n\n            // Update world coords/alpha.\n            if (recalc & 1) {\n                if (!w.alpha && visible) {\n                    // Becomes visible.\n                    this._hasRenderUpdates = 3;\n                }\n                w.alpha = pw.alpha * this._localAlpha;\n\n                if (w.alpha < 1e-14) {\n                    // Tiny rounding errors may cause failing visibility tests.\n                    w.alpha = 0;\n                }\n            }\n\n            if (recalc & 6) {\n                let calculatedX = this._localPx;\n                if (this.ctx.stage.getOption('RTL')) {\n                    const parentW = this._element.__parent ? this._parent.w || 0 : this.ctx.stage.getOption('w');\n                    calculatedX = parentW - (this._w || 0) - this._localPx;\n                }\n\n                w.px = pw.px + calculatedX * pw.ta;\n                w.py = pw.py + this._localPy * pw.td;\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\n                if (pw.tc !== 0) w.py += calculatedX * pw.tc;\n            }\n\n            if (recalc & 4) {\n                w.ta = this._localTa * pw.ta;\n                w.tb = this._localTd * pw.tb;\n                w.tc = this._localTa * pw.tc;\n                w.td = this._localTd * pw.td;\n\n                if (this._isComplex) {\n                    w.ta += this._localTc * pw.tb;\n                    w.tb += this._localTb * pw.ta;\n                    w.tc += this._localTc * pw.td;\n                    w.td += this._localTb * pw.tc;\n                }\n            }\n\n            // Update render coords/alpha.\n            const pr = this._parent._renderContext;\n            if (this._parent._hasRenderContext()) {\n                const init = this._renderContext === this._worldContext;\n                if (init) {\n                    // First render context build: make sure that it is fully initialized correctly.\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\n                    this._renderContext = new ElementCoreContext();\n                }\n\n                const r = this._renderContext;\n\n                // Update world coords/alpha.\n                if (init || (recalc & 1)) {\n                    r.alpha = pr.alpha * this._localAlpha;\n\n                    if (r.alpha < 1e-14) {\n                        r.alpha = 0;\n                    }\n                }\n\n                if (init || (recalc & 6)) {\n                    r.px = pr.px + this._localPx * pr.ta;\n                    r.py = pr.py + this._localPy * pr.td;\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\n                    if (pr.tc !== 0) r.py += this._localPx * pr.tc;\n                }\n\n                if (init) {\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\n                    recalc |= 2;\n                }\n\n                if (init || (recalc & 4)) {\n                    r.ta = this._localTa * pr.ta;\n                    r.tb = this._localTd * pr.tb;\n                    r.tc = this._localTa * pr.tc;\n                    r.td = this._localTd * pr.td;\n\n                    if (this._isComplex) {\n                        r.ta += this._localTc * pr.tb;\n                        r.tb += this._localTb * pr.ta;\n                        r.tc += this._localTc * pr.td;\n                        r.td += this._localTb * pr.tc;\n                    }\n                }\n            } else {\n                this._renderContext = this._worldContext;\n            }\n\n            if (this.ctx.updateTreeOrder === -1) {\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\n            } else {\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\n            }\n\n            // Determine whether we must use a 'renderTexture'.\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\n            if (this._useRenderToTexture !== useRenderToTexture) {\n                // Coords must be changed.\n                this._recalc |= 2 + 4;\n\n                // Scissor may change: force update.\n                recalc |= 2;\n\n                if (!this._useRenderToTexture) {\n                    // We must release the texture.\n                    this._texturizer.release();\n                }\n            }\n            this._useRenderToTexture = useRenderToTexture;\n\n            const r = this._renderContext;\n\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\n\n            // Calculate a bbox for this element.\n            let sx, sy, ex, ey;\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\n            if (rComplex) {\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n            } else {\n                sx = r.px;\n                ex = r.px + r.ta * bboxW;\n                sy = r.py;\n                ey = r.py + r.td * bboxH;\n            }\n\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                if (nx < sx) sx = nx;\n                if (ny < sy) sy = ny;\n                if (nx > ex) ex = nx;\n                if (ny > ey) ey = ny;\n            }\n\n            if (recalc & 6 || !this._scissor /* initial */) {\n                // Determine whether we must 'clip'.\n                if (this._clipping && r.isSquare()) {\n                    // If the parent renders to a texture, it's scissor should be ignored;\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                    if (area) {\n                        // Merge scissor areas.\n                        const lx = Math.max(area[0], sx);\n                        const ly = Math.max(area[1], sy);\n                        this._scissor = [\n                            lx,\n                            ly,\n                            Math.min(area[2] + area[0], ex) - lx,\n                            Math.min(area[3] + area[1], ey) - ly\n                        ];\n                    } else {\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\n                    }\n                } else {\n                    // No clipping: reuse parent scissor.\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                }\n            }\n\n            // Calculate the outOfBounds margin.\n            if (this._boundsMargin) {\n                this._recBoundsMargin = this._boundsMargin;\n            } else {\n                this._recBoundsMargin = this._parent._recBoundsMargin;\n            }\n\n            if (this._onAfterCalcs) {\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\n                if (this._onAfterCalcs(this.element)) {\n                    // Recalculate bbox.\n                    if (rComplex) {\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                    } else {\n                        sx = r.px;\n                        ex = r.px + r.ta * bboxW;\n                        sy = r.py;\n                        ey = r.py + r.td * bboxH;\n                    }\n\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                        if (nx < sx) sx = nx;\n                        if (ny < sy) sy = ny;\n                        if (nx > ex) ex = nx;\n                        if (ny > ey) ey = ny;\n                    }\n                }\n            }\n\n            if (this._parent._outOfBounds === 2) {\n                // Inherit parent out of boundsness.\n                this._outOfBounds = 2;\n\n                if (this._withinBoundsMargin) {\n                    this._withinBoundsMargin = false;\n                    this.element._disableWithinBoundsMargin();\n                }\n            } else {\n                if (recalc & 6) {\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\n                    this._outOfBounds = 0;\n                    let withinMargin = true;\n\n                    // Offscreens are always rendered as long as the parent is within bounds.\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\n                            // Empty scissor area.\n                            this._outOfBounds = 2;\n                        } else {\n                            // Use bbox to check out-of-boundness.\n                            if ((this._scissor[0] > ex) ||\n                                (this._scissor[1] > ey) ||\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\n                                (sy > (this._scissor[1] + this._scissor[3]))\n                            ) {\n                                this._outOfBounds = 1;\n                            }\n\n                            if (this._outOfBounds) {\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\n                                    this._outOfBounds = 2;\n                                }\n                            }\n                        }\n\n                        withinMargin = (this._outOfBounds === 0);\n                        if (!withinMargin) {\n                            // Re-test, now with margins.\n                            if (this._recBoundsMargin) {\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\n                            } else {\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\n                                    (ey < this._scissor[1] - 100) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\n                            }\n                            if (withinMargin && this._outOfBounds === 2) {\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\n                                this._outOfBounds = 1;\n                            }\n                        }\n                    }\n\n                    if (this._withinBoundsMargin !== withinMargin) {\n                        this._withinBoundsMargin = withinMargin;\n\n                        if (this._withinBoundsMargin) {\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\n\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\n                            // _recalc directly.\n\n                            // Changes in descendants are automatically executed within the current update loop, though we must\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\n                            this._hasUpdates = true;\n\n                            const recalc = this._recalc;\n                            this._recalc = 0;\n                            this.element._enableWithinBoundsMargin();\n\n                            if (this._recalc) {\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\n                                return this.update();\n                            }\n\n                            this._recalc = recalc;\n                        } else {\n                            this.element._disableWithinBoundsMargin();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                // Set viewport necessary for children scissor calculation.\n                if (this._viewport) {\n                    this._viewport[2] = bboxW;\n                    this._viewport[3] = bboxH;\n                } else {\n                    this._viewport = [0, 0, bboxW, bboxH];\n                }\n            }\n\n            // Filter out bits that should not be copied to the children (currently all are).\n            this._pRecalc = (this._recalc & 135);\n\n            // Clear flags so that future updates are properly detected.\n            this._recalc = 0;\n            this._hasUpdates = false;\n\n            if (this._outOfBounds < 2) {\n                if (this._useRenderToTexture) {\n                    if (this._worldContext.isIdentity()) {\n                        // Optimization.\n                        // The world context is already identity: use the world context as render context to prevents the\n                        // ancestors from having to update the render context.\n                        this._renderContext = this._worldContext;\n                    } else {\n                        // Temporarily replace the render coord attribs by the identity matrix.\n                        // This allows the children to calculate the render context.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n                    }\n                }\n\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        this._children[i].update();\n                    }\n                }\n\n                if (this._useRenderToTexture) {\n                    this._renderContext = r;\n                }\n            } else {\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._hasUpdates) {\n                            this._children[i].update();\n                        } else {\n                            // Make sure we don't lose the 'inherited' updates.\n                            this._children[i]._recalc |= this._pRecalc;\n                            this._children[i].updateOutOfBounds();\n                        }\n                    }\n                }\n            }\n\n            if (this._onAfterUpdate) {\n                this._onAfterUpdate(this.element);\n            }\n        } else {\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\n                this.ctx.updateTreeOrder = -1;\n            } else {\n                this.updateTreeOrder();\n            }\n        }\n    }\n\n    _applyRelativeDimFuncs() {\n        if (this._optFlags & 1) {\n            const x = this._funcX(this._parent.w);\n            if (x !== this._x) {\n                this._localPx += (x - this._x);\n                this._x = x;\n            }\n        }\n        if (this._optFlags & 2) {\n            const y = this._funcY(this._parent.h);\n            if (y !== this._y) {\n                this._localPy += (y - this._y);\n                this._y = y;\n            }\n        }\n\n        let changedDims = false;\n        if (this._optFlags & 4) {\n            const w = this._funcW(this._parent.w);\n            if (w !== this._w) {\n                this._w = w;\n                changedDims = true;\n            }\n        }\n        if (this._optFlags & 8) {\n            const h = this._funcH(this._parent.h);\n            if (h !== this._h) {\n                this._h = h;\n                changedDims = true;\n            }\n        }\n\n        if (changedDims) {\n            // Recalc mount, scale position.\n            this._recalcLocalTranslate();\n\n            this.element.onDimensionsChanged(this._w, this._h);\n        }\n    }\n\n    updateOutOfBounds() {\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\n\n            // Inherit parent out of boundsness.\n            this._outOfBounds = 2;\n\n            if (this._withinBoundsMargin) {\n                this._withinBoundsMargin = false;\n                this.element._disableWithinBoundsMargin();\n            }\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateOutOfBounds();\n                }\n            }\n        }\n    }\n\n    updateTreeOrder() {\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateTreeOrder();\n                }\n            }\n        }\n    }\n\n    _renderSimple() {\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                renderState.setShader(this.activeShader, this._shaderOwner);\n                renderState.setScissor(this._scissor);\n                this.renderState.addQuad(this);\n            }\n\n            // Also add children to the VBO.\n            if (this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n\n    _renderAdvanced() {\n        const hasRenderUpdates = this._hasRenderUpdates;\n\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            let mustRenderChildren = true;\n            let renderTextureInfo;\n            let prevRenderTextureInfo;\n            if (this._useRenderToTexture) {\n                if (this._w === 0 || this._h === 0) {\n                    // Ignore this branch and don't draw anything.\n                    return;\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\n                    this.ctx.renderToTextureCount++;\n                    // Switch to default shader for building up the render texture.\n                    renderState.setShader(renderState.defaultShader, this);\n\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\n\n                    renderTextureInfo = {\n                        nativeTexture: null,\n                        offset: 0,  // Set by CoreRenderState.\n                        w: this._w,\n                        h: this._h,\n                        empty: true,\n                        cleared: false,\n                        ignore: false,\n                        cache: false\n                    };\n\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\n                        /**\n                         * We don't always cache render textures.\n                         *\n                         * The rule is, that caching for a specific render texture is only enabled if:\n                         * - There is a result texture to be updated.\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\n                         *   change while a lower one is not, that lower level will be cached instead.\n                         *\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\n                         * of GPU memory!\n                         *\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\n                         * noticable effect on performance as less render textures need to be allocated.\n                         */\n                        renderTextureInfo.cache = true;\n                        renderState.isCachingTexturizer = true;\n                    }\n\n                    if (!this._texturizer.hasResultTexture()) {\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\n                        //  render-to-texture layer.\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\n                        //  that result texture being filled.\n                        this._texturizer.releaseRenderTexture();\n                    }\n\n                    renderState.setRenderTextureInfo(renderTextureInfo);\n                    renderState.setScissor(null);\n\n                    if (this._displayedTextureSource) {\n                        let r = this._renderContext;\n\n                        // Use an identity context for drawing the displayed texture to the render texture.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n\n                        // Add displayed texture source in local coordinates.\n                        this.renderState.addQuad(this);\n\n                        this._renderContext = r;\n                    }\n                } else {\n                    mustRenderChildren = false;\n                }\n            } else {\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                    renderState.setShader(this.activeShader, this._shaderOwner);\n                    renderState.setScissor(this._scissor);\n                    this.renderState.addQuad(this);\n                }\n            }\n\n            // Also add children to the VBO.\n            if (mustRenderChildren && this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                let updateResultTexture = false;\n                if (mustRenderChildren) {\n                    // Finished refreshing renderTexture.\n                    renderState.finishedRenderTexture();\n\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\n                    //  render-to-texture and filtering.\n                    this._texturizer.empty = renderTextureInfo.empty;\n\n                    if (renderTextureInfo.empty) {\n                        // We ignore empty render textures and do not draw the final quad.\n\n                        // The following cleans up memory and enforces that the result texture is also cleared.\n                        this._texturizer.releaseRenderTexture();\n                    } else if (renderTextureInfo.nativeTexture) {\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\n\n                        renderTextureInfo.ignore = true;\n                    } else {\n                        if (this._texturizer.renderTextureReused) {\n                            // Quad operations must be written to a render texture actually owned.\n                            this._texturizer.releaseRenderTexture();\n                        }\n                        // Just create the render texture.\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\n                    }\n\n                    // Restore the parent's render texture.\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\n\n                    updateResultTexture = true;\n                }\n\n                if (!this._texturizer.empty) {\n                    let resultTexture = this._texturizer.getResultTexture();\n                    if (updateResultTexture) {\n                        if (resultTexture) {\n                            // Logging the update frame can be handy for userland.\n                            resultTexture.update = renderState.stage.frameCounter;\n                        }\n                        this._texturizer.updateResultTexture();\n                    }\n\n                    if (!this._texturizer.renderOffscreen) {\n                        // Render result texture to the actual render target.\n                        renderState.setShader(this.activeShader, this._shaderOwner);\n                        renderState.setScissor(this._scissor);\n\n                        // If no render texture info is set, the cache can be reused.\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\n\n                        renderState.setTexturizer(this._texturizer, cache);\n                        this._stashTexCoords();\n                        if (!this._texturizer.colorize) this._stashColors();\n                        this.renderState.addQuad(this, true);\n                        if (!this._texturizer.colorize) this._unstashColors();\n                        this._unstashTexCoords();\n                        renderState.setTexturizer(null);\n                    }\n                }\n            }\n\n            if (renderTextureInfo && renderTextureInfo.cache) {\n                // Allow siblings to cache.\n                renderState.isCachingTexturizer = false;\n            }\n        }\n    }\n\n    get zSort() {\n        return this._zSort;\n    }\n\n    sortZIndexedChildren() {\n        /**\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\n         * - filtering out elements with a different zParent than this (were removed)\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\n         * - then, finally, we merge-sort both the new array and the 'old' one\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\n         */\n\n        const n = this._zIndexedChildren.length;\n        let ptr = 0;\n        const a = this._zIndexedChildren;\n\n        // Notice that items may occur multiple times due to z-index changing.\n        const b = [];\n        for (let i = 0; i < n; i++) {\n            if (a[i]._zParent === this) {\n                if (a[i]._zIndexResort) {\n                    b.push(a[i]);\n                } else {\n                    if (ptr !== i) {\n                        a[ptr] = a[i];\n                    }\n                    ptr++;\n                }\n            }\n        }\n\n        const m = b.length;\n        if (m) {\n            for (let j = 0; j < m; j++) {\n                b[j]._zIndexResort = false;\n            }\n\n            b.sort(ElementCore.sortZIndexedChildren);\n            const n = ptr;\n            if (!n) {\n                ptr = 0;\n                let j = 0;\n                do {\n                    a[ptr++] = b[j++];\n                } while (j < m);\n\n                if (a.length > ptr) {\n                    // Slice old (unnecessary) part off array.\n                    a.splice(ptr);\n                }\n            } else {\n                // Merge-sort arrays;\n                ptr = 0;\n                let i = 0;\n                let j = 0;\n                const mergeResult = [];\n                do {\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\n\n                    const add = v > 0 ? b[j++] : a[i++];\n\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                        mergeResult[ptr++] = add;\n                    }\n\n                    if (i >= n) {\n                        do {\n                            const add = b[j++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (j < m);\n                        break;\n                    } else if (j >= m) {\n                        do {\n                            const add = a[i++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (i < n);\n                        break;\n                    }\n                } while (true);\n\n                this._zIndexedChildren = mergeResult;\n            }\n        } else {\n            if (a.length > ptr) {\n                // Slice old (unnecessary) part off array.\n                a.splice(ptr);\n            }\n        }\n\n        this._zSort = false;\n    };\n\n    get localTa() {\n        return this._localTa;\n    };\n\n    get localTb() {\n        return this._localTb;\n    };\n\n    get localTc() {\n        return this._localTc;\n    };\n\n    get localTd() {\n        return this._localTd;\n    };\n\n    get element() {\n        return this._element;\n    }\n\n    get renderUpdates() {\n        return this._hasRenderUpdates;\n    }\n\n    get texturizer() {\n        if (!this._texturizer) {\n            this._texturizer = new ElementTexturizer(this);\n        }\n        return this._texturizer;\n    }\n\n    getCornerPoints() {\n        let w = this._worldContext;\n\n        return [\n            w.px,\n            w.py,\n            w.px + this._w * w.ta,\n            w.py + this._w * w.tc,\n            w.px + this._w * w.ta + this._h * w.tb,\n            w.py + this._w * w.tc + this._h * w.td,\n            w.px + this._h * w.tb,\n            w.py + this._h * w.td\n        ];\n    };\n\n    getRenderTextureCoords(relX, relY) {\n        let r = this._renderContext;\n        return [\n            r.px + r.ta * relX + r.tb * relY,\n            r.py + r.tc * relX + r.td * relY\n        ];\n    }\n\n    getAbsoluteCoords(relX, relY) {\n        let w = this._renderContext;\n        return [\n            w.px + w.ta * relX + w.tb * relY,\n            w.py + w.tc * relX + w.td * relY\n        ];\n    }\n\n    collectAtCoord(x, y, children) {\n        // return when branch is hidden\n        if (this._renderContext.alpha === 0) {\n            return;\n        }\n\n        if (this.inBound(x, y)) {\n            if (this._scissor) {\n                if (this.inScissor()) {\n                    children.push(this);\n                }\n            } else {\n                children.push(this);\n            }\n        }\n\n        if (this._children) {\n            const j = this._children.length;\n            for (let i = 0; i < j; i++) {\n                this._children[i].collectAtCoord(x, y, children);\n            }\n        }\n\n        return children.sort(ElementCore.sortZIndexedChildren);\n    }\n\n    inBound(tx, ty) {\n        const c = this.getCornerPoints();\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\n    }\n\n    inScissor() {\n        const sc = this._scissor;\n        const c = this.getCornerPoints();\n\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\n    }\n\n    get layout() {\n        this._ensureLayout();\n        return this._layout;\n    }\n\n    get flex() {\n        return this._layout ? this._layout.flex : null;\n    }\n\n    set flex(v) {\n        this.layout.flex = v;\n    }\n\n    get flexItem() {\n        return this._layout ? this._layout.flexItem : null;\n    }\n\n    set flexItem(v) {\n        this.layout.flexItem = v;\n    }\n\n    isFlexItem() {\n        return !!this._layout && this._layout.isFlexItemEnabled();\n    }\n\n    isFlexContainer() {\n        return !!this._layout && this._layout.isFlexEnabled();\n    }\n\n    enableFlexLayout() {\n        this._ensureLayout();\n    }\n\n    _ensureLayout() {\n        if (!this._layout) {\n            this._layout = new FlexTarget(this);\n        }\n    }\n\n    disableFlexLayout() {\n        this._triggerRecalcTranslate();\n    }\n\n    hasFlexLayout() {\n        return (this._layout && this._layout.isEnabled());\n    }\n\n    setLayout(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this._updateDimensions(w, h);\n    }\n\n    triggerLayout() {\n        this._setRecalc(256);\n    }\n\n    _triggerRecalcTranslate() {\n        this._setRecalc(2);\n    }\n\n}\n\nclass ElementCoreContext {\n\n    constructor() {\n        this.alpha = 1;\n\n        this.px = 0;\n        this.py = 0;\n\n        this.ta = 1;\n        this.tb = 0;\n        this.tc = 0;\n        this.td = 1;\n    }\n\n    isIdentity() {\n        return this.alpha === 1 &&\n            this.px === 0 &&\n            this.py === 0 &&\n            this.ta === 1 &&\n            this.tb === 0 &&\n            this.tc === 0 &&\n            this.td === 1;\n    }\n\n    isSquare() {\n        return this.tb === 0 && this.tc === 0;\n    }\n\n}\n\nElementCoreContext.IDENTITY = new ElementCoreContext();\nElementCore.sortZIndexedChildren = function (a, b) {\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\n};\n\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\nimport Utils from \"../Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a partial (and more efficient) implementation of the event emitter.\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\n * Only if there are multiple listeners, they are combined in an array.\n */\nexport default class EventEmitter {\n\n    constructor() {\n        // This is set (and kept) to true when events are used at all.\n        this._hasEventListeners = false;\n    }\n\n    on(name, listener) {\n        if (!this._hasEventListeners) {\n            this._eventFunction = {}\n            this._eventListeners = {}\n            this._hasEventListeners = true;\n        }\n\n        const current = this._eventFunction[name];\n        if (!current) {\n            this._eventFunction[name] = listener;\n        } else {\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\n                this._eventListeners[name] = [this._eventFunction[name], listener];\n                this._eventFunction[name] = EventEmitter.combiner;\n            } else {\n                this._eventListeners[name].push(listener);\n            }\n        }\n    }\n\n    once(name, listener) {\n        const wrapper = (arg1, arg2, arg3) => {\n            listener(arg1, arg2, arg3);\n            this.off(name, wrapper);\n        }\n        wrapper.__originalFunc = listener;\n        this.on(name, wrapper);\n    }\n\n    has(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    for (const l of listeners) {\n                        if (l === listener || l.__originalFunc == listener) {\n                            return true;\n                        }\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    off(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    let index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    if (listeners.length === 1) {\n                        this._eventFunction[name] = listeners[0];\n                        this._eventListeners[name] = undefined;\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    this._eventFunction[name] = undefined;\n                }\n            }\n        }\n    }\n\n    removeListener(name, listener) {\n        this.off(name, listener);\n    }\n\n    emit(name, arg1, arg2, arg3) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    func(this, name, arg1, arg2, arg3);\n                } else {\n                    func(arg1, arg2, arg3);\n                }\n            }\n        }\n    }\n\n    listenerCount(name) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    return this._eventListeners[name].length;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    removeAllListeners(name) {\n        if (this._hasEventListeners) {\n            delete this._eventFunction[name];\n            delete this._eventListeners[name];\n        }\n    }\n\n}\n\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\n    const listeners = object._eventListeners[name];\n    if (listeners) {\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\n           we need to create a copy to loop over it */\n        for (const listener of [...listeners]) {\n            listener(arg1, arg2, arg3);\n        }\n    }\n}\n\nEventEmitter.addAsMixin = function(cls) {\n    cls.prototype.on = EventEmitter.prototype.on;\n    cls.prototype.once = EventEmitter.prototype.once;\n    cls.prototype.has = EventEmitter.prototype.has;\n    cls.prototype.off = EventEmitter.prototype.off;\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\n    cls.prototype.emit = EventEmitter.prototype.emit;\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"./Utils.mjs\";\nimport Base from \"./Base.mjs\";\n\nexport default class Shader {\n\n    constructor(coreContext) {\n        this._initialized = false;\n\n        this.ctx = coreContext;\n\n        /**\n         * The (enabled) elements that use this shader.\n         * @type {Set<ElementCore>}\n         */\n        this._elements = new Set();\n    }\n\n    static create(stage, v) {\n        let shader;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                shader = stage.renderer.createShader(stage.ctx, v);\n            } else {\n                shader = this.shader;\n            }\n\n            if (shader) {\n                Base.patchObject(shader, v);\n            }\n        } else if (v === null) {\n            shader = stage.ctx.renderState.defaultShader;\n        } else if (v === undefined) {\n            shader = null;\n        } else {\n            if (v.isShader) {\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\n                    console.error(\"[Lightning] Invalid shader type\");\n                    v = null;\n                }\n                shader = v;\n            } else {\n                console.error(\"[Lightning] Please specify a shader type.\");\n                return;\n            }\n        }\n\n        return shader;\n    }\n\n    static getWebGL() {\n        return undefined;\n    }\n\n    static getC2d() {\n        return undefined;\n    }\n\n    addElement(elementCore) {\n        this._elements.add(elementCore);\n    }\n\n    removeElement(elementCore) {\n        this._elements.delete(elementCore);\n        if (!this._elements) {\n            this.cleanup();\n        }\n    }\n\n    redraw() {\n        this._elements.forEach(elementCore => {\n            elementCore.setHasRenderUpdates(2);\n        });\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    useDefault() {\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\n        return false;\n    }\n\n    addEmpty() {\n        // Draws this shader even if there are no quads to be added.\n        // This is handy for custom shaders.\n        return false;\n    }\n\n    cleanup() {\n        // Called when no more enabled elements have this shader.\n    }\n\n    get isShader() {\n        return true;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Texture {\n\n    /**\n     * @param {Stage} stage\n     */\n    constructor(stage) {\n        this.stage = stage;\n\n        this.manager = this.stage.textureManager;\n\n        this.id = Texture.id++;\n\n        /**\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\n         * @type {Set<Element>}\n         */\n        this.elements = new Set();\n\n        /**\n         * The number of enabled elements that are active.\n         * @type {number}\n         */\n        this._activeCount = 0;\n\n        /**\n         * The associated texture source.\n         * Should not be changed.\n         * @type {TextureSource}\n         */\n        this._source = null;\n\n        /**\n         * A resize mode can be set to cover or contain a certain area.\n         * It will reset the texture clipping settings.\n         * When manual texture clipping is performed, the resizeMode is reset.\n         * @type {{type: string, width: number, height: number}}\n         * @private\n         */\n        this._resizeMode = null;\n\n        /**\n         * The texture clipping x-offset.\n         * @type {number}\n         */\n        this._x = 0;\n\n        /**\n         * The texture clipping y-offset.\n         * @type {number}\n         */\n        this._y = 0;\n\n        /**\n         * The texture clipping width. If 0 then full width.\n         * @type {number}\n         */\n        this._w = 0;\n\n        /**\n         * The texture clipping height. If 0 then full height.\n         * @type {number}\n         */\n        this._h = 0;\n\n        /**\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\n         * @type {number}\n         * @private\n         */\n        this._precision = 1;\n\n        /**\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mw = 0;\n\n        /**\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mh = 0;\n\n        /**\n         * Indicates if Texture.prototype.texture uses clipping.\n         * @type {boolean}\n         */\n        this.clipping = false;\n\n        /**\n         * Indicates whether this texture must update (when it becomes used again).\n         * @type {boolean}\n         * @private\n         */\n        this._mustUpdate = true;\n\n    }\n\n    get source() {\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\n            this._performUpdateSource(true);\n            this.stage.removeUpdateSourceTexture(this);\n        }\n        return this._source;\n    }\n\n    addElement(v) {\n        if (!this.elements.has(v)) {\n            this.elements.add(v);\n\n            if (this.elements.size === 1) {\n                if (this._source) {\n                    this._source.addTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.incActiveCount();\n            }\n        }\n    }\n\n    removeElement(v) {\n        if (this.elements.delete(v)) {\n            if (this.elements.size === 0) {\n                if (this._source) {\n                    this._source.removeTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.decActiveCount();\n            }\n        }\n    }\n\n    incActiveCount() {\n        // Ensure that texture source's activeCount has transferred ownership.\n        const source = this.source;\n\n        if (source) {\n            this._checkForNewerReusableTextureSource();\n        }\n\n        this._activeCount++;\n        if (this._activeCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveCount() {\n        const source = this.source; // Force updating the source.\n        this._activeCount--;\n        if (!this._activeCount) {\n            this.becomesUnused();\n        }\n    }\n\n    becomesUsed() {\n        if (this.source) {\n            this.source.incActiveTextureCount();\n        }\n    }\n\n    onLoad() {\n        if (this._resizeMode) {\n            this._applyResizeMode();\n        }\n\n        this.elements.forEach(element => {\n            if (element.active) {\n                element.onTextureSourceLoaded();\n            }\n        });\n    }\n\n    _checkForNewerReusableTextureSource() {\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\n        // In the meantime another texture may have been generated loaded with the same lookup id.\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\n        const source = this.source;\n        if (!source.isLoaded()) {\n            const reusable = this._getReusableTextureSource();\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\n                this._replaceTextureSource(reusable);\n            }\n        } else {\n            if (this._resizeMode) {\n                this._applyResizeMode();\n            }\n        }\n    }\n\n    becomesUnused() {\n        if (this.source) {\n            this.source.decActiveTextureCount();\n        }\n    }\n\n    isUsed() {\n        return this._activeCount > 0;\n    }\n\n    /**\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\n     * @returns {string|null}\n     */\n    _getLookupId() {\n        // Default: do not reuse texture.\n        return null;\n    }\n\n    /**\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\n     * It should return a function that receives a single callback argument.\n     * That callback should be called with the following arguments:\n     *   - err\n     *   - options: object\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\n     *     - w: Number\n     *     - h: Number\n     *     - permanent: Boolean\n     *     - hasAlpha: boolean\n     *     - permultiplyAlpha: boolean\n     *     - flipBlueRed: boolean\n     *     - renderInfo: object\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\n     * to stop fetching an image when it is no longer in element, for example.\n     */\n    _getSourceLoader() {\n        throw new Error(\"Texture.generate must be implemented.\");\n    }\n\n    get isValid() {\n        return this._getIsValid();\n    }\n\n    /**\n     * If texture is not 'valid', no source can be created for it.\n     * @returns {boolean}\n     */\n    _getIsValid() {\n        return true;\n    }\n\n    /**\n     * This must be called when the texture source must be re-generated.\n     */\n    _changed() {\n        // If no element is actively using this texture, ignore it altogether.\n        if (this.isUsed()) {\n            this._updateSource();\n        } else {\n            this._mustUpdate = true;\n        }\n    }\n\n    _updateSource() {\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\n        // properties.\n        this.stage.addUpdateSourceTexture(this);\n    }\n\n    _performUpdateSource(force = false) {\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\n        // again.\n        if (force || this.isUsed()) {\n            this._mustUpdate = false;\n            let source = this._getTextureSource();\n            this._replaceTextureSource(source);\n        }\n    }\n\n    _getTextureSource() {\n        let source = null;\n        if (this._getIsValid()) {\n            const lookupId = this._getLookupId();\n            source = this._getReusableTextureSource(lookupId);\n            if (!source) {\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\n            }\n        }\n        return source;\n    }\n\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\n        if (this._getIsValid()) {\n            if (lookupId) {\n                return this.manager.getReusableTextureSource(lookupId);\n            }\n        }\n        return null;\n    }\n\n    _replaceTextureSource(newSource = null) {\n        let oldSource = this._source;\n\n        this._source = newSource;\n\n        if (this.elements.size) {\n            if (oldSource) {\n                if (this._activeCount) {\n                    oldSource.decActiveTextureCount();\n                }\n\n                oldSource.removeTexture(this);\n\n                // free up unused TextTextures immediately as they are not reused anyway\n                if(this['text'] && !oldSource.isUsed()) {\n                    this.manager.freeTextureSource(oldSource);\n                }\n            }\n\n            if (newSource) {\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\n                newSource.addTexture(this);\n                if (this._activeCount) {\n                    newSource.incActiveTextureCount();\n                }\n            }\n        }\n\n        if (this.isUsed()) {\n            if (newSource) {\n                if (newSource.isLoaded()) {\n\n                    // Apply resizeMode\n                    if (this._resizeMode) {\n                        this._applyResizeMode();\n                    }\n\n                    this.elements.forEach(element => {\n                        if (element.active) {\n                            element._setDisplayedTexture(this);\n                        }\n                    });\n                } else {\n                    const loadError = newSource.loadError;\n                    if (loadError) {\n                        this.elements.forEach(element => {\n                            if (element.active) {\n                                element.onTextureSourceLoadError(loadError);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.elements.forEach(element => {\n                    if (element.active) {\n                        element._setDisplayedTexture(null);\n                    }\n                });\n            }\n        }\n    }\n\n    load() {\n        // Make sure that source is up to date.\n        if (this.source) {\n            if (!this.isLoaded()) {\n                this.source.load(true);\n            }\n        }\n    }\n\n    isLoaded() {\n        return this._source && this._source.isLoaded();\n    }\n\n    get loadError() {\n        return this._source && this._source.loadError;\n    }\n\n    free() {\n        if (this._source) {\n            this._source.free();\n        }\n    }\n\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\n        this._resizeMode = {type, w, h, clipX, clipY};\n        if (this.isLoaded()) {\n            this._applyResizeMode();\n        }\n    }\n\n    get resizeMode() {\n        return this._resizeMode;\n    }\n\n    _clearResizeMode() {\n        this._resizeMode = null;\n    }\n\n    _applyResizeMode() {\n        if (this._resizeMode.type === \"cover\") {\n            this._applyResizeCover();\n        } else if (this._resizeMode.type === \"contain\") {\n            this._applyResizeContain();\n        }\n        this._updatePrecision();\n        this._updateClipping();\n    }\n\n    _applyResizeCover() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = Math.max(scaleX, scaleY);\n        if (!scale) return;\n        this._precision = 1/scale;\n        if (scaleX && scaleX < scale) {\n            const desiredSize = this._precision * this._resizeMode.w;\n            const choppedOffPixels = this._source.w - desiredSize;\n            this._x = choppedOffPixels * this._resizeMode.clipX;\n            this._w = this._source.w - choppedOffPixels;\n        }\n        if (scaleY && scaleY < scale) {\n            const desiredSize = this._precision * this._resizeMode.h;\n            const choppedOffPixels = this._source.h - desiredSize;\n            this._y = choppedOffPixels * this._resizeMode.clipY;\n            this._h = this._source.h - choppedOffPixels;\n        }\n    }\n\n    _applyResizeContain() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = scaleX;\n        if (!scale || scaleY < scale) {\n            scale = scaleY;\n        }\n        if (!scale) return;\n        this._precision = 1/scale;\n    }\n\n    enableClipping(x, y, w, h) {\n        this._clearResizeMode();\n\n        x *= this._precision;\n        y *= this._precision;\n        w *= this._precision;\n        h *= this._precision;\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\n            this._x = x;\n            this._y = y;\n            this._w = w;\n            this._h = h;\n\n            this._updateClipping(true);\n        }\n    }\n\n    disableClipping() {\n        this._clearResizeMode();\n\n        if (this._x || this._y || this._w || this._h) {\n            this._x = 0;\n            this._y = 0;\n            this._w = 0;\n            this._h = 0;\n\n            this._updateClipping();\n        }\n    }\n\n    _updateClipping() {\n        this.clipping = !!(this._x || this._y || this._w || this._h);\n\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onDisplayedTextureClippingChanged();\n            }\n        });\n    }\n\n    _updatePrecision() {\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onPrecisionChanged();\n            }\n        });\n    }\n\n    getNonDefaults() {\n        let nonDefaults = {};\n        nonDefaults['type'] = this.constructor.name;\n        if (this.x !== 0) nonDefaults['x'] = this.x;\n        if (this.y !== 0) nonDefaults['y'] = this.y;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\n        return nonDefaults;\n    }\n\n    get px() {\n        return this._x;\n    }\n\n    get py() {\n        return this._y;\n    }\n\n    get pw() {\n        return this._w;\n    }\n\n    get ph() {\n        return this._h;\n    }\n\n    get x() {\n        return this._x / this._precision;\n    }\n    set x(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._x !== v) {\n            this._x = v;\n            this._updateClipping();\n        }\n    }\n\n    get y() {\n        return this._y / this._precision;\n    }\n    set y(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._y !== v) {\n            this._y = v;\n            this._updateClipping();\n        }\n    }\n\n    get w() {\n        return this._w / this._precision;\n    }\n\n    set w(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._w !== v) {\n            this._w = v;\n            this._updateClipping();\n        }\n    }\n\n    get h() {\n        return this._h / this._precision;\n    }\n\n    set h(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._h !== v) {\n            this._h = v;\n            this._updateClipping();\n        }\n    }\n\n    get precision() {\n        return this._precision;\n    }\n\n    set precision(v) {\n        this._clearResizeMode();\n        if (this._precision !== v) {\n            this._precision = v;\n            this._updatePrecision();\n        }\n    }\n\n    isAutosizeTexture() {\n        return true;\n    }\n\n    getRenderWidth() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\n    }\n\n    getRenderHeight() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nTexture.prototype.isTexture = true;\n\nTexture.id = 0;\n\nimport Base from \"./Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class ImageTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._src = undefined;\n        this._hasAlpha = false;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set src(v) {\n        if (this._src !== v) {\n            this._src = v;\n            this._changed();\n        }\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    set hasAlpha(v) {\n        if (this._hasAlpha !== v) {\n            this._hasAlpha = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this._src;\n    }\n\n    _getLookupId() {\n        return this._src;\n    }\n\n    _getSourceLoader() {\n        let src = this._src;\n        let hasAlpha = this._hasAlpha;\n        if (this.stage.getOption('srcBasePath')) {\n            var fc = src.charCodeAt(0);\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\n                // Alphabetical or dot: prepend base path.\n                src = this.stage.getOption('srcBasePath') + src;\n            }\n        }\n\n        return (cb) => {\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\n        }\n    }\n\n    getNonDefaults() {\n        const obj = super.getNonDefaults();\n        if (this._src) {\n            obj.src = this._src;\n        }\n        return obj;\n    }\n\n}\n\n","/**\n * Returns CSS font setting string for use in canvas context.\n *\n * @private\n * @param {string | string[]} fontFace\n * @param {string} fontStyle\n * @param {number} fontSize\n * @param {number} precision\n * @param {string} defaultFontFace\n * @returns {string}\n */\nexport function getFontSetting(fontFace, fontStyle, fontSize, precision, defaultFontFace) {\n    let ff = fontFace;\n\n    if (!Array.isArray(ff)) {\n        ff = [ff];\n    }\n\n    let ffs = [];\n    for (let i = 0, n = ff.length; i < n; i++) {\n        let curFf = ff[i];\n        // Replace the default font face `null` with the actual default font face set\n        // on the stage.\n        if (curFf === null) {\n            curFf = defaultFontFace;\n        }\n        if (curFf === \"serif\" || curFf === \"sans-serif\") {\n            ffs.push(curFf);\n        } else {\n            ffs.push(`\"${curFf}\"`);\n        }\n    }\n\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\n}\n\n/**\n * Returns true if the given character is a zero-width space.\n *\n * @param {string} space\n * @returns {boolean}\n */\nexport function isZeroWidthSpace(space) {\n    return space === '' || space === '\\u200B';\n}\n\n/**\n * Returns true if the given character is a zero-width space or a regular space.\n *\n * @param {string} space\n * @returns {boolean}\n */\nexport function isSpace(space) {\n    return isZeroWidthSpace(space) || space === ' ';\n}\n\n/**\n * Converts a string into an array of tokens and the words between them.\n *\n * @param {RegExp} tokenRegex\n * @param {string} text\n * @returns {string[]}\n */\nexport function tokenizeString(tokenRegex, text) {\n    const delimeters = text.match(tokenRegex) || [];\n    const words = text.split(tokenRegex) || [];\n\n    let final = [];\n    for (let i = 0; i < words.length; i++) {\n        final.push(words[i], delimeters[i])\n    }\n    final.pop()\n    return final.filter((word) => word != '');\n}\n\n/**\n * Measure the width of a string accounting for letter spacing.\n *\n * @param {CanvasRenderingContext2D} context\n * @param {string} word\n * @param {number} space\n * @returns\n */\nexport function measureText(context, word, space = 0) {\n    if (!space) {\n        return context.measureText(word).width;\n    }\n    return word.split('').reduce((acc, char) => {\n        // Zero-width spaces should not include letter spacing.\n        // And since we know the width of a zero-width space is 0, we can skip\n        // measuring it.\n        if (isZeroWidthSpace(char)) {\n            return acc;\n        }\n        return acc + context.measureText(char).width + space;\n    }, 0);\n}\n\n/**\n * Applies newlines to a string to have it optimally fit into the horizontal\n * bounds set by the Text object's wordWrapWidth property.\n *\n * @param {CanvasRenderingContext2D} context\n * @param {string} text\n * @param {number} wordWrapWidth\n * @param {number} letterSpacing\n * @param {number} indent\n * @returns\n */\nexport function wrapText(context, text, wordWrapWidth, letterSpacing, indent) {\n    // Greedy wrapping algorithm that will wrap words as the line grows longer.\n    // than its horizontal bounds.\n    const spaceRegex = / |\\u200B/g;\n    let lines = text.split(/\\r?\\n/g);\n    let allLines = [];\n    let realNewlines = [];\n    for (let i = 0; i < lines.length; i++) {\n        let resultLines = [];\n        let result = '';\n        let spaceLeft = wordWrapWidth - indent;\n        let words = lines[i].split(spaceRegex);\n        let spaces = lines[i].match(spaceRegex) || [];\n        for (let j = 0; j < words.length; j++) {\n            const space = spaces[j - 1] || '';\n            const word = words[j];\n            const wordWidth = measureText(context, word, letterSpacing);\n            const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);\n            if (j === 0 || wordWidthWithSpace > spaceLeft) {\n                // Skip printing the newline if it's the first word of the line that is.\n                // greater than the word wrap width.\n                if (j > 0) {\n                    resultLines.push(result);\n                    result = '';\n                }\n                result += word;\n                spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\n            }\n            else {\n                spaceLeft -= wordWidthWithSpace;\n                result += space + word;\n            }\n        }\n\n        resultLines.push(result);\n        result = '';\n\n        allLines = allLines.concat(resultLines);\n\n        if (i < lines.length - 1) {\n            realNewlines.push(allLines.length);\n        }\n    }\n\n    return {l: allLines, n: realNewlines};\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, measureText, wrapText } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRenderer {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        this._context.font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n        );\n        this._context.textBaseline = this._settings.textBaseline;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('[Lightning] Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('[Lightning] Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        let lineHeight = this._settings.lineHeight * precision;\n        const w = this._settings.w * precision;\n        const h = this._settings.h * precision;\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\n        const textIndent = this._settings.textIndent * precision;\n\n        // Set font properties.\n        this.setFontProperties();\n\n        // Total width.\n        let width = w || this._stage.getOption('w');\n\n        // Inner width.\n        let innerWidth = width - (paddingLeft);\n        if (innerWidth < 10) {\n            width += (10 - innerWidth);\n            innerWidth = 10;\n        }\n\n        if (!wordWrapWidth) {\n            wordWrapWidth = innerWidth\n        }\n\n        // Text overflow\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix)\n        }\n\n        // word wrap\n        // preserve original text\n        let linesInfo;\n        if (this._settings.wordWrap) {\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\n        } else {\n            linesInfo = {l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: []};\n            let i, n = linesInfo.l.length;\n            for (let i = 0; i < n - 1; i++) {\n                linesInfo.n.push(i);\n            }\n        }\n        let lines = linesInfo.l;\n\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\n            let usedLines = lines.slice(0, this._settings.maxLines);\n\n            let otherLines = null;\n            if (this._settings.maxLinesSuffix) {\n                // Wrap again with max lines suffix enabled.\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\n            } else {\n                otherLines = [''];\n            }\n\n            // Re-assemble the remaining text.\n            let i, n = lines.length;\n            let j = 0;\n            let m = linesInfo.n.length;\n            for (i = this._settings.maxLines; i < n; i++) {\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\n                if (i + 1 < m && linesInfo.n[i + 1]) {\n                    j++;\n                }\n            }\n\n            renderInfo.remainingText = otherLines.join(\"\\n\");\n\n            renderInfo.moreTextLines = true;\n\n            lines = usedLines;\n        } else {\n            renderInfo.moreTextLines = false;\n            renderInfo.remainingText = \"\";\n        }\n\n        // calculate text width\n        let maxLineWidth = 0;\n        let lineWidths = [];\n        for (let i = 0; i < lines.length; i++) {\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\n            lineWidths.push(lineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        renderInfo.lineWidths = lineWidths;\n\n        if (!w) {\n            // Auto-set width to max text length.\n            width = maxLineWidth + paddingLeft + paddingRight;\n            innerWidth = maxLineWidth;\n        }\n\n        // calculate text height\n        lineHeight = lineHeight || fontSize;\n\n        let height;\n        if (h) {\n            height = h;\n        } else {\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\n        }\n\n        if (offsetY === null) {\n            offsetY = fontSize;\n        }\n\n        renderInfo.w = width;\n        renderInfo.h = height;\n        renderInfo.lines = lines;\n        renderInfo.precision = precision;\n\n        if (!width) {\n            // To prevent canvas errors.\n            width = 1;\n        }\n\n        if (!height) {\n            // To prevent canvas errors.\n            height = 1;\n        }\n\n        if (cutSx || cutEx) {\n            width = Math.min(width, cutEx - cutSx);\n        }\n\n        if (cutSy || cutEy) {\n            height = Math.min(height, cutEy - cutSy);\n        }\n\n        renderInfo.width = width;\n        renderInfo.innerWidth = innerWidth;\n        renderInfo.height = height;\n        renderInfo.fontSize = fontSize;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutEy = cutEy;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.lineWidths = lineWidths;\n        renderInfo.offsetY = offsetY;\n        renderInfo.paddingLeft = paddingLeft;\n        renderInfo.paddingRight = paddingRight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textIndent = textIndent;\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n\n        // Add extra margin to prevent issue with clipped text when scaling.\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(renderInfo.height);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        let linePositionX;\n        let linePositionY;\n\n        let drawLines = [];\n\n        // Draw lines line by line.\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\n\n            // By default, text is aligned to top\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\n\n            if (this._settings.verticalAlign == 'middle') {\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\n            } else if (this._settings.verticalAlign == 'bottom') {\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\n            }\n\n            if (this._settings.textAlign === 'right') {\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\n            } else if (this._settings.textAlign === 'center') {\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\n            }\n            linePositionX += renderInfo.paddingLeft;\n\n            drawLines.push({text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i]});\n        }\n\n        // Highlight.\n        if (this._settings.highlight) {\n            let color = this._settings.highlightColor || 0x00000000;\n\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\n            const offset = this._settings.highlightOffset * precision;\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(color);\n            for (let i = 0; i < drawLines.length; i++) {\n                let drawLine = drawLines[i];\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\n        for (let i = 0, n = drawLines.length; i < n; i++) {\n            let drawLine = drawLines[i];\n\n            if (renderInfo.letterSpacing === 0) {\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y);\n            } else {\n                const textSplit = drawLine.text.split('');\n                let x = drawLine.x;\n                for (let i = 0, j = textSplit.length; i < j; i++) {\n                    this._context.fillText(textSplit[i], x, drawLine.y);\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\n                }\n            }\n        }\n\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        this.renderInfo = renderInfo;\n    };\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        if (this._stage.getOption('RTL')) {\n            return (wordWrapWidth >= suffixWidth ? suffix : '') + word.substring(0, cutoffIndex);\n        } else {\n            return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\n        }\n    }\n\n    /**\n     * See {@link wrapText}\n     *\n     * @param {string} text\n     * @param {number} wordWrapWidth\n     * @param {number} letterSpacing\n     * @param {number} indent\n     * @returns\n     */\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\n        return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isSpace, measureText, tokenizeString } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRendererAdvanced {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        const font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace')\n        );\n        this._context.font = font;\n        this._context.textBaseline = this._settings.textBaseline;\n        return font;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\n        // const h = this._settings.h * precision;\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = this._settings.letterSpacing || 0;\n\n        // Set font properties.\n        renderInfo.baseFont = this.setFontProperties();\n\n        renderInfo.w = w;\n        renderInfo.width = w;\n        renderInfo.text = this._settings.text;\n        renderInfo.precision = precision;\n        renderInfo.fontSize = fontSize;\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textAlign = this._settings.textAlign;\n        renderInfo.textColor = this._settings.textColor;\n        renderInfo.verticalAlign = this._settings.verticalAlign;\n        renderInfo.highlight = this._settings.highlight;\n        renderInfo.highlightColor = this._settings.highlightColor;\n        renderInfo.highlightHeight = this._settings.highlightHeight;\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\n        renderInfo.highlightOffset = this._settings.highlightOffset;\n        renderInfo.paddingLeft = this._settings.paddingLeft;\n        renderInfo.paddingRight = this._settings.paddingRight;\n        renderInfo.maxLines = this._settings.maxLines;\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\n        renderInfo.textOverflow = this._settings.textOverflow;\n        renderInfo.wordWrap = this._settings.wordWrap;\n        renderInfo.wordWrapWidth = wordWrapWidth;\n        renderInfo.shadow = this._settings.shadow;\n        renderInfo.shadowColor = this._settings.shadowColor;\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\n        renderInfo.shadowBlur = this._settings.shadowBlur;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEy = cutEy;\n        renderInfo.textIndent = this._settings.textIndent * precision;\n        renderInfo.wordBreak = this._settings.wordBreak;\n\n        let text = renderInfo.text;\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\n\n        // Text overflow\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\n        }\n\n        text = this.tokenize(text);\n        text = this.parse(text);\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\n\n        if (renderInfo.textIndent) {\n            text = this.indent(text, renderInfo.textIndent);\n        }\n\n        if (renderInfo.wordBreak) {\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\n            this.resetFontStyle()\n        }\n\n        // Calculate detailed drawing information\n        let x = paddingLeft;\n        let lineNo = 0;\n\n        for (const t of text) {\n            // Wrap text\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\n                x = paddingLeft;\n                lineNo += 1;\n            }\n            t.lineNo = lineNo;\n\n            if (t.text == '\\n') {\n                continue;\n            }\n\n            t.x = x;\n            x += t.width;\n        }\n        renderInfo.lineNum = lineNo + 1;\n\n        if (this._settings.h) {\n            renderInfo.h = this._settings.h;\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\n        } else {\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\n        }\n\n        // This calculates the baseline offset in pixels from the font size.\n        // To retrieve this ratio, you would do this calculation:\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\n        //\n        // This give you the ratio for the baseline, which is then used to figure out\n        // where the baseline is relative to the bottom of the text bounding box.\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\n\n        // Vertical align\n        let vaOffset = 0;\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\n            vaOffset = -baselineOffsetInPx;\n        } else if (renderInfo.verticalAlign == 'middle') {\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\n        } else if (this._settings.verticalAlign == 'bottom') {\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\n        }\n\n        // Calculate lines information\n        renderInfo.lines = []\n        for (let i = 0; i < renderInfo.lineNum; i++) {\n            renderInfo.lines[i] = {\n                width: 0,\n                x: 0,\n                y: renderInfo.lineHeight * i + vaOffset,\n                text: [],\n            }\n        }\n\n        for (let t of text) {\n            renderInfo.lines[t.lineNo].text.push(t);\n        }\n\n        // Filter out white spaces at beginning and end of each line\n        for (const l of renderInfo.lines) {\n            if (l.text.length == 0) {\n                continue;\n            }\n\n            const firstWord = l.text[0].text;\n            const lastWord = l.text[l.text.length - 1].text;\n\n            if (firstWord == '\\n') {\n                l.text.shift();\n            }\n            if (isSpace(lastWord) || lastWord == '\\n') {\n                l.text.pop();\n            }\n        }\n\n\n        // Calculate line width\n        for (let l of renderInfo.lines) {\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\n        }\n\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\n        renderInfo.w = renderInfo.width;\n\n        // Apply maxLinesSuffix\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\n            const index = renderInfo.maxLines - 1;\n            let lastLineText = text.filter((t) => t.lineNo == index)\n            let suffix = renderInfo.maxLinesSuffix;\n            suffix = this.tokenize(suffix);\n            suffix = this.parse(suffix);\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\n            for (const s of suffix) {\n                s.lineNo = index;\n                s.x = 0;\n                lastLineText.push(s)\n            }\n\n            const spl = suffix.length + 1\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\n                lastLineText.splice(lastLineText.length - spl, 1);\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n                if (lastLineText.length < spl) {\n                    break;\n                }\n            }\n            this.alignLine(lastLineText, lastLineText[0].x)\n\n            renderInfo.lines[index].text = lastLineText;\n            renderInfo.lines[index].width = _w;\n        }\n\n        // Horizontal alignment offset\n        if (renderInfo.textAlign == 'center') {\n            for (let l of renderInfo.lines) {\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\n            }\n        } else if (renderInfo.textAlign == 'right') {\n            for (let l of renderInfo.lines) {\n                l.x = renderInfo.width - l.width - paddingLeft;\n            }\n        }\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n        const paddingLeft = renderInfo.paddingLeft * precision;\n\n        // Set canvas dimensions\n        let canvasWidth = renderInfo.w || renderInfo.width;\n        if (renderInfo.cutSx || renderInfo.cutEx) {\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\n        }\n\n        let canvasHeight = renderInfo.h;\n        if (renderInfo.cutSy || renderInfo.cutEy) {\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\n        }\n\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(canvasHeight);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        // Cut\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        // Highlight\n        if (renderInfo.highlight) {\n            const hlColor = renderInfo.highlightColor || 0x00000000;\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\n            for (let i = 0; i < lineNum; i++) {\n                const l = renderInfo.lines[i];\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        // Draw text\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\n        let currentColor = defaultColor;\n        this._context.fillStyle = defaultColor;\n        for (const line of renderInfo.lines) {\n            for (const t of line.text) {\n                let lx = 0;\n\n                if (t.text == '\\n') {\n                    continue;\n                }\n\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\n                    continue;\n                }\n\n                if (t.color != currentColor) {\n                    currentColor = t.color;\n                    this._context.fillStyle = currentColor;\n                }\n\n                this._context.font = t.fontStyle;\n\n                // Draw with letter spacing\n                if (t.letters) {\n                    for (let l of t.letters) {\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                        lx += l.width;\n                    }\n                // Standard drawing\n                } else {\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                }\n            }\n        }\n\n        // Reset text shadow\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        // Reset cut translation\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        // Postprocess renderInfo.lines to be compatible with standard version\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\n        if (renderInfo.maxLines) {\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\n        }\n\n\n        this.renderInfo = renderInfo;\n\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n    tokenize(text) {\n        return tokenizeString(/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g, text);\n    }\n\n    parse(tokens) {\n        let italic = 0;\n        let bold = 0;\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\n        let color = 0;\n\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\n\n        return tokens.map((t) => {\n            if (t == '<i>') {\n                italic += 1;\n                t = '';\n            } else if (t == '</i>' && italic > 0) {\n                italic -= 1;\n                t = '';\n            } else if (t == '<b>') {\n                bold += 1;\n                t = '';\n            } else if (t == '</b>' && bold > 0) {\n                bold -= 1;\n                t = '';\n            } else if (t == '</color>') {\n                if (colorStack.length > 1) {\n                    color -= 1;\n                    colorStack.pop();\n                }\n                t = '';\n            } else if (colorRegexp.test(t)) {\n                const matched = colorRegexp.exec(t);\n                colorStack.push(\n                    StageUtils.getRgbaString(parseInt(matched[1]))\n                );\n                color += 1;\n                t = '';\n\n            }\n\n            return {\n                text: t,\n                italic: italic,\n                bold: bold,\n                color: colorStack[color],\n            }\n        })\n        .filter((o) => o.text != '');\n    }\n\n    applyFontStyle(word, baseFont) {\n        let font = baseFont;\n        if (word.bold) {\n            font = 'bold ' + font;\n        }\n        if (word.italic) {\n            font = 'italic ' + font;\n        }\n        this._context.font = font\n        word.fontStyle = font;\n    }\n\n    resetFontStyle(baseFont) {\n        this._context.font = baseFont;\n    }\n\n    measure(parsed, letterSpacing = 0, baseFont) {\n        for (const p of parsed) {\n            this.applyFontStyle(p, baseFont);\n            p.width = this.measureText(p.text, letterSpacing);\n\n            // Letter by letter detail for letter spacing\n            if (letterSpacing > 0) {\n                p.letters = p.text.split('').map((l) => {return {text: l}});\n                for (let l of p.letters) {\n                    l.width = this.measureText(l.text, letterSpacing);\n                }\n            }\n\n        }\n        this.resetFontStyle(baseFont);\n        return parsed;\n    }\n\n    indent(parsed, textIndent) {\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\n        return parsed;\n    }\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\n    }\n\n    _getBreakIndex(word, width) {\n        const wordLen = word.length;\n        const wordWidth = this.measureText(word);\n\n        if (wordWidth <= width) {\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\n        }\n\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > width) {\n            while (breakIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth > width) {\n                    breakIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (breakIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth < width) {\n                    breakIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    breakIndex -=1;\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                    break;\n                }\n            }\n        }\n        return {breakIndex, truncWordWidth};\n\n    }\n\n    wordBreak(word, width, baseFont) {\n        if (!word.text) {\n            return word\n        }\n        this.applyFontStyle(word, baseFont)\n        const parts = [];\n        let text = word.text;\n        if (!word.letters) {\n            while (true) {\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = truncWordWidth;\n\n                if (breakIndex === text.length) {\n                    break;\n                }\n\n                text = text.slice(breakIndex);\n            }\n        } else {\n            let totalWidth = 0;\n            let letters = [];\n            let breakIndex = 0;\n            for (const l of word.letters) {\n                if (totalWidth + l.width >= width) {\n                    parts.push({...word});\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\n                    parts[parts.length - 1].width = totalWidth;\n                    parts[parts.length - 1].letters = letters;\n                    text = text.slice(breakIndex);\n                    totalWidth = 0;\n                    letters = [];\n                    breakIndex = 0;\n\n                } else {\n                    breakIndex += 1;\n                    letters.push(l);\n                    totalWidth += l.width;\n                }\n            }\n\n            if (totalWidth > 0) {\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = totalWidth;\n                parts[parts.length - 1].letters = letters;\n            }\n        }\n\n        return parts;\n    }\n\n    alignLine(parsed, initialX = 0) {\n        let prevWidth = 0;\n        let prevX = initialX;\n        for (const word of parsed) {\n            if (word.text == '\\n') {\n                continue;\n            }\n            word.x = prevX + prevWidth;\n            prevX = word.x;\n            prevWidth = word.width;\n        }\n\n    }\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class TextTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        // We use the stage precision as the default precision in case of a text texture.\n        this._precision = this.stage.getOption('precision');\n    }\n\n    static renderer(stage, canvas, settings) {\n        if (this.advancedRenderer) {\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\n        } else {\n            return new TextTextureRenderer(stage, canvas, settings);\n        }\n    }\n\n    get text() {\n        return this._text;\n    }\n\n    set text(v) {\n        if (this._text !== v) {\n            this._text = \"\" + v;\n            this._changed();\n        }\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (this._w !== v) {\n            this._w = v;\n            this._changed();\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (this._h !== v) {\n            this._h = v;\n            this._changed();\n        }\n    }\n\n    get fontStyle() {\n        return this._fontStyle;\n    }\n\n    set fontStyle(v) {\n        if (this._fontStyle !== v) {\n            this._fontStyle = v;\n            this._changed();\n        }\n    }\n\n    get fontBaselineRatio() {\n        return this._fontBaselineRatio;\n    }\n    \n    set fontBaselineRatio(v) {\n        if (this._fontBaselineRatio !== v) {\n            this._fontBaselineRatio = v;\n            this._changed();\n        }\n    }\n\n    get fontSize() {\n        return this._fontSize;\n    }\n\n    set fontSize(v) {\n        if (this._fontSize !== v) {\n            this._fontSize = v;\n            this._changed();\n        }\n    }\n\n    get fontFace() {\n        return this._fontFace;\n    }\n\n    set fontFace(v) {\n        if (this._fontFace !== v) {\n            this._fontFace = v;\n            this._changed();\n        }\n    }\n\n    get wordWrap() {\n        return this._wordWrap;\n    }\n\n    set wordWrap(v) {\n        if (this._wordWrap !== v) {\n            this._wordWrap = v;\n            this._changed();\n        }\n    }\n\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n\n    set wordWrapWidth(v) {\n        if (this._wordWrapWidth !== v) {\n            this._wordWrapWidth = v;\n            this._changed();\n        }\n    }\n\n    get wordBreak() {\n        return this._wordBreak;\n    }\n\n    set wordBreak(v) {\n        if (this._wordBreak !== v) {\n            this._wordBreak = v;\n            this._changed();\n        }\n    }\n\n    get textOverflow() {\n        return this._textOverflow;\n    }\n\n    set textOverflow(v) {\n        if (v != this._textOverflow) {\n            this._textOverflow = v;\n            this._changed();\n        }\n    }\n\n    get lineHeight() {\n        return this._lineHeight;\n    }\n\n    set lineHeight(v) {\n        if (this._lineHeight !== v) {\n            this._lineHeight = v;\n            this._changed();\n        }\n    }\n\n    get textBaseline() {\n        return this._textBaseline;\n    }\n\n    set textBaseline(v) {\n        if (this._textBaseline !== v) {\n            this._textBaseline = v;\n            this._changed();\n        }\n    }\n\n    get textAlign() {\n        return this._textAlign;\n    }\n\n    set textAlign(v) {\n        if (this._textAlign !== v) {\n            this._textAlign = v;\n            this._changed();\n        }\n    }\n\n    get verticalAlign() {\n        return this._verticalAlign;\n    }\n\n    set verticalAlign(v) {\n        if (this._verticalAlign !== v) {\n            this._verticalAlign = v;\n            this._changed();\n        }\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        if (this._offsetY !== v) {\n            this._offsetY = v;\n            this._changed();\n        }\n    }\n\n    get maxLines() {\n        return this._maxLines;\n    }\n\n    set maxLines(v) {\n        if (this._maxLines !== v) {\n            this._maxLines = v;\n            this._changed();\n        }\n    }\n\n    get maxLinesSuffix() {\n        return this._maxLinesSuffix;\n    }\n\n    set maxLinesSuffix(v) {\n        if (this._maxLinesSuffix !== v) {\n            this._maxLinesSuffix = v;\n            this._changed();\n        }\n    }\n\n    get textColor() {\n        return this._textColor;\n    }\n\n    set textColor(v) {\n        if (this._textColor !== v) {\n            this._textColor = v;\n            this._changed();\n        }\n    }\n\n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingLeft(v) {\n        if (this._paddingLeft !== v) {\n            this._paddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingRight(v) {\n        if (this._paddingRight !== v) {\n            this._paddingRight = v;\n            this._changed();\n        }\n    }\n\n    get shadow() {\n        return this._shadow;\n    }\n\n    set shadow(v) {\n        if (this._shadow !== v) {\n            this._shadow = v;\n            this._changed();\n        }\n    }\n\n    get shadowColor() {\n        return this._shadowColor;\n    }\n\n    set shadowColor(v) {\n        if (this._shadowColor !== v) {\n            this._shadowColor = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(v) {\n        if (this._shadowOffsetX !== v) {\n            this._shadowOffsetX = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(v) {\n        if (this._shadowOffsetY !== v) {\n            this._shadowOffsetY = v;\n            this._changed();\n        }\n    }\n\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(v) {\n        if (this._shadowBlur !== v) {\n            this._shadowBlur = v;\n            this._changed();\n        }\n    }\n\n    get highlight() {\n        return this._highlight;\n    }\n\n    set highlight(v) {\n        if (this._highlight !== v) {\n            this._highlight = v;\n            this._changed();\n        }\n    }\n\n    get highlightHeight() {\n        return this._highlightHeight;\n    }\n\n    set highlightHeight(v) {\n        if (this._highlightHeight !== v) {\n            this._highlightHeight = v;\n            this._changed();\n        }\n    }\n\n    get highlightColor() {\n        return this._highlightColor;\n    }\n\n    set highlightColor(v) {\n        if (this._highlightColor !== v) {\n            this._highlightColor = v;\n            this._changed();\n        }\n    }\n\n    get highlightOffset() {\n        return this._highlightOffset;\n    }\n\n    set highlightOffset(v) {\n        if (this._highlightOffset !== v) {\n            this._highlightOffset = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingLeft() {\n        return this._highlightPaddingLeft;\n    }\n\n    set highlightPaddingLeft(v) {\n        if (this._highlightPaddingLeft !== v) {\n            this._highlightPaddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingRight() {\n        return this._highlightPaddingRight;\n    }\n\n    set highlightPaddingRight(v) {\n        if (this._highlightPaddingRight !== v) {\n            this._highlightPaddingRight = v;\n            this._changed();\n        }\n    }\n\n    get cutSx() {\n        return this._cutSx;\n    }\n\n    set cutSx(v) {\n        if (this._cutSx !== v) {\n            this._cutSx = v;\n            this._changed();\n        }\n    }\n\n    get cutEx() {\n        return this._cutEx;\n    }\n\n    set cutEx(v) {\n        if (this._cutEx !== v) {\n            this._cutEx = v;\n            this._changed();\n        }\n    }\n\n    get cutSy() {\n        return this._cutSy;\n    }\n\n    set cutSy(v) {\n        if (this._cutSy !== v) {\n            this._cutSy = v;\n            this._changed();\n        }\n    }\n\n    get cutEy() {\n        return this._cutEy;\n    }\n\n    set cutEy(v) {\n        if (this._cutEy !== v) {\n            this._cutEy = v;\n            this._changed();\n        }\n    }\n\n    get advancedRenderer() {\n        return this._advancedRenderer;\n    }\n\n    set advancedRenderer(v) {\n        if (this._advancedRenderer !== v) {\n            this._advancedRenderer = v;\n            this._changed();\n        }\n    }\n\n    set letterSpacing(v) {\n        if (this._letterSpacing !== v) {\n            this._letterSpacing = v;\n            this._changed();\n        }\n    }\n\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n\n    set textIndent(v) {\n        if (this._textIndent !== v) {\n            this._textIndent = v;\n            this._changed();\n        }\n    }\n\n    get textIndent() {\n        return this._textIndent;\n    }\n\n    get precision() {\n        return super.precision;\n    }\n\n    set precision(v) {\n        // We actually draw differently when the precision changes.\n        if (this.precision !== v) {\n            super.precision = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this.text;\n    }\n\n    _getLookupId() {\n        let parts = [];\n\n        if (this.w !== 0) parts.push(\"w \" + this.w);\n        if (this.h !== 0) parts.push(\"h \" + this.h);\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\n        parts.push(\"pc\" + this.precision);\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\n\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\n\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\n\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\n        return id;\n    }\n\n    _getSourceLoader() {\n        const args = this.cloneArgs();\n\n        const gl = this.stage.gl;\n\n        return function (cb) {\n            const canvas = this.stage.platform.getDrawingCanvas();\n            const renderer = (args.advancedRenderer)\n              ? new TextTextureRendererAdvanced(this.stage, canvas, args)\n              : new TextTextureRenderer(this.stage, canvas, args);\n            \n            const p = renderer.draw();\n\n            const texParams = {};\n\n            const sharpCfg = this.stage.getOption('fontSharp');\n            let sharpen = false;\n\n            // Prevent text blur when text texture is downscaled\n            if (Utils.isBoolean(sharpCfg)) {\n                sharpen = sharpCfg;\n            } else if (Utils.isObject(sharpCfg)) {\n                const precision = this.stage.getRenderPrecision();\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\n            }\n\n            if (gl && sharpen) {\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            if (p) {\n                p.then(() => {\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\n                    cb(null, Object.assign({\n                        renderInfo: renderer.renderInfo,\n                        throttle: false,\n                        texParams: texParams,\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n                }).catch((err) => {\n                    cb(err);\n                });\n            } else {\n                cb(null, Object.assign({\n                    renderInfo: renderer.renderInfo,\n                    throttle: false,\n                    texParams: texParams,\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n            }\n        };\n    }\n\n\n    getNonDefaults() {\n        const nonDefaults = super.getNonDefaults();\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\n\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\n\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\n        return nonDefaults;\n    }\n\n    cloneArgs() {\n        let obj = {};\n        obj.text = this._text;\n        obj.w = this._w;\n        obj.h = this._h;\n        obj.fontStyle = this._fontStyle;\n        obj.fontSize = this._fontSize;\n        obj.fontBaselineRatio = this._fontBaselineRatio;\n        obj.fontFace = this._fontFace;\n        obj.wordWrap = this._wordWrap;\n        obj.wordWrapWidth = this._wordWrapWidth;\n        obj.wordBreak = this._wordBreak;\n        obj.textOverflow = this._textOverflow;\n        obj.lineHeight = this._lineHeight;\n        obj.textBaseline = this._textBaseline;\n        obj.textAlign = this._textAlign;\n        obj.verticalAlign = this._verticalAlign;\n        obj.offsetY = this._offsetY;\n        obj.maxLines = this._maxLines;\n        obj.maxLinesSuffix = this._maxLinesSuffix;\n        obj.precision = this._precision;\n        obj.textColor = this._textColor;\n        obj.paddingLeft = this._paddingLeft;\n        obj.paddingRight = this._paddingRight;\n        obj.shadow = this._shadow;\n        obj.shadowColor = this._shadowColor;\n        obj.shadowOffsetX = this._shadowOffsetX;\n        obj.shadowOffsetY = this._shadowOffsetY;\n        obj.shadowBlur = this._shadowBlur;\n        obj.highlight = this._highlight;\n        obj.highlightHeight = this._highlightHeight;\n        obj.highlightColor = this._highlightColor;\n        obj.highlightOffset = this._highlightOffset;\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\n        obj.highlightPaddingRight = this._highlightPaddingRight;\n        obj.letterSpacing = this._letterSpacing;\n        obj.textIndent = this._textIndent;\n        obj.cutSx = this._cutSx;\n        obj.cutEx = this._cutEx;\n        obj.cutSy = this._cutSy;\n        obj.cutEy = this._cutEy;\n        obj.advancedRenderer = this._advancedRenderer;\n        return obj;\n    }\n\n\n}\n\n// Because there are so many properties, we prefer to use the prototype for default values.\n// This causes a decrease in performance, but also a decrease in memory usage.\nlet proto = TextTexture.prototype;\nproto._text = \"\";\nproto._w = 0;\nproto._h = 0;\nproto._fontStyle = \"normal\";\nproto._fontSize = 40;\nproto._fontFace = null;\nproto._wordWrap = true;\nproto._wordWrapWidth = 0;\nproto._wordBreak = false;\nproto._textOverflow = \"\";\nproto._lineHeight = null;\nproto._textBaseline = \"alphabetic\";\nproto._textAlign = \"left\";\nproto._verticalAlign = \"top\";\nproto._offsetY = null;\nproto._maxLines = 0;\nproto._maxLinesSuffix = \"..\";\nproto._textColor = 0xFFFFFFFF;\nproto._paddingLeft = 0;\nproto._paddingRight = 0;\nproto._shadow = false;\nproto._shadowColor = 0xFF000000;\nproto._shadowOffsetX = 0;\nproto._shadowOffsetY = 0;\nproto._shadowBlur = 5;\nproto._highlight = false;\nproto._highlightHeight = 0;\nproto._highlightColor = 0xFF000000;\nproto._highlightOffset = 0;\nproto._highlightPaddingLeft = 0;\nproto._highlightPaddingRight = 0;\nproto._letterSpacing = 0;\nproto._textIndent = 0;\nproto._cutSx = 0;\nproto._cutEx = 0;\nproto._cutSy = 0;\nproto._cutEy = 0;\nproto._advancedRenderer = false;\nproto._fontBaselineRatio = 0;\n\n\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class SourceTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._textureSource = undefined;\n    }\n\n    get textureSource() {\n        return this._textureSource;\n    }\n\n    set textureSource(v) {\n        if (v !== this._textureSource) {\n            if (v.isResultTexture) {\n                // In case of a result texture, automatically inherit the precision.\n                this._precision = this.stage.getRenderPrecision();\n            }\n            this._textureSource = v;\n            this._changed();\n        }\n    }\n\n    _getTextureSource() {\n        return this._textureSource;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\n\nexport default class Transition extends EventEmitter {\n\n    constructor(manager, settings, element, property) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._getter = element.constructor.getGetter(property);\n        this._setter = element.constructor.getSetter(property);\n\n        this._merger = settings.merger;\n\n        if (!this._merger) {\n            this._merger = element.constructor.getMerger(property);\n        }\n\n        this._startValue = this._getter(this._element);\n        this._targetValue = this._startValue;\n\n        this._p = 1;\n        this._delayLeft = 0;\n    }\n\n    start(targetValue) {\n        this._startValue = this._getter(this._element);\n\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            if (targetValue === this._startValue) {\n                this.reset(targetValue, 1);\n            } else {\n                this._targetValue = targetValue;\n                this._p = 0;\n                this._delayLeft = this._settings.delay;\n                this.emit('start');\n                this.add();\n            }\n        }\n    }\n\n    finish() {\n        if (this._p < 1) {\n            // Value setting and will must be invoked (async) upon next transition cycle.\n            this._p = 1;\n        }\n    }\n\n    stop() {\n        // Just stop where the transition is at.\n        this.emit('stop');\n        this.manager.removeActive(this);\n    }\n\n    pause() {\n        this.stop();\n    }\n\n    play() {\n        this.manager.addActive(this);\n    }\n\n    reset(targetValue, p) {\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = p;\n            this.add();\n        }\n    }\n\n    _updateDrawValue() {\n        this._setter(this._element, this.getDrawValue());\n    }\n\n    add() {\n        this.manager.addActive(this);\n    }\n\n    isAttached() {\n        return this._element.attached;\n    }\n\n    isRunning() {\n        return (this._p < 1.0);\n    }\n\n    progress(dt) {\n        if (!this.isAttached()) {\n            // Skip to end of transition so that it is removed.\n            this._p = 1;\n        }\n\n        if (this.p < 1) {\n            if (this.delayLeft > 0) {\n                this._delayLeft -= dt;\n\n                if (this.delayLeft < 0) {\n                    dt = -this.delayLeft;\n                    this._delayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n\n            if (this._settings.duration == 0) {\n                this._p = 1;\n            } else {\n                this._p += dt / this._settings.duration;\n            }\n            if (this._p >= 1) {\n                // Finished!;\n                this._p = 1;\n            }\n        }\n\n        this._updateDrawValue();\n\n        this.invokeListeners();\n    }\n\n    invokeListeners() {\n        this.emit('progress', this.p);\n        if (this.p === 1) {\n            this.emit('finish');\n        }\n    }\n\n    updateTargetValue(targetValue) {\n        let t = this._settings.timingFunctionImpl(this.p);\n        if (t === 1) {\n            this._targetValue = targetValue;\n        } else if (t === 0) {\n            this._startValue = this._targetValue;\n            this._targetValue = targetValue;\n        } else {\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\n            this._targetValue = targetValue;\n        }\n    }\n\n    getDrawValue() {\n        if (this.p >= 1) {\n            return this.targetValue;\n        } else {\n            let v = this._settings._timingFunctionImpl(this.p);\n            return this._merger(this.targetValue, this.startValue, v);\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n    }\n\n    get startValue() {\n        return this._startValue;\n    }\n\n    get targetValue() {\n        return this._targetValue;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    set settings(v) {\n        this._settings = v;\n    }\n\n}\n\nTransition.prototype.isTransition = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages a list of objects.\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\n */\nexport default class ObjectList {\n\n    constructor() {\n        this._items = [];\n        this._refs = {}\n    }\n\n    get() {\n        return this._items;\n    }\n\n    get first() {\n        return this._items[0];\n    }\n\n    get last() {\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\n    }\n\n    add(item) {\n        this.addAt(item, this._items.length);\n    }\n\n    addAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex === index) {\n                return item;\n            }\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            if (currentIndex != -1) {\n                this.setAt(item, index);\n            } else {\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n                this._items.splice(index, 0, item);\n                this.onAdd(item, index);\n            }\n        } else {\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    replaceByRef(item) {\n        if (item.ref) {\n            const existingItem = this.getByRef(item.ref);\n            if (!existingItem) {\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\n            }\n            this.replace(item, existingItem);\n        } else {\n            throw new Error('replaceByRef: no ref specified in item');\n        }\n        this.addAt(item, this._items.length);\n\n    }\n\n    replace(item, prevItem) {\n        const index = this.getIndex(prevItem);\n        if (index === -1) {\n            throw new Error('replace: The previous item does not exist');\n        }\n        this.setAt(item, index);\n    }\n\n    setAt(item, index) {\n        if (index >= 0 && index < this._items.length) {\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex != -1) {\n                if (currentIndex !== index) {\n                    const fromIndex = currentIndex;\n                    if (fromIndex !== index) {\n                        this._items.splice(fromIndex, 1);\n                        this._items.splice(index, 0, item);\n                        this.onMove(item, fromIndex, index);\n                    }\n                }\n            } else {\n                if (index < this._items.length) {\n                    if (this._items[index].ref) {\n                        this._refs[this._items[index].ref] = undefined;\n                    }\n                }\n\n                const prevItem = this._items[index];\n\n                // Doesn't exist yet: overwrite current.\n                this._items[index] = item;\n\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n\n                this.onSet(item, index, prevItem);\n            }\n        } else {\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    getAt(index) {\n        return this._items[index];\n    }\n\n    getIndex(item) {\n        return this._items.indexOf(item);\n    }\n\n    remove(item) {\n        let index = this._items.indexOf(item);\n\n        if (index !== -1) {\n            this.removeAt(index);\n        }\n    };\n\n    removeAt(index) {\n        if (index >= 0 && index < this._items.length) {\n            const item = this._items[index];\n\n            if (item.ref) {\n                this._refs[item.ref] = undefined;\n            }\n\n            this._items.splice(index, 1);\n\n            this.onRemove(item, index);\n\n            return item;\n        } else {\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\n        }\n    };\n\n    clear() {\n        let n = this._items.length;\n        if (n) {\n            let prev = this._items;\n            this._items = [];\n            this._refs = {}\n            this.onSync(prev, [], []);\n        }\n    };\n\n    a(o) {\n        if (Utils.isObjectLiteral(o)) {\n            let c = this.createItem(o);\n            c.patch(o);\n            this.add(c);\n            return c;\n        } else if (Array.isArray(o)) {\n            for (let i = 0, n = o.length; i < n; i++) {\n                this.a(o[i]);\n            }\n            return null;\n        } else if (this.isItem(o)) {\n            this.add(o);\n            return o;\n        }\n    };\n\n    get length() {\n        return this._items.length;\n    }\n\n    _getRefs() {\n        return this._refs;\n    }\n\n    getByRef(ref) {\n        return this._refs[ref];\n    }\n\n    clearRef(ref) {\n        delete this._refs[ref];\n    }\n\n    setRef(ref, child) {\n        this._refs[ref] = child;\n    }\n\n    patch(settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            this._setByObject(settings);\n        } else if (Array.isArray(settings)) {\n            this._setByArray(settings);\n        }\n    }\n\n    _setByObject(settings) {\n        // Overrule settings of known referenced items.\n        let refs = this._getRefs();\n        let crefs = Object.keys(settings);\n        for (let i = 0, n = crefs.length; i < n; i++) {\n            let cref = crefs[i];\n            let s = settings[cref];\n\n            let c = refs[cref];\n            if (!c) {\n                if (this.isItem(s)) {\n                    // Replace previous item;\n                    s.ref = cref;\n                    this.add(s);\n                } else {\n                    // Create new item.\n                    c = this.createItem(s);\n                    c.ref = cref;\n                    c.patch(s);\n                    this.add(c);\n                }\n            } else {\n                if (this.isItem(s)) {\n                    if (c !== s) {\n                        // Replace previous item;\n                        let idx = this.getIndex(c);\n                        s.ref = cref;\n                        this.setAt(s, idx);\n                    }\n                } else {\n                    c.patch(s);\n                }\n            }\n        }\n    }\n\n    _equalsArray(array) {\n        let same = true;\n        if (array.length === this._items.length) {\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\n                same = same && (this._items[i] === array[i]);\n            }\n        } else {\n            same = false;\n        }\n        return same;\n    }\n\n    _setByArray(array) {\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\n        if (this._equalsArray(array)) {\n            return;\n        }\n\n        for (let i = 0, n = this._items.length; i < n; i++) {\n            this._items[i].marker = true;\n        }\n\n        let refs;\n        let newItems = [];\n        for (let i = 0, n = array.length; i < n; i++) {\n            let s = array[i];\n            if (this.isItem(s)) {\n                s.marker = false;\n                newItems.push(s);\n            } else {\n                let cref = s.ref;\n                let c;\n                if (cref) {\n                    if (!refs) refs = this._getRefs();\n                    c = refs[cref];\n                }\n\n                if (!c) {\n                    // Create new item.\n                    c = this.createItem(s);\n                } else {\n                    c.marker = false;\n                }\n\n                if (Utils.isObjectLiteral(s)) {\n                    c.patch(s);\n                }\n\n                newItems.push(c);\n            }\n        }\n\n        this._setItems(newItems);\n    }\n\n    _setItems(newItems) {\n        let prevItems = this._items;\n        this._items = newItems;\n\n        // Remove the items.\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\n\n        if (removed.length || added.length) {\n            // Recalculate refs.\n            this._refs = {}\n            for (let i = 0, n = this._items.length; i < n; i++) {\n                let ref = this._items[i].ref;\n                if (ref) {\n                    this._refs[ref] = this._items[i];\n                }\n            }\n        }\n\n        this.onSync(removed, added, newItems);\n    }\n\n    sort(f) {\n        const items = this._items.slice();\n        items.sort(f);\n        this._setByArray(items);\n    }\n\n    onAdd(item, index) {\n    }\n\n    onRemove(item, index) {\n    }\n\n    onSync(removed, added, order) {\n    }\n\n    onSet(item, index, prevItem) {\n    }\n\n    onMove(item, fromIndex, toIndex) {\n    }\n\n    createItem(object) {\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\n    }\n\n    isItem(object) {\n        return false;\n    }\n\n    forEach(f) {\n        this.get().forEach(f);\n    }\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"./ObjectList.mjs\";\n\nexport default class ElementChildList extends ObjectList {\n\n    constructor(element) {\n        super();\n        this._element = element;\n    }\n\n    _connectParent(item) {\n        const prevParent = item.parent;\n        if (prevParent && prevParent !== this._element) {\n            // Cleanup in previous child list, without\n            const prevChildList = item.parent.childList;\n            const index = prevChildList.getIndex(item);\n\n            if (item.ref) {\n                prevChildList._refs[item.ref] = undefined;\n            }\n            prevChildList._items.splice(index, 1);\n\n            // Also clean up element core.\n            prevParent.core.removeChildAt(index);\n\n        }\n\n        item._setParent(this._element);\n\n        // We are expecting the caller to sync it to the core.\n    }\n\n    onAdd(item, index) {\n        this._connectParent(item);\n        this._element.core.addChildAt(index, item.core);\n    }\n\n    onRemove(item, index) {\n        item._setParent(null);\n        this._element.core.removeChildAt(index);\n    }\n\n    onSync(removed, added, order) {\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i]._setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            this._connectParent(added[i]);\n        }\n        let gc = i => i.core;\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\n    }\n\n    onSet(item, index, prevItem) {\n        prevItem._setParent(null);\n\n        this._connectParent(item);\n        this._element.core.setChildAt(index, item.core);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._element.core.moveChild(fromIndex, toIndex);\n    }\n\n    createItem(object) {\n        if (object.type) {\n            return new object.type(this._element.stage);\n        } else {\n            return this._element.stage.createElement();\n        }\n    }\n\n    isItem(object) {\n        return object.isElement;\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Render tree node.\n */\n\nimport StageUtils from \"./StageUtils.mjs\";\nimport ElementCore from \"./core/ElementCore.mjs\";\nimport Base from \"./Base.mjs\";\n\nimport Utils from \"./Utils.mjs\";\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Element {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.__id = Element.id++;\n\n        this.__start();\n\n        // EventEmitter constructor.\n        this._hasEventListeners = false;\n\n        this.__core = new ElementCore(this);\n\n        /**\n         * A reference that can be used while merging trees.\n         * @type {string}\n         */\n        this.__ref = null;\n\n        /**\n         * An element is attached if it is a descendant of the stage root.\n         * @type {boolean}\n         */\n        this.__attached = false;\n\n        /**\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\n         * @type {boolean}\n         */\n        this.__enabled = false;\n\n        /**\n         * An element is active when it is enabled and it is within bounds.\n         * @type {boolean}\n         */\n        this.__active = false;\n\n        /**\n         * @type {Element}\n         */\n        this.__parent = null;\n\n        /**\n         * The texture that is currently set.\n         * @type {Texture}\n         */\n        this.__texture = null;\n\n        /**\n         * The currently displayed texture. While this.texture is loading, this one may be different.\n         * @type {Texture}\n         */\n        this.__displayedTexture = null;\n\n        /**\n         * Tags that can be used to identify/search for a specific element.\n         * @type {String[]}\n         */\n        this.__tags = null;\n\n        /**\n         * The tree's tags mapping.\n         * This contains all elements for all known tags, at all times.\n         * @type {Map}\n         */\n        this.__treeTags = null;\n\n        /**\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\n         * @type {boolean}\n         */\n        this.__tagRoot = false;\n\n        /**\n         * (Lazy-initialised) list of children owned by this elements.\n         * @type {ElementChildList}\n         */\n        this.__childList = null;\n\n        this._w = 0;\n\n        this._h = 0;\n    }\n\n    __start() {\n    }\n\n    get id() {\n        return this.__id;\n    }\n\n    set ref(ref) {\n        if (this.__ref !== ref) {\n            const charcode = ref.charCodeAt(0);\n            if (!Utils.isUcChar(charcode)) {\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\n            }\n            if (this.__ref !== null) {\n                this.removeTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.clearRef(this.__ref);\n                }\n            }\n\n            this.__ref = ref;\n\n            if (this.__ref) {\n                this._addTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.setRef(this.__ref, this);\n                }\n            }\n        }\n    }\n\n    get ref() {\n        return this.__ref;\n    }\n\n    get core() {\n        return this.__core;\n    }\n\n    setAsRoot() {\n        this.__core.setAsRoot();\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n    }\n\n    get isRoot() {\n        return this.__core.isRoot;\n    }\n\n    _setParent(parent) {\n        if (this.__parent === parent) return;\n\n        if (this.__parent) {\n            this._unsetTagsParent();\n        }\n\n        this.__parent = parent;\n\n        if (parent) {\n            this._setTagsParent();\n        }\n\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n        this._updateCollision();\n\n        if (this.isRoot && parent) {\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\n        }\n    };\n\n    getDepth() {\n        let depth = 0;\n\n        let p = this.__parent;\n        while(p) {\n            depth++;\n            p = p.__parent;\n        }\n\n        return depth;\n    };\n\n    getAncestor(l) {\n        let p = this;\n        while (l > 0 && p.__parent) {\n            p = p.__parent;\n            l--;\n        }\n        return p;\n    };\n\n    getAncestors() {\n        const a = [];\n        let p = this;\n        while (p) {\n            a.push(p);\n            p = p.__parent;\n        }\n        return a;\n    }\n\n    getAncestorAtDepth(depth) {\n        let levels = this.getDepth() - depth;\n        if (levels < 0) {\n            return null;\n        }\n        return this.getAncestor(levels);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while(p = p.parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getSharedAncestor(c) {\n        let o1 = this;\n        let o2 = c;\n        let l1 = o1.getDepth();\n        let l2 = o2.getDepth();\n        if (l1 > l2) {\n            o1 = o1.getAncestor(l1 - l2);\n        } else if (l2 > l1) {\n            o2 = o2.getAncestor(l2 - l1);\n        }\n\n        do {\n            if (o1 === o2) {\n                return o1;\n            }\n\n            o1 = o1.__parent;\n            o2 = o2.__parent;\n        } while (o1 && o2);\n\n        return null;\n    };\n\n    get attached() {\n        return this.__attached;\n    }\n\n    get enabled() {\n        return this.__enabled;\n    }\n\n    get active() {\n        return this.__active;\n    }\n\n    _isAttached() {\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\n    };\n\n    _isEnabled() {\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\n    };\n\n    _isActive() {\n        return this._isEnabled() && this.withinBoundsMargin;\n    };\n\n    /**\n     * Updates the 'attached' flag for this branch.\n     */\n    _updateAttachedFlag() {\n        let newAttached = this._isAttached();\n        if (this.__attached !== newAttached) {\n            this.__attached = newAttached;\n\n            if (newAttached) {\n                this._onSetup();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateAttachedFlag();\n                    }\n                }\n            }\n\n            if (newAttached) {\n                this._onAttach();\n            } else {\n                this._onDetach();\n            }\n        }\n    };\n\n    /**\n     * Updates the 'enabled' flag for this branch.\n     */\n    _updateEnabledFlag() {\n        let newEnabled = this._isEnabled();\n        if (this.__enabled !== newEnabled) {\n            if (newEnabled) {\n                this._onEnabled();\n                this._setEnabledFlag();\n            } else {\n                this._onDisabled();\n                this._unsetEnabledFlag();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateEnabledFlag();\n                    }\n                }\n            }\n        }\n    };\n\n    _setEnabledFlag() {\n        this.__enabled = true;\n\n        // Force re-check of texture because dimensions might have changed (cutting).\n        this._updateDimensions();\n        this._updateTextureCoords();\n\n        if (this.__texture) {\n            this.__texture.addElement(this);\n        }\n\n        if (this.withinBoundsMargin) {\n            this._setActiveFlag();\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.addElement(this.__core);\n        }\n\n    }\n\n    _unsetEnabledFlag() {\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n\n        if (this.__texture) {\n            this.__texture.removeElement(this);\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.removeElement(this.__core);\n        }\n\n        if (this._texturizer) {\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\n        }\n\n        this.__enabled = false;\n    }\n\n    _setActiveFlag() {\n        this.__active = true;\n\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\n        if (this.__texture) {\n            this.__texture.incActiveCount();\n        }\n\n        if (this.__texture) {\n            this._enableTexture();\n        }\n        this._onActive();\n    }\n\n    _unsetActiveFlag() {\n        if (this.__texture) {\n            this.__texture.decActiveCount();\n        }\n\n        this.__active = false;\n        if (this.__texture) {\n            this._disableTexture();\n        }\n\n        if (this._hasTexturizer()) {\n            this.texturizer.deactivate();\n        }\n\n        this._onInactive();\n    }\n\n    _onSetup() {\n    }\n\n    _onAttach() {\n    }\n\n    _onDetach() {\n    }\n\n    _onEnabled() {\n    }\n\n    _onDisabled() {\n    }\n\n    _onActive() {\n    }\n\n    _onInactive() {\n    }\n\n    _onResize() {\n    }\n\n    _getRenderWidth() {\n        if (this._w) {\n            return this._w;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderWidth();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderWidth();\n        } else {\n            return 0;\n        }\n    };\n\n    _getRenderHeight() {\n        if (this._h) {\n            return this._h;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderHeight();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderHeight();\n        } else {\n            return 0;\n        }\n    };\n\n    get renderWidth() {\n        if (this.__enabled) {\n            // Render width is only maintained if this element is enabled.\n            return this.__core.getRenderWidth();\n        } else {\n            return this._getRenderWidth();\n        }\n    }\n\n    get renderHeight() {\n        if (this.__enabled) {\n            return this.__core.getRenderHeight();\n        } else {\n            return this._getRenderHeight();\n        }\n    }\n\n    get finalX() {\n        return this.__core.x;\n    }\n\n    get finalY() {\n        return this.__core.y;\n    }\n\n    get finalW() {\n        return this.__core.w;\n    }\n\n    get finalH() {\n        return this.__core.h;\n    }\n\n    textureIsLoaded() {\n        return this.__texture && this.__texture.isLoaded();\n    }\n\n    loadTexture() {\n        if (this.__texture) {\n            this.__texture.load();\n\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\n                // Loading the texture will have no effect on the dimensions of this element.\n                // Manually update them, so that calcs can be performed immediately in userland.\n                this._updateDimensions();\n            }\n        }\n    }\n\n    _enableTextureError() {\n        // txError event should automatically be re-triggered when a element becomes active.\n        const loadError = this.__texture.loadError;\n        if (loadError) {\n            this.emit('txError', loadError, this.__texture._source);\n        }\n    }\n\n    _enableTexture() {\n        if (this.__texture.isLoaded()) {\n            this._setDisplayedTexture(this.__texture);\n        } else {\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\n            this._setDisplayedTexture(null);\n\n            this._enableTextureError();\n        }\n    }\n\n    _disableTexture() {\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\n        // mw, mh for checking within bounds.\n        this._setDisplayedTexture(null);\n    }\n\n    get texture() {\n        return this.__texture;\n    }\n\n    set texture(v) {\n        let texture;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                texture = new v.type(this.stage);\n            } else {\n                texture = this.texture;\n            }\n\n            if (texture) {\n                Base.patchObject(texture, v);\n            }\n        } else if (!v) {\n            texture = null;\n        } else {\n            if (v.isTexture) {\n                texture = v;\n            } else if (v.isTextureSource) {\n                texture = new SourceTexture(this.stage);\n                texture.textureSource = v;\n            } else {\n                console.error(\"[Lightning] Please specify a texture type.\");\n                return;\n            }\n        }\n\n        const prevTexture = this.__texture;\n        if (texture !== prevTexture) {\n            this.__texture = texture;\n\n            if (this.__texture) {\n                if (this.__enabled) {\n                    this.__texture.addElement(this);\n\n                    if (this.withinBoundsMargin) {\n                        if (this.__texture.isLoaded()) {\n                            this._setDisplayedTexture(this.__texture);\n                        } else {\n                            this._enableTextureError();\n                        }\n                    }\n                }\n            } else {\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\n                this._setDisplayedTexture(null);\n            }\n\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\n                prevTexture.removeElement(this);\n            }\n\n            this._updateDimensions();\n        }\n    }\n\n    get displayedTexture() {\n        return this.__displayedTexture;\n    }\n\n    _setDisplayedTexture(v) {\n        let prevTexture = this.__displayedTexture;\n\n        if (prevTexture && (v !== prevTexture)) {\n            if (this.__texture !== prevTexture) {\n                // The old displayed texture is deprecated.\n                prevTexture.removeElement(this);\n            }\n        }\n\n        const prevSource = this.__core.displayedTextureSource ? this.__core.displayedTextureSource._source : null;\n        const sourceChanged = (v ? v._source : null) !== prevSource;\n\n        this.__displayedTexture = v;\n        this._updateDimensions();\n\n        if (this.__displayedTexture) {\n            if (sourceChanged) {\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\n                this._updateTextureCoords();\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\n            }\n        } else {\n            this.__core.setDisplayedTextureSource(null);\n        }\n\n        if (sourceChanged) {\n            if (this.__displayedTexture) {\n                this.emit('txLoaded', this.__displayedTexture);\n            } else {\n                this.emit('txUnloaded', this.__displayedTexture);\n            }\n        }\n    }\n\n    onTextureSourceLoaded() {\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\n        if (this.active) {\n            // We may be dealing with a texture reloading, so we must force update.\n            this._setDisplayedTexture(this.__texture);\n        }\n    };\n\n    onTextureSourceLoadError(e) {\n        this.emit('txError', e, this.__texture._source);\n    };\n\n    forceRenderUpdate() {\n        this.__core.setHasRenderUpdates(3);\n    }\n\n    onDisplayedTextureClippingChanged() {\n        this._updateDimensions();\n        this._updateTextureCoords();\n    };\n\n    onPrecisionChanged() {\n        this._updateDimensions();\n    };\n\n    onDimensionsChanged(w, h) {\n        if (this.texture instanceof TextTexture) {\n            this.texture.w = w;\n            this.texture.h = h;\n            this.w = w;\n            this.h = h;\n        }\n    }\n\n    _updateDimensions() {\n        let w = this._getRenderWidth();\n        let h = this._getRenderHeight();\n\n        let unknownSize = false;\n        if (!w || !h) {\n            if (!this.__displayedTexture && this.__texture) {\n                // We use a 'max width' replacement instead in the ElementCore calcs.\n                // This makes sure that it is able to determine withinBounds.\n                w = w || this.__texture.mw;\n                h = h || this.__texture.mh;\n\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\n                    unknownSize = true;\n                }\n            }\n        }\n\n        if (this.__core.setDimensions(w, h, unknownSize)) {\n            this._onResize();\n        }\n    }\n\n    _updateTextureCoords() {\n        if (this.displayedTexture && this.displayedTexture._source) {\n            let displayedTexture = this.displayedTexture;\n            let displayedTextureSource = this.displayedTexture._source;\n\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\n            if (displayedTexture.clipping) {\n                // Apply texture clipping.\n                let w = displayedTextureSource.getRenderWidth();\n                let h = displayedTextureSource.getRenderHeight();\n                let iw, ih, rw, rh;\n                iw = 1 / w;\n                ih = 1 / h;\n\n                if (displayedTexture.pw) {\n                    rw = (displayedTexture.pw) * iw;\n                } else {\n                    rw = (w - displayedTexture.px) * iw;\n                }\n\n                if (displayedTexture.ph) {\n                    rh = displayedTexture.ph * ih;\n                } else {\n                    rh = (h - displayedTexture.py) * ih;\n                }\n\n                iw *= (displayedTexture.px);\n                ih *= (displayedTexture.py);\n\n                tx1 = iw;\n                ty1 = ih;\n                tx2 = tx2 * rw + iw;\n                ty2 = ty2 * rh + ih;\n\n                tx1 = Math.max(0, tx1);\n                ty1 = Math.max(0, ty1);\n                tx2 = Math.min(1, tx2);\n                ty2 = Math.min(1, ty2);\n            }\n\n            if (displayedTextureSource._flipTextureY) {\n                let tempty = ty2;\n                ty2 = ty1;\n                ty1 = tempty;\n            }\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\n        }\n    }\n\n    getCornerPoints() {\n        return this.__core.getCornerPoints();\n    }\n\n    _unsetTagsParent() {\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                // Remove from treeTags.\n                let p = this;\n                while (p = p.__parent) {\n                    let parentTreeTags = p.__treeTags.get(tag);\n                    parentTreeTags.delete(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        let tags = null;\n        let n = 0;\n        if (this.__treeTags) {\n            if (!this.__tagRoot) {\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\n                n = tags.length;\n\n                if (n > 0) {\n                    for (let i = 0; i < n; i++) {\n                        let tagSet = this.__treeTags.get(tags[i]);\n\n                        // Remove from treeTags.\n                        let p = this;\n                        while ((p = p.__parent)) {\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\n\n                            tagSet.forEach(function (comp) {\n                                parentTreeTags.delete(comp);\n                            });\n\n                            if (p.__tagRoot) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    _setTagsParent() {\n        // Just copy over the 'local' tags.\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                let p = this;\n                while (p = p.__parent) {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        if (this.__treeTags && this.__treeTags.size) {\n            if (!this.__tagRoot) {\n                this.__treeTags.forEach((tagSet, tag) => {\n                    let p = this;\n                    while (!p.__tagRoot && (p = p.__parent)) {\n                        if (p.__tagRoot) {\n                            // Do not copy all subs.\n                        }\n                        if (!p.__treeTags) {\n                            p.__treeTags = new Map();\n                        }\n\n                        let s = p.__treeTags.get(tag);\n                        if (!s) {\n                            s = new Set();\n                            p.__treeTags.set(tag, s);\n                        }\n\n                        tagSet.forEach(function (comp) {\n                            s.add(comp);\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n\n    _getByTag(tag) {\n        if (!this.__treeTags) {\n            return [];\n        }\n        let t = this.__treeTags.get(tag);\n        return t ? Utils.setToArray(t) : [];\n    };\n\n    getTags() {\n        return this.__tags ? this.__tags : [];\n    };\n\n    setTags(tags) {\n        tags = tags.reduce((acc, tag) => {\n            return acc.concat(tag.split(' '));\n        }, []);\n\n        if (this.__ref) {\n            tags.push(this.__ref);\n        }\n\n        let i, n = tags.length;\n        let removes = [];\n        let adds = [];\n        for (i = 0; i < n; i++) {\n            if (!this.hasTag(tags[i])) {\n                adds.push(tags[i]);\n            }\n        }\n\n        let currentTags = this.tags || [];\n        n = currentTags.length;\n        for (i = 0; i < n; i++) {\n            if (tags.indexOf(currentTags[i]) == -1) {\n                removes.push(currentTags[i]);\n            }\n        }\n\n        for (i = 0; i < removes.length; i++) {\n            this.removeTag(removes[i]);\n        }\n\n        for (i = 0; i < adds.length; i++) {\n            this.addTag(adds[i]);\n        }\n    }\n\n    addTag(tag) {\n        if (tag.indexOf(' ') === -1) {\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\n                this._throwError(\"Tag may not start with an upper case character.\");\n            }\n\n            this._addTag(tag);\n        } else {\n            const tags = tag.split(' ');\n            for (let i = 0, m = tags.length; i < m; i++) {\n                const tag = tags[i];\n\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\n                    this._throwError(\"Tag may not start with an upper case character.\");\n                }\n\n                this._addTag(tag);\n            }\n        }\n    }\n\n    _addTag(tag) {\n        if (!this.__tags) {\n            this.__tags = [];\n        }\n        if (this.__tags.indexOf(tag) === -1) {\n            this.__tags.push(tag);\n\n            // Add to treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    removeTag(tag) {\n        let i = this.__tags.indexOf(tag);\n        if (i !== -1) {\n            this.__tags.splice(i, 1);\n\n            // Remove from treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    let list = p.__treeTags.get(tag);\n                    if (list) {\n                        list.delete(this);\n                    }\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    hasTag(tag) {\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\n    }\n\n    /**\n     * Returns one of the elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element}\n     */\n    _tag(tag) {\n        if (tag.indexOf(\".\") !== -1) {\n            return this.mtag(tag)[0];\n        } else {\n            if (this.__treeTags) {\n                let t = this.__treeTags.get(tag);\n                if (t) {\n                    const item = t.values().next();\n                    return item ? item.value : undefined;\n                }\n            }\n        }\n    };\n\n    get tag() {\n        return this._tag;\n    }\n\n    set tag(t) {\n        this.tags = t;\n    }\n\n    /**\n     * Returns all elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element[]}\n     */\n    mtag(tag) {\n        let idx = tag.indexOf(\".\");\n        if (idx >= 0) {\n            let parts = tag.split('.');\n            let res = this._getByTag(parts[0]);\n            let level = 1;\n            let c = parts.length;\n            while (res.length && level < c) {\n                let resn = [];\n                for (let j = 0, n = res.length; j < n; j++) {\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\n                }\n\n                res = resn;\n                level++;\n            }\n            return res;\n        } else {\n            return this._getByTag(tag);\n        }\n    };\n\n    stag(tag, settings) {\n        let t = this.mtag(tag);\n        let n = t.length;\n        for (let i = 0; i < n; i++) {\n            Base.patchObject(t[i], settings);\n        }\n    }\n\n    get tagRoot() {\n        return this.__tagRoot;\n    }\n\n    set tagRoot(v) {\n        if (this.__tagRoot !== v) {\n            if (!v) {\n                this._setTagsParent();\n            } else {\n                this._unsetTagsParent();\n            }\n\n            this.__tagRoot = v;\n        }\n    }\n\n    sel(path) {\n        const results = this.select(path);\n        if (results.length) {\n            return results[0];\n        } else {\n            return undefined;\n        }\n    }\n\n    select(path) {\n        if (path.indexOf(\",\") !== -1) {\n            let selectors = path.split(',');\n            let res = [];\n            for (let i = 0; i < selectors.length; i++) {\n                res = res.concat(this._select(selectors[i]));\n            }\n            return res;\n        } else {\n            return this._select(path);\n        }\n    }\n\n    _select(path) {\n        if (path === \"\") return [this];\n\n\n        let pointIdx = path.indexOf(\".\");\n        let arrowIdx = path.indexOf(\">\");\n        if (pointIdx === -1 && arrowIdx === -1) {\n            // Quick case.\n            return this.mtag(path);\n        }\n\n        // Detect by first char.\n        let isRef;\n        if (arrowIdx === 0) {\n            isRef = true;\n            path = path.substr(1);\n        } else if (pointIdx === 0) {\n            isRef = false;\n            path = path.substr(1);\n        } else {\n            isRef = false;\n        }\n\n        return this._selectChilds(path, isRef);\n    }\n\n    _selectChilds(path, isRef) {\n        const pointIdx = path.indexOf(\".\");\n        const arrowIdx = path.indexOf(\">\");\n\n        if (pointIdx === -1 && arrowIdx === -1) {\n            if (isRef) {\n                const ref = this.getByRef(path);\n                return ref ? [ref] : [];\n            } else {\n                return this.mtag(path);\n            }\n        }\n\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\n            let next;\n            const str = path.substr(0, pointIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(pointIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, false));\n            }\n            return total;\n        } else {\n            let next;\n            const str = path.substr(0, arrowIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(arrowIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, true));\n            }\n            return total;\n        }\n    }\n\n    getByRef(ref) {\n        return this.childList.getByRef(ref);\n    }\n\n    getLocationString() {\n        let i;\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\n        let localTags = this.getTags();\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\n        if (this.ref) {\n            str += \":[\" + i + \"]\" + this.ref;\n        } else if (localTags.length) {\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\n        } else {\n            str += \":[\" + i + \"]#\" + this.id;\n        }\n        return str;\n    }\n\n    toString() {\n        let obj = this.getSettings();\n        return Element.getPrettyString(obj, \"\");\n    };\n\n    static getPrettyString(obj, indent) {\n        let children = obj.children;\n        delete obj.children;\n\n\n        // Convert singular json settings object.\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\n        let str = JSON.stringify(obj, function (k, v) {\n            if (colorKeys.indexOf(k) !== -1) {\n                return \"COLOR[\" + v.toString(16) + \"]\";\n            }\n            return v;\n        });\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\n\n        if (children) {\n            let childStr = \"\";\n            if (Utils.isObjectLiteral(children)) {\n                let refs = Object.keys(children);\n                childStr = \"\";\n                for (let i = 0, n = refs.length; i < n; i++) {\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\n                    delete children[refs[i]].ref;\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\n                }\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\n            } else {\n                let n = children.length;\n                childStr = \"[\";\n                for (let i = 0; i < n; i++) {\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\n                }\n                childStr += indent + \"]}\";\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\n            }\n\n        }\n\n        return str;\n    }\n\n    getSettings() {\n        let settings = this.getNonDefaults();\n\n        let children = this._children.get();\n        if (children) {\n            let n = children.length;\n            if (n) {\n                const childArray = [];\n                let missing = false;\n                for (let i = 0; i < n; i++) {\n                    childArray.push(children[i].getSettings());\n                    missing = missing || !children[i].ref;\n                }\n\n                if (!missing) {\n                    settings.children = {}\n                    childArray.forEach(child => {\n                        settings.children[child.ref] = child;\n                    });\n                } else {\n                    settings.children = childArray;\n                }\n            }\n        }\n\n        settings.id = this.id;\n\n        return settings;\n    }\n\n    getNonDefaults() {\n        let settings = {};\n\n        if (this.constructor !== Element) {\n            settings.type = this.constructor.name;\n        }\n\n        if (this.__ref) {\n            settings.ref = this.__ref;\n        }\n\n        if (this.__tags && this.__tags.length) {\n            settings.tags = this.__tags;\n        }\n\n        if (this.x !== 0) settings.x = this.x;\n        if (this.y !== 0) settings.y = this.y;\n        if (this.w !== 0) settings.w = this.w;\n        if (this.h !== 0) settings.h = this.h;\n\n        if (this.scaleX === this.scaleY) {\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\n        } else {\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\n        }\n\n        if (this.pivotX === this.pivotY) {\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\n        } else {\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\n        }\n\n        if (this.mountX === this.mountY) {\n            if (this.mountX !== 0) settings.mount = this.mountX;\n        } else {\n            if (this.mountX !== 0) settings.mountX = this.mountX;\n            if (this.mountY !== 0) settings.mountY = this.mountY;\n        }\n\n        if (this.alpha !== 1) settings.alpha = this.alpha;\n\n        if (!this.visible) settings.visible = false;\n\n        if (this.rotation !== 0) settings.rotation = this.rotation;\n\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\n        } else {\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\n        }\n\n        if (this.zIndex) settings.zIndex = this.zIndex;\n\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\n\n        if (this.clipping) settings.clipping = this.clipping;\n\n        if (!this.clipbox) settings.clipbox = this.clipbox;\n\n        if (this.__texture) {\n            let tnd = this.__texture.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.texture = tnd;\n            }\n        }\n\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\n            let tnd = this.shader.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.shader = tnd;\n            }\n        }\n\n        if (this._hasTexturizer()) {\n            if (this.texturizer.enabled) {\n                settings.renderToTexture = this.texturizer.enabled;\n            }\n            if (this.texturizer.lazy) {\n                settings.renderToTextureLazy = this.texturizer.lazy;\n            }\n            if (this.texturizer.colorize) {\n                settings.colorizeResultTexture = this.texturizer.colorize;\n            }\n            if (this.texturizer.renderOffscreen) {\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\n            }\n        }\n\n        return settings;\n    };\n\n    static getGetter(propertyPath) {\n        let getter = Element.PROP_GETTERS.get(propertyPath);\n        if (!getter) {\n            getter = new Function('obj', 'return obj.' + propertyPath);\n            Element.PROP_GETTERS.set(propertyPath, getter);\n        }\n        return getter;\n    }\n\n    static getSetter(propertyPath) {\n        let setter = Element.PROP_SETTERS.get(propertyPath);\n        if (!setter) {\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\n            Element.PROP_SETTERS.set(propertyPath, setter);\n        }\n        return setter;\n    }\n\n    get withinBoundsMargin() {\n        return this.__core._withinBoundsMargin;\n    }\n\n    _enableWithinBoundsMargin() {\n        // Iff enabled, this toggles the active flag.\n        if (this.__enabled) {\n            this._setActiveFlag();\n        }\n    }\n\n    _disableWithinBoundsMargin() {\n        // Iff active, this toggles the active flag.\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n    }\n\n    set boundsMargin(v) {\n        if (!Array.isArray(v) && v !== null) {\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\n        }\n        this.__core.boundsMargin = v;\n    }\n\n    get boundsMargin() {\n        return this.__core.boundsMargin;\n    }\n\n    get x() {\n        return this.__core.offsetX;\n    }\n\n    set x(v) {\n        this.__core.offsetX = v;\n    }\n\n    get y() {\n        return this.__core.offsetY;\n    }\n\n    set y(v) {\n        this.__core.offsetY = v;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (Utils.isFunction(v)) {\n            this._w = 0;\n            this.__core.funcW = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._w !== v) {\n                this.__core.disableFuncW();\n                this._w = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (Utils.isFunction(v)) {\n            this._h = 0;\n            this.__core.funcH = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._h !== v) {\n                this.__core.disableFuncH();\n                this._h = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get collision() {\n        return this._collision;\n    }\n\n    set collision(v) {\n        this._collision = v;\n    }\n\n    _updateCollision() {\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\n            /**\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\n             * This narrows down the search for elements with active collision.\n            */\n            this.__parent.collision = 2;\n        }\n    }\n\n    get scaleX() {\n        return this.__core.scaleX;\n    }\n\n    set scaleX(v) {\n        this.__core.scaleX = v;\n    }\n\n    get scaleY() {\n        return this.__core.scaleY;\n    }\n\n    set scaleY(v) {\n        this.__core.scaleY = v;\n    }\n\n    get scale() {\n        return this.__core.scale;\n    }\n\n    set scale(v) {\n        this.__core.scale = v;\n    }\n\n    get pivotX() {\n        return this.__core.pivotX;\n    }\n\n    set pivotX(v) {\n        this.__core.pivotX = v;\n    }\n\n    get pivotY() {\n        return this.__core.pivotY;\n    }\n\n    set pivotY(v) {\n        this.__core.pivotY = v;\n    }\n\n    get pivot() {\n        return this.__core.pivot;\n    }\n\n    set pivot(v) {\n        this.__core.pivot = v;\n    }\n\n    get mountX() {\n        return this.__core.mountX;\n    }\n\n    set mountX(v) {\n        this.__core.mountX = v;\n    }\n\n    get mountY() {\n        return this.__core.mountY;\n    }\n\n    set mountY(v) {\n        this.__core.mountY = v;\n    }\n\n    get mount() {\n        return this.__core.mount;\n    }\n\n    set mount(v) {\n        this.__core.mount = v;\n    }\n\n    get rotation() {\n        return this.__core.rotation;\n    }\n\n    set rotation(v) {\n        this.__core.rotation = v;\n    }\n\n    get alpha() {\n        return this.__core.alpha;\n    }\n\n    set alpha(v) {\n        this.__core.alpha = v;\n    }\n\n    get visible() {\n        return this.__core.visible;\n    }\n\n    set visible(v) {\n        this.__core.visible = v;\n    }\n    \n    get colorUl() {\n        return this.__core.colorUl;\n    }\n\n    set colorUl(v) {\n        this.__core.colorUl = v;\n    }\n\n    get colorUr() {\n        return this.__core.colorUr;\n    }\n\n    set colorUr(v) {\n        this.__core.colorUr = v;\n    }\n\n    get colorBl() {\n        return this.__core.colorBl;\n    }\n\n    set colorBl(v) {\n        this.__core.colorBl = v;\n    }\n\n    get colorBr() {\n        return this.__core.colorBr;\n    }\n\n    set colorBr(v) {\n        this.__core.colorBr = v;\n    }\n\n    get color() {\n        return this.__core.colorUl;\n    }\n\n    set color(v) {\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorTop() {\n        return this.colorUl;\n    }\n\n    set colorTop(v) {\n        if (this.colorUl !== v || this.colorUr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n        }\n    }\n\n    get colorBottom() {\n        return this.colorBl;\n    }\n\n    set colorBottom(v) {\n        if (this.colorBl !== v || this.colorBr !== v) {\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorLeft() {\n        return this.colorUl;\n    }\n\n    set colorLeft(v) {\n        if (this.colorUl !== v || this.colorBl !== v) {\n            this.colorUl = v;\n            this.colorBl = v;\n        }\n    }\n\n    get colorRight() {\n        return this.colorUr;\n    }\n\n    set colorRight(v) {\n        if (this.colorUr !== v || this.colorBr !== v) {\n            this.colorUr = v;\n            this.colorBr = v;\n        }\n    }\n\n    get zIndex() {return this.__core.zIndex}\n    set zIndex(v) {\n        this.__core.zIndex = v;\n    }\n\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\n    set forceZIndexContext(v) {\n        this.__core.forceZIndexContext = v;\n    }\n\n    get clipping() {return this.__core.clipping}\n    set clipping(v) {\n        this.__core.clipping = v;\n    }\n\n    get clipbox() {return this.__core.clipbox}\n    set clipbox(v) {\n        this.__core.clipbox = v;\n    }\n\n    get tags() {\n        return this.getTags();\n    }\n\n    set tags(v) {\n        if (!Array.isArray(v)) v = [v];\n        this.setTags(v);\n    }\n\n    set t(v) {\n        this.tags = v;\n    }\n\n    get _children() {\n        if (!this.__childList) {\n            this.__childList = new ElementChildList(this, false);\n        }\n        return this.__childList;\n    }\n\n    get childList() {\n        if (!this._allowChildrenAccess()) {\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\n        }\n        return this._children;\n    }\n\n    hasChildren() {\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\n    }\n\n    _allowChildrenAccess() {\n        return true;\n    }\n\n    get children() {\n        return this.childList.get();\n    }\n\n    set children(children) {\n        this.childList.patch(children);\n    }\n\n    add(o) {\n        return this.childList.a(o);\n    }\n\n    get p() {\n        return this.__parent;\n    }\n\n    get parent() {\n        return this.__parent;\n    }\n\n    get src() {\n        if (this.texture && this.texture instanceof ImageTexture) {\n            return this.texture._src;\n        } else {\n            return undefined;\n        }\n    }\n\n    set src(v) {\n        const texture = new ImageTexture(this.stage);\n        texture.src = v;\n        this.texture = texture;\n    }\n\n    set mw(v) {\n        if (this.texture) {\n            this.texture.mw = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mw after setting a texture.');\n        }\n    }\n\n    set mh(v) {\n        if (this.texture) {\n            this.texture.mh = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mh after setting a texture.');\n        }\n    }\n\n    get rect() {\n        return (this.texture === this.stage.rectangleTexture);\n    }\n\n    set rect(v) {\n        if (v) {\n            this.texture = this.stage.rectangleTexture;\n        } else {\n            this.texture = null;\n        }\n    }\n\n    enableTextTexture() {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.texture = new TextTexture(this.stage);\n\n            if (!this.texture.w && !this.texture.h) {\n                // Inherit dimensions from element.\n                // This allows userland to set dimensions of the Element and then later specify the text.\n                this.texture.w = this.w;\n                this.texture.h = this.h;\n            }\n        }\n        return this.texture;\n    }\n\n    get text() {\n        if (this.texture && (this.texture instanceof TextTexture)) {\n            return this.texture;\n        } else {\n            return null;\n        }\n    }\n\n    set text(v) {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.enableTextTexture();\n        }\n        if (Utils.isString(v)) {\n            this.texture.text = v;\n        } else {\n            this.texture.patch(v);\n        }\n    }\n\n    set onUpdate(f) {\n        this.__core.onUpdate = f;\n    }\n\n    set onAfterCalcs(f) {\n        this.__core.onAfterCalcs = f;\n    }\n\n    set onAfterUpdate(f) {\n        this.__core.onAfterUpdate = f;\n    }\n\n    forceUpdate() {\n        // Make sure that the update loop is run.\n        this.__core._setHasUpdates();\n    }\n\n    get shader() {\n        return this.__core.shader;\n    }\n\n    set shader(v) {\n        if (Utils.isObjectLiteral(v) && !v.type) {\n            // Setting properties on an existing shader.\n            if (this.shader) {\n                this.shader.patch(v);\n            }\n        } else {\n            const shader = Shader.create(this.stage, v);\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.removeElement(this.__core);\n            }\n\n            this.__core.shader = shader;\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.addElement(this.__core);\n            }\n        }\n    }\n\n    _hasTexturizer() {\n        return !!this.__core._texturizer;\n    }\n\n    get renderToTexture() {\n        return this.rtt\n    }\n\n    set renderToTexture(v) {\n        this.rtt = v\n    }\n\n    get rtt() {\n        return this._hasTexturizer() && this.texturizer.enabled;\n    }\n\n    set rtt(v) {\n        this.texturizer.enabled = v;\n    }\n\n    get rttLazy() {\n        return this._hasTexturizer() && this.texturizer.lazy;\n    }\n\n    set rttLazy(v) {\n        this.texturizer.lazy = v;\n    }\n\n    get renderOffscreen() {\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this.texturizer.renderOffscreen = v;\n    }\n\n    get colorizeResultTexture() {\n        return this._hasTexturizer() && this.texturizer.colorize;\n    }\n\n    set colorizeResultTexture(v) {\n        this.texturizer.colorize = v;\n    }\n\n    getTexture() {\n        return this.texturizer._getTextureSource();\n    }\n\n    get texturizer() {\n        return this.__core.texturizer;\n    }\n\n    patch(settings) {\n        let paths = Object.keys(settings);\n\n        for (let i = 0, n = paths.length; i < n; i++) {\n            let path = paths[i];\n            const v = settings[path];\n\n            const firstCharCode = path.charCodeAt(0);\n            if (Utils.isUcChar(firstCharCode)) {\n                // Ref.\n                const child = this.getByRef(path);\n                if (!child) {\n                    if (v !== undefined) {\n                        // Add to list immediately.\n                        let c;\n                        if (Utils.isObjectLiteral(v)) {\n                            // Catch this case to capture createMode flag.\n                            c = this.childList.createItem(v);\n                            c.patch(v);\n                        } else if (Utils.isObject(v)) {\n                            c = v;\n                        }\n                        if (c.isElement) {\n                            c.ref = path;\n                        }\n\n                        this.childList.a(c);\n                    }\n                } else {\n                    if (v === undefined) {\n                        if (child.parent) {\n                            child.parent.childList.remove(child);\n                        }\n                    } else if (Utils.isObjectLiteral(v)) {\n                        child.patch(v);\n                    } else if (v.isElement) {\n                        // Replace element by new element.\n                        v.ref = path;\n                        this.childList.replace(v, child);\n                    } else {\n                        this._throwError(\"Unexpected value for path: \" + path);\n                    }\n                }\n            } else {\n                // Property.\n                Base.patchObjectProperty(this, path, v);\n            }\n        }\n    }\n\n    _throwError(message) {\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\n    }\n\n    animation(settings) {\n        return this.stage.animations.createAnimation(this, settings);\n    }\n\n    transition(property, settings = null) {\n        if (settings === null) {\n            return this._getTransition(property);\n        } else {\n            this._setTransition(property, settings);\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\n            return null;\n        }\n    }\n\n    set transitions(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            this.transition(property, object[property]);\n        });\n    }\n\n    set smooth(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            let value = object[property];\n            if (Array.isArray(value)) {\n                this.setSmooth(property, value[0], value[1]);\n            } else {\n                this.setSmooth(property, value);\n            }\n        });\n    }\n\n    fastForward(property) {\n        if (this._transitions) {\n            let t = this._transitions[property];\n            if (t && t.isTransition) {\n                t.finish();\n            }\n        }\n    }\n\n    _getTransition(property) {\n        if (!this._transitions) {\n            this._transitions = {};\n        }\n        let t = this._transitions[property];\n        if (!t) {\n            // Create default transition.\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\n        } else if (t.isTransitionSettings) {\n            // Upgrade to 'real' transition.\n            t = new Transition(\n                this.stage.transitions,\n                t,\n                this,\n                property\n            );\n        }\n        this._transitions[property] = t;\n        return t;\n    }\n\n    _setTransition(property, settings) {\n        if (!settings) {\n            this._removeTransition(property);\n        } else {\n            if (Utils.isObjectLiteral(settings)) {\n                // Convert plain object to proper settings object.\n                settings = this.stage.transitions.createSettings(settings);\n            }\n\n            if (!this._transitions) {\n                this._transitions = {};\n            }\n\n            let current = this._transitions[property];\n            if (current && current.isTransition) {\n                // Runtime settings change.\n                current.settings = settings;\n                return current;\n            } else {\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\n                this._transitions[property] = settings;\n            }\n        }\n    }\n\n    _removeTransition(property) {\n        if (this._transitions) {\n            delete this._transitions[property];\n        }\n    }\n\n    getSmooth(property, v) {\n        let t = this._getTransition(property);\n        if (t && t.isAttached()) {\n            return t.targetValue;\n        } else {\n            return v;\n        }\n    }\n\n    setSmooth(property, v, settings) {\n        if (settings) {\n            this._setTransition(property, settings);\n        }\n        let t = this._getTransition(property);\n        t.start(v);\n        return t;\n    }\n\n    get flex() {\n        return this.__core.flex;\n    }\n\n    set flex(v) {\n        this.__core.flex = v;\n    }\n\n    get flexItem() {\n        return this.__core.flexItem;\n    }\n\n    set flexItem(v) {\n        this.__core.flexItem = v;\n    }\n\n    static isColorProperty(property) {\n        return property.toLowerCase().indexOf(\"color\") >= 0;\n    }\n\n    static getMerger(property) {\n        if (Element.isColorProperty(property)) {\n            return StageUtils.mergeColors;\n        } else {\n            return StageUtils.mergeNumbers;\n        }\n    }\n\n    toJSON() {\n        const ref = [`${this.constructor.name}`];\n        const tree = {};\n        tree[ref] = {};\n\n        if (this.hasChildren()) {\n            Element.collectChildren(tree[ref], this.__childList);\n        } else {\n            tree[ref] = {...Element.getProperties(this)};\n        }\n        return tree;\n    }\n\n    static collectChildren(tree, children) {\n        const childList = children;\n        for (let i = 0, j = childList.length; i < j; i++) {\n            const element = childList.getAt(i);\n            const ref = `${element.__ref || `Element-${element.id}`}`;\n            const properties = this.getProperties(element);\n\n            tree[ref] = {...properties};\n\n            if (element.hasChildren()) {\n                tree[ref].children = {};\n                this.collectChildren(\n                    tree[ref].children, element.__childList\n                );\n            }\n        }\n    }\n\n    static getProperties(element) {\n        const props = {};\n        const list = [\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOffscreen\", \"renderToTexture\", \"scale\",\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\n        ];\n        let n = list.length;\n\n        while (n--) {\n            let key = list[n];\n            const getBoolean = /^!{2}/;\n            const isFunction = /\\(\\)$/;\n\n            if (getBoolean.test(key)) {\n                key = key.substring(2, key.length);\n                props[key] = !!element[key];\n            } else if (isFunction.test(key)) {\n                key = key.substring(0, key.length - 2);\n                if (typeof element[key] === \"function\") {\n                    props[key] = element[key]();\n                }\n            } else {\n                props[key] = element[key];\n            }\n        }\n        return {...props, ...element.getNonDefaults()};\n    }\n}\n\n// This gives a slight performance benefit compared to extending EventEmitter.\nEventEmitter.addAsMixin(Element);\n\nElement.prototype.isElement = 1;\n\nElement.id = 1;\n\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_GETTERS = new Map();\n\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_SETTERS = new Map();\n\nimport Texture from \"./Texture.mjs\";\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\nimport TextTexture from \"../textures/TextTexture.mjs\";\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\nimport Transition from \"../animation/Transition.mjs\";\nimport ElementChildList from \"./ElementChildList.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StateMachine {\n\n    constructor() {\n        StateMachine.setupStateMachine(this);\n    }\n\n    static setupStateMachine(target) {\n        const targetConstructor = target.constructor;\n        const router = StateMachine.create(targetConstructor);\n        Object.setPrototypeOf(target, router.prototype);\n        target.constructor = targetConstructor;\n        target._initStateMachine();\n    }\n\n    /**\n     * Creates a state machine implementation.\n     * It extends the original type and should be used when creating new instances.\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\n     * @param {Class} type\n     * @returns {StateMachine}\n     */\n    static create(type) {\n        if (!type.hasOwnProperty('_sm')) {\n            // Only need to run once.\n            const stateMachineType = new StateMachineType(type);\n            type._sm = stateMachineType;\n        }\n\n        return type._sm.router;\n    }\n\n    /**\n     * Calls the specified method if it exists.\n     * @param {string} event\n     * @param {*...} args\n     */\n    fire(event, ...args) {\n        if (this._hasMethod(event)) {\n            return this[event](...args);\n        }\n    }\n\n    /**\n     * Returns the current state path (for example \"Initialized.Loading\").\n     * @returns {string}\n     * @protected\n     */\n    _getState() {\n        return this._state.__path;\n    }\n\n    /**\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\n     * @param {string} statePath\n     * @param {string} currentStatePath\n     * @returns {Boolean}\n     * @protected\n     */\n    _inState(statePath, currentStatePath = this._state.__path) {\n        const state = this._sm.getStateByPath(statePath);\n        const currentState = this._sm.getStateByPath(currentStatePath);\n        const level = state.__level;\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\n        return (stateAtLevel === state);\n    }\n\n    /**\n     * Returns true if the specified class member is defined for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMember(name) {\n        return !!this.constructor.prototype[name];\n    }\n\n    /**\n     * Returns true if the specified class member is a method for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMethod(name) {\n        const member = this.constructor.prototype[name];\n        return !!member && (typeof member === \"function\")\n    }\n\n    /**\n     * Switches to the specified state.\n     * @param {string} statePath\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\n     * @param {*[]} [args]\n     *   Args that are supplied in $enter and $exit events.\n     * @protected\n     */\n    _setState(statePath, args) {\n        const setStateId = ++this._setStateCounter;\n        this._setStateId = setStateId;\n\n        if (this._state.__path !== statePath) {\n            // Performance optimization.\n            let newState = this._sm._stateMap[statePath];\n            if (!newState) {\n                // Check for super state.\n                newState = this._sm.getStateByPath(statePath);\n            }\n\n            const prevState = this._state;\n\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\n                const sharedState = StateMachine._getSharedState(this._state, newState);\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path,\n                    sharedState: sharedState.__path\n                };\n                const sharedLevel = sharedState.__level;\n\n                if (hasDifferentExitMethod) {\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\n                        this.__setState(exitStates[i]);\n                        this._callExit(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n                if (hasDifferentEnterMethod) {\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\n                        this.__setState(enterStates[i]);\n                        this._callEnter(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            this.__setState(newState);\n\n            if (this._changedState) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n\n                if (args) {\n                    this._changedState(context, ...args);\n                } else {\n                    this._changedState(context);\n                }\n            }\n\n            if (this._onStateChange) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n                this._onStateChange(context);\n            }\n\n        }\n    }\n\n    _callEnter(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$enter) {\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\n                state.prototype.$enter.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    _callExit(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$exit) {\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\n                state.prototype.$exit.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    __setState(state) {\n        this._state = state;\n        this._stateIndex = state.__index;\n        this.constructor = state;\n    }\n\n    _initStateMachine() {\n        this._state = null;\n        this._stateIndex = 0;\n        this._setStateCounter = 0;\n        this._sm = this._routedType._sm;\n        this.__setState(this._sm.getStateByPath(\"\"));\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\n        this._callEnter(this._state, [], context);\n        this._onStateChange = undefined;\n    }\n\n    /**\n     * Between multiple member names, select the one specified in the deepest state.\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\n     * @param {string[]} memberNames\n     * @returns {string|undefined}\n     * @protected\n     */\n    _getMostSpecificHandledMember(memberNames) {\n        let cur = this._state;\n        do {\n            for (let i = 0, n = memberNames.length; i < n; i++) {\n                const memberName = memberNames[i];\n                if (!cur.__parent) {\n                    if (cur.prototype[memberName]) {\n                        return memberName;\n                    }\n                } else {\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\n                    if (this[alias]) {\n                        return memberName;\n                    }\n                }\n            }\n            cur = cur.__parent;\n        } while (cur);\n    }\n\n    static _getStatesUntilLevel(state, level) {\n        const states = [];\n        while (state.__level > level) {\n            states.push(state);\n            state = state.__parent;\n        }\n        return states;\n    }\n\n    static _getSharedState(state1, state2) {\n        const state1Array = StateMachine._getAncestorStates(state1);\n        const state2Array = StateMachine._getAncestorStates(state2);\n        const n = Math.min(state1Array.length, state2Array.length);\n        for (let i = 0; i < n; i++) {\n            if (state1Array[i] !== state2Array[i]) {\n                return state1Array[i - 1];\n            }\n        }\n        return state1Array[n - 1];\n    }\n\n    static _getAncestorStates(state) {\n        const result = [];\n        do {\n            result.push(state);\n        } while(state = state.__parent);\n        return result.reverse();\n    }\n\n    static _getStateAtLevel(state, level) {\n        if (level > state.__level) {\n            return undefined;\n        }\n\n        while(level < state.__level) {\n            state = state.__parent;\n        }\n        return state;\n    }\n}\n\nclass StateMachineType {\n\n    constructor(type) {\n        this._type = type;\n        this._router = null;\n\n        this.init();\n    }\n\n    get router() {\n        return this._router;\n    }\n\n    init() {\n        this._router = this._createRouter();\n\n        this._stateMap = this._getStateMap();\n\n        this._addStateMemberDelegatorsToRouter();\n\n    }\n\n    _createRouter() {\n        const type = this._type;\n\n        const router = class StateMachineRouter extends type {\n            constructor() {\n                super(...arguments);\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\n                }\n            }\n        };\n        router._isRouter = true;\n        router.prototype._routedType = type;\n        router.original = type;\n\n        this._mixinStateMachineMethods(router);\n\n        return router;\n    }\n\n    _mixinStateMachineMethods(router) {\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\n        for (let i = 0, n = names.length; i < n; i++) {\n            const name = names[i];\n            if (name !== \"constructor\") {\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\n                Object.defineProperty(router.prototype, name, descriptor);\n            }\n        }\n    }\n\n    _addStateMemberDelegatorsToRouter() {\n        const members = this._getAllMemberNames();\n\n        members.forEach(member => {\n            this._addMemberRouter(member);\n        });\n    }\n\n    /**\n     * @note We are generating code because it yields much better performance.\n     */\n    _addMemberRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member);\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        let type = undefined;\n        descriptors.forEach(descriptor => {\n            if (descriptor) {\n                const descType = this._getDescriptorType(descriptor);\n                if (type && (type !== descType)) {\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\n                    return;\n                }\n                type = descType;\n            }\n        });\n\n        switch(type) {\n            case \"method\":\n                this._addMethodRouter(member, descriptors, aliases);\n                break;\n            case \"getter\":\n                this._addGetterSetterRouters(member);\n                break;\n            case \"property\":\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\n                break;\n        }\n    }\n\n    _getDescriptor(state, member, isValid = () => true) {\n        let type = state;\n        let curState = state;\n\n        do {\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\n            if (descriptor) {\n                if (isValid(descriptor)) {\n                    descriptor._source = curState;\n                    return descriptor;\n                }\n            }\n            type = Object.getPrototypeOf(type);\n            if (type && type.hasOwnProperty('__state')) {\n                curState = type;\n            }\n        } while(type && type.prototype);\n        return undefined;\n    }\n\n    _getDescriptorType(descriptor) {\n        if (descriptor.get || descriptor.set) {\n            return 'getter';\n        } else {\n            if (typeof descriptor.value === \"function\") {\n                return 'method';\n            } else {\n                return 'property';\n            }\n        }\n    }\n\n    static _supportsSpread() {\n        if (this.__supportsSpread === undefined) {\n            this.__supportsSpread = false;\n            try {\n                const func = new Function(\"return [].concat(...arguments);\");\n                func();\n                this.__supportsSpread = true;\n            } catch(e) {}\n        }\n        return this.__supportsSpread;\n    }\n\n    _addMethodRouter(member, descriptors, aliases) {\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        const supportsSpread = StateMachineType._supportsSpread();\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    if (supportsSpread) {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\n                    } else {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\n                    }\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            if (supportsSpread) {\n                code.push(`return this[\"${cur}\"](...arguments);`);\n            } else {\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\n            }\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n\n        const descriptor = {value: router};\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _addGetterSetterRouters(member) {\n        const getter = this._getGetterRouter(member);\n        const setter = this._getSetterRouter(member);\n        const descriptor = {\n            get: getter,\n            set: setter\n        };\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _getGetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`return this[\"${cur}\"];`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n        return router;\n    }\n\n    _getSetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\n                } else {\n                    code.push(`if (i < ${i}) ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`this[\"${cur}\"] = arg;`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([\"arg\"], functionBody);\n        return router;\n    }\n\n    static getStateMemberAlias(path, member) {\n        return \"$\" + (path ? path + \".\" : \"\") + member;\n    }\n\n    _getAllMemberNames() {\n        const stateMap = this._stateMap;\n        const map = Object.keys(stateMap);\n        let members = new Set();\n        map.forEach(statePath => {\n            if (statePath === \"\") {\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\n                return;\n            }\n            const state = stateMap[statePath];\n            const names = this._getStateMemberNames(state);\n            names.forEach(name => {\n                members.add(name);\n            })\n        });\n        return [...members];\n    }\n\n    _getStateMemberNames(state) {\n        let type = state;\n        let members = new Set();\n        const isRoot = this._type === state;\n        do {\n            const names = this._getStateMemberNamesForType(type);\n            names.forEach(name => {\n                members.add(name)\n            });\n\n            type = Object.getPrototypeOf(type);\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\n\n        return members;\n    }\n\n    _getStateMemberNamesForType(type) {\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\n        return memberNames.filter(memberName => {\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\n        });\n    }\n\n    static _isStateLocalMember(memberName) {\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\n    }\n\n    getStateByPath(statePath) {\n        if (this._stateMap[statePath]) {\n            return this._stateMap[statePath];\n        }\n\n        // Search for closest match.\n        const parts = statePath.split(\".\");\n        while(parts.pop()) {\n            const statePath = parts.join(\".\");\n            if (this._stateMap[statePath]) {\n                return this._stateMap[statePath];\n            }\n        }\n    }\n\n    _getStateMap() {\n        if (!this._stateMap) {\n            this._stateMap = this._createStateMap();\n        }\n        return this._stateMap;\n    }\n\n    _createStateMap() {\n        const stateMap = {};\n        this._addState(this._type, null, \"\", stateMap);\n        return stateMap;\n    }\n\n    _addState(state, parentState, name, stateMap) {\n        state.__state = true;\n        state.__name = name;\n\n        this._addStaticStateProperty(state, parentState);\n\n        const parentPath = (parentState ? parentState.__path : \"\");\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\n        state.__path = path;\n        state.__level = parentState ? parentState.__level + 1 : 0;\n        state.__parent = parentState;\n        state.__index = Object.keys(stateMap).length;\n        stateMap[path] = state;\n\n        const states = state._states;\n        if (states) {\n            const isInheritedFromParent = (parentState && parentState._states === states);\n            if (!isInheritedFromParent) {\n                const subStates = state._states();\n                subStates.forEach(subState => {\n                    const stateName = StateMachineType._getStateName(subState);\n                    this._addState(subState, state, stateName, stateMap);\n                });\n            }\n        }\n    }\n\n    static _getStateName(state) {\n        const name = state.name;\n\n        const index = name.indexOf('$');\n        if (index > 0) {\n            // Strip off rollup name suffix.\n            return name.substr(0, index);\n        }\n\n        return name;\n    }\n\n    _addStaticStateProperty(state, parentState) {\n        if (parentState) {\n            const isClassStateLevel = parentState && !parentState.__parent;\n            if (isClassStateLevel) {\n                this._router[state.__name] = state;\n            } else {\n                parentState[state.__name] = state;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Element from \"../tree/Element.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport StateMachine from \"./StateMachine.mjs\";\n\n/**\n * @extends StateMachine\n */\nexport default class Component extends Element {\n\n    constructor(stage, properties) {\n        super(stage);\n\n        // Encapsulate tags to prevent leaking.\n        this.tagRoot = true;\n\n        if (Utils.isObjectLiteral(properties)) {\n            Object.assign(this, properties);\n        }\n\n        this.__initialized = false;\n        this.__firstActive = false;\n        this.__firstEnable = false;\n\n        this.__signals = undefined;\n\n        this.__passSignals = undefined;\n\n        this.__construct();\n\n        // Quick-apply template.\n        const func = this.constructor.getTemplateFunc(this);\n        func.f(this, func.a);\n\n        this._build();\n    }\n\n    __start() {\n        StateMachine.setupStateMachine(this);\n        this._onStateChange = Component.prototype.__onStateChange;\n    }\n\n    get state() {\n        return this._getState();\n    }\n\n    __onStateChange() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    _refocus() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    static bindProp(name, func = null) {\n        return {__propertyBinding: true, __name: name, __func: func};\n    }\n\n    __bindProperty(propObj, targetObj, targetProp) {\n        // 1. find binding position: find object and property name to be bound\n        const obj = targetObj;\n        const prop = targetProp;\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\n\n        // 2. create setters for every given dependency\n        for (let i = 0; i < propDependencies.length; i++) {\n            const propName = propDependencies[i];\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\n\n            if (!this.hasOwnProperty(propName)) {\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\n                Object.defineProperty(this, propName, {\n                    set: (value) => {\n                        this[`__prop_${propName}`] = value;\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\n                            __obj[__prop] = __func(this);\n                        }\n                    },\n                    get: () => this[`__prop_${propName}`]\n                });\n            } else {\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\n            }\n        }\n    }\n\n    /**\n     * Returns a high-performance template patcher.\n     */\n    static getTemplateFunc(ctx) {\n        // We need a different template function per patch id.\n        const name = \"_templateFunc\";\n\n        // Be careful with class-based static inheritance.\n        const hasName = '__has' + name;\n        if (this[hasName] !== this) {\n            this[hasName] = this;\n            this[name] = this.parseTemplate(this._template(ctx));\n        }\n        return this[name];\n    }\n\n    static parseTemplate(obj) {\n        const context = {\n            loc: [],\n            store: [],\n            rid: 0\n        };\n\n        this.parseTemplateRec(obj, context, \"element\");\n\n        const code = context.loc.join(\";\\n\");\n        const f = new Function(\"element\", \"store\", code);\n        return {f: f, a: context.store};\n    }\n\n    static parseTemplateRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            let value = obj[key];\n            if (Utils.isUcChar(key.charCodeAt(0))) {\n                // Value must be expanded as well.\n                if (Utils.isObjectLiteral(value)) {\n                    // Ref.\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\n                    let type = value.type ? value.type : Element;\n                    if (type === Element) {\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\n                    } else {\n                        store.push(type);\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\n                    }\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\n                    context.rid++;\n\n                    // Enter sub.\n                    this.parseTemplateRec(value, context, childCursor);\n\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\n                } else if (Utils.isObject(value)) {\n                    // Dynamic assignment.\n                    store.push(value);\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\n                }\n            } else {\n                if (key === \"text\") {\n                    const propKey = cursor + \"__text\";\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\n                    if (value.__propertyBinding === true) {\n                        // Allow binding entire objects to text property\n                        store.push(value);\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                    } else {\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\n                    const shaderCursor = `${cursor}[\"shader\"]`\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    this.parsePropertyBindings(value, context, shaderCursor);\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\n                    const propKey = cursor + \"__texture\";\n                    const type = value.type;\n                    if (type) {\n                        store.push(type);\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\n                    } else {\n                        loc.push(`${propKey} = ${cursor}.texture`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else {\n                    // Property;\n                    if (Utils.isNumber(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                    } else if (Utils.isBoolean(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\n                        // Dynamic assignment.\n                        // Because literal objects may contain dynamics, we store the full object.\n                        store.push(value);\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    } else {\n                        // String etc.\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                    }\n                }\n            }\n        });\n    }\n\n    static parseTemplatePropRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isNumber(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                } else if (Utils.isBoolean(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\n                    // Dynamic assignment.\n                    // Because literal objects may contain dynamics, we store the full object.\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                } else {\n                    // String etc.\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                }\n            }\n        });\n    }\n\n    static parsePropertyBindings(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                }\n            }\n        });\n    }\n\n    _onSetup() {\n        if (!this.__initialized) {\n            this._setup();\n        }\n    }\n\n    _setup() {\n    }\n\n    _onAttach() {\n        if (!this.__initialized) {\n            this.__init();\n            this.__initialized = true;\n        }\n\n        this._attach();\n    }\n\n    _attach() {\n    }\n\n    _onDetach() {\n        this._detach();\n    }\n\n    _detach() {\n    }\n\n    _onEnabled() {\n        if (!this.__firstEnable) {\n            this._firstEnable();\n            this.__firstEnable = true;\n        }\n\n        this._enable();\n    }\n\n    _firstEnable() {\n    }\n\n    _enable() {\n    }\n\n    _onDisabled() {\n        this._disable();\n    }\n\n    _disable() {\n    }\n\n    _onActive() {\n        if (!this.__firstActive) {\n            this._firstActive();\n            this.__firstActive = true;\n        }\n\n        this._active();\n    }\n\n    _firstActive() {\n    }\n\n    _active() {\n    }\n\n    _onInactive() {\n        this._inactive();\n    }\n\n    _inactive() {\n    }\n\n    get application() {\n        return this.stage.application;\n    }\n\n    __construct() {\n        this._construct();\n    }\n\n    _construct() {\n    }\n\n    _build() {\n    }\n\n    __init() {\n        this._init();\n    }\n\n    _init() {\n    }\n\n    _focus(newTarget, prevTarget) {\n    }\n\n    _unfocus(newTarget) {\n    }\n\n    _focusChange(target, newTarget) {\n    }\n\n    _getFocused() {\n        // Override to delegate focus to child components.\n        return this;\n    }\n\n    _setFocusSettings(settings) {\n        // Override to add custom settings. See Application._handleFocusSettings().\n    }\n\n    _handleFocusSettings(settings) {\n        // Override to react on custom settings. See Application._handleFocusSettings().\n    }\n\n    static _template() {\n        return {};\n    }\n\n    hasFinalFocus() {\n        let path = this.application._focusPath;\n        return path && path.length && path[path.length - 1] === this;\n    }\n\n    hasFocus() {\n        let path = this.application._focusPath;\n        return path && (path.indexOf(this) >= 0);\n    }\n\n    get cparent() {\n        return Component.getParent(this);\n    }\n\n    seekAncestorByType(type) {\n        let c = this.cparent;\n        while (c) {\n            if (c.constructor === type) {\n                return c;\n            }\n            c = c.cparent;\n        }\n    }\n\n    getSharedAncestorComponent(element) {\n        let ancestor = this.getSharedAncestor(element);\n        while (ancestor && !ancestor.isComponent) {\n            ancestor = ancestor.parent;\n        }\n        return ancestor;\n    }\n\n    get signals() {\n        return this.__signals;\n    }\n\n    set signals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        this.__signals = v;\n    }\n\n    set alterSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__signals) {\n            this.__signals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__signals[key];\n            } else {\n                this.__signals[key] = v;\n            }\n        }\n    }\n\n    get passSignals() {\n        return this.__passSignals || {};\n    }\n\n    set passSignals(v) {\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\n    }\n\n    set alterPassSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__passSignals) {\n            this.__passSignals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__passSignals[key];\n            } else {\n                this.__passSignals[key] = v;\n            }\n        }\n    }\n\n    /**\n     * Signals the parent of the specified event.\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\n     * @param {string} event\n     * @param {...*} args\n     */\n    signal(event, ...args) {\n        return this._signal(event, args);\n    }\n\n    _signal(event, args) {\n        const signalParent = this._getParentSignalHandler();\n        if (signalParent) {\n            if (this.__signals) {\n                let fireEvent = this.__signals[event];\n                if (fireEvent === false) {\n                    // Ignore event.\n                    return;\n                }\n                if (fireEvent) {\n                    if (fireEvent === true) {\n                        fireEvent = event;\n                    }\n \n                    if (Utils.isFunction(fireEvent)) {\n                        return fireEvent(...args);\n                    }\n\n                    if (signalParent._hasMethod(fireEvent)) {\n                        return signalParent[fireEvent](...args);\n                    }\n                }\n            }\n\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\n            if (passSignal) {\n                // Bubble up.\n                if (passSignal && passSignal !== true) {\n                    // Replace signal name.\n                    event = passSignal;\n                }\n\n                return signalParent._signal(event, args);\n            }\n        }\n    }\n\n    _getParentSignalHandler() {\n        return this.cparent ? this.cparent._getSignalHandler() : null;\n    }\n\n    _getSignalHandler() {\n        if (this._signalProxy) {\n            return this.cparent ? this.cparent._getSignalHandler() : null;\n        }\n        return this;\n    }\n\n    get _signalProxy() {\n        return false;\n    }\n\n    fireAncestors(name, ...args) {\n        if (!name.startsWith('$')) {\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\n        }\n\n        const parent = this._getParentSignalHandler();\n        if (parent) {\n            return parent._doFireAncestors(name, args);\n        }\n    }\n\n    _doFireAncestors(name, args) {\n        if (this._hasMethod(name)) {\n            return this.fire(name, ...args);\n        } else {\n            const signalParent = this._getParentSignalHandler();\n            if (signalParent) {\n                return signalParent._doFireAncestors(name, args);\n            }\n        }\n    }\n\n    static collectSubComponents(subs, element) {\n        if (element.hasChildren()) {\n            const childList = element.__childList;\n            for (let i = 0, n = childList.length; i < n; i++) {\n                const child = childList.getAt(i);\n                if (child.isComponent) {\n                    subs.push(child);\n                } else {\n                    Component.collectSubComponents(subs, child);\n                }\n            }\n        }\n    }\n\n    static getComponent(element) {\n        let parent = element;\n        while (parent && !parent.isComponent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    static getParent(element) {\n        return Component.getComponent(element.parent);\n    }\n}\n\nComponent.prototype.isComponent = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreQuadList {\n\n    constructor(ctx) {\n\n        this.ctx = ctx;\n\n        this.quadTextures = [];\n\n        this.quadElements = [];\n    }\n\n    get length() {\n        return this.quadTextures.length;\n    }\n\n    reset() {\n        this.quadTextures = [];\n        this.quadElements = [];\n        this.dataLength = 0;\n    }\n\n    getElement(index) {\n        return this.quadElements[index]._element;\n    }\n\n    getElementCore(index) {\n        return this.quadElements[index];\n    }\n\n    getTexture(index) {\n        return this.quadTextures[index];\n    }\n\n    getTextureWidth(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.w) {\n            // Render texture;\n            return nativeTexture.w;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.w;\n        }\n    }\n\n    getTextureHeight(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.h) {\n            // Render texture;\n            return nativeTexture.h;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class WebGLCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\n        // We do not (want to) handle memory overflow.\n        const byteSize = ctx.stage.getOption('bufferMemory');\n\n        this.dataLength = 0;\n\n        this.data = new ArrayBuffer(byteSize);\n        this.floats = new Float32Array(this.data);\n        this.uints = new Uint32Array(this.data);\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return index * 80;\n    }\n\n    getQuadContents() {\n        // Debug: log contents of quad buffer.\n        let floats = this.floats;\n        let uints = this.uints;\n        let lines = [];\n        for (let i = 1; i <= this.length; i++) {\n            let str = 'entry ' + i + ': ';\n            for (let j = 0; j < 4; j++) {\n                let b = i * 20 + j * 4;\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\n            }\n            lines.push(str);\n        }\n\n        return lines;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n\n        this.ctx = ctx;\n        this.shader = shader;\n        this.shaderOwner = shaderOwner;\n        this.renderTextureInfo = renderTextureInfo;\n        this.scissor = scissor;\n        this.index = index;\n        this.length = 0;\n\n    }\n\n    get quads() {\n        return this.ctx.renderState.quads;\n    }\n\n    getTexture(index) {\n        return this.quads.getTexture(this.index + index);\n    }\n\n    getElementCore(index) {\n        return this.quads.getElementCore(this.index + index);\n    }\n\n    getElement(index) {\n        return this.quads.getElement(this.index + index);\n    }\n\n    getElementWidth(index) {\n        return this.getElement(index).renderWidth;\n    }\n\n    getElementHeight(index) {\n        return this.getElement(index).renderHeight;\n    }\n\n    getTextureWidth(index) {\n        return this.quads.getTextureWidth(this.index + index);\n    }\n\n    getTextureHeight(index) {\n        return this.quads.getTextureHeight(this.index + index);\n    }\n\n    getRenderWidth() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.w;\n        } else {\n            return this.ctx.stage.w;\n        }\n    }\n\n    getRenderHeight() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.h;\n        } else {\n            return this.ctx.stage.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n\n        this.extraAttribsDataByteOffset = 0;\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return this.quads.getAttribsDataByteOffset(this.index + index);\n    }\n\n    /**\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\n     * @param x\n     * @param y\n     * @return {number[]}\n     */\n    getNormalRenderTextureCoords(x, y) {\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\n        coords[0] /= this.getRenderWidth();\n        coords[1] /= this.getRenderHeight();\n        coords[0] = coords[0] * 2 - 1;\n        coords[1] = 1 - coords[1] * 2;\n        return coords;\n    }\n\n    getProjection() {\n        if (this.renderTextureInfo === null) {\n            return this.ctx.renderExec._projection;\n        } else {\n            return this.renderTextureInfo.nativeTexture.projection;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreRenderExecutor {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.renderState = ctx.renderState;\n\n        this.gl = this.ctx.stage.gl;\n    }\n\n    destroy() {\n        this.ctx = null;\n        this.renderState = null;\n        this.gl = null;\n\n        delete this.ctx;\n        delete this.renderState;\n        delete this.gl;\n    }\n\n    _reset() {\n        this._bindRenderTexture(null);\n        this._setScissor(null);\n        this._clearRenderTexture();\n    }\n\n    execute() {\n        this._reset();\n\n        let qops = this.renderState.quadOperations;\n\n        let i = 0, j = 0, n = qops.length;\n        while (i < n) {\n            this._processQuadOperation(qops[i]);\n            i++;\n        }\n    }\n\n    _processQuadOperation(quadOperation) {\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\n            return;\n        }\n\n        this._setupQuadOperation(quadOperation);\n        this._execQuadOperation(quadOperation);\n\n    }\n\n    _setupQuadOperation(quadOperation) {\n    }\n\n    _execQuadOperation(op) {\n        // Set render texture.\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\n\n        if (this._renderTexture !== nativeTexture) {\n            this._bindRenderTexture(nativeTexture);\n        }\n\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\n            this._setScissor(null);\n            this._clearRenderTexture();\n            op.renderTextureInfo.cleared = true;\n            this._setScissor(op.scissor);\n        } else {\n            this._setScissor(op.scissor);\n        }\n\n        this._renderQuadOperation(op);\n    }\n\n    _renderQuadOperation(op) {\n    }\n\n    _bindRenderTexture(renderTexture) {\n        this._renderTexture = renderTexture;\n    }\n\n    _clearRenderTexture(renderTexture) {\n    }\n\n    _setScissor(area) {\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\n\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\n\n    constructor(ctx) {\n        super(ctx)\n\n        this.gl = this.ctx.stage.gl;\n\n        this.init();\n    }\n\n    init() {\n        let gl = this.gl;\n\n        // Create new sharable buffer for params.\n        this._attribsBuffer = gl.createBuffer();\n\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\n\n        // Init webgl arrays.\n        let allIndices = new Uint16Array(maxQuads * 6);\n\n        // fill the indices with the quads to draw.\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n            allIndices[i] = j;\n            allIndices[i + 1] = j + 1;\n            allIndices[i + 2] = j + 2;\n            allIndices[i + 3] = j;\n            allIndices[i + 4] = j + 2;\n            allIndices[i + 5] = j + 3;\n        }\n\n        // The quads buffer can be (re)used to draw a range of quads.\n        this._quadsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\n\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\n\n    }\n\n    destroy() {\n        super.destroy();\n        this.gl.deleteBuffer(this._attribsBuffer);\n        this.gl.deleteBuffer(this._quadsBuffer);\n\n        this.gl = null;\n        delete this.gl;\n    }\n\n    _reset() {\n        super._reset();\n\n        let gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n        gl.disable(gl.DEPTH_TEST);\n\n        this._stopShaderProgram();\n        this._setupBuffers();\n    }\n\n    _setupBuffers() {\n        let gl = this.gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\n    }\n\n    _setupQuadOperation(quadOperation) {\n        super._setupQuadOperation(quadOperation);\n        this._useShaderProgram(quadOperation.shader, quadOperation);\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            shader.beforeDraw(op);\n            shader.draw(op);\n            shader.afterDraw(op);\n        }\n    }\n\n    /**\n     * @param {WebGLShader} shader;\n     * @param {CoreQuadOperation} operation;\n     */\n    _useShaderProgram(shader, operation) {\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\n            if (this._currentShaderProgram) {\n                this._currentShaderProgram.stopProgram();\n            }\n            shader.useProgram();\n            this._currentShaderProgram = shader;\n        }\n        shader.setupUniforms(operation);\n    }\n\n    _stopShaderProgram() {\n        if (this._currentShaderProgram) {\n            // The currently used shader program should be stopped gracefully.\n            this._currentShaderProgram.stopProgram();\n            this._currentShaderProgram = null;\n        }\n    }\n\n    _bindRenderTexture(renderTexture) {\n        super._bindRenderTexture(renderTexture);\n\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\n        } else {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\n        }\n    }\n\n    _clearRenderTexture() {\n        super._clearRenderTexture();\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            let glClearColor = this.ctx.stage.getClearColor();\n            if (glClearColor) {\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        } else {\n            // Clear texture.\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    }\n\n    _setScissor(area) {\n        super._setScissor(area);\n\n        if (this._scissor === area) {\n            return;\n        }\n        this._scissor = area;\n\n        let gl = this.gl;\n        if (!area) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            let precision = this.ctx.stage.getRenderPrecision();\n            let y = area[1];\n            if (this._renderTexture === null) {\n                // Flip.\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\n            }\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreRenderState {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.stage = ctx.stage;\n\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\n\n        this.renderer = ctx.stage.renderer;\n\n        this.quads = this.renderer.createCoreQuadList(ctx);\n\n    }\n\n    reset() {\n        this._renderTextureInfo = null;\n\n        this._scissor = null;\n\n        this._shader = null;\n\n        this._shaderOwner = null;\n\n        this._realShader = null;\n\n        this._check = false;\n\n        this.quadOperations = [];\n\n        this._texturizer = null;\n\n        this._texturizerTemporary = false;\n\n        this._quadOperation = null;\n\n        this.quads.reset();\n\n        this._temporaryTexturizers = [];\n        \n        this._isCachingTexturizer = false;\n\n    }\n\n    get length() {\n        return this.quads.quadTextures.length;\n    }\n\n    setShader(shader, owner) {\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\n            // Same shader owner: active shader is also the same.\n            // Prevent any shader usage to save performance.\n\n            this._realShader = shader;\n\n            if (shader.useDefault()) {\n                // Use the default shader when possible to prevent unnecessary program changes.\n                shader = this.defaultShader;\n            }\n            if (this._shader !== shader || this._shaderOwner !== owner) {\n                this._shader = shader;\n                this._shaderOwner = owner;\n                this._check = true;\n            }\n        }\n    }\n\n    get renderTextureInfo() {\n        return this._renderTextureInfo;\n    }\n\n    setScissor(area) {\n        if (this._scissor !== area) {\n            if (area) {\n                this._scissor = area;\n            } else {\n                this._scissor = null;\n            }\n            this._check = true;\n        }\n    }\n\n    getScissor() {\n        return this._scissor;\n    }\n\n    setRenderTextureInfo(renderTextureInfo) {\n        if (this._renderTextureInfo !== renderTextureInfo) {\n            this._renderTextureInfo = renderTextureInfo;\n            this._scissor = null;\n            this._check = true;\n        }\n    }\n\n    /**\n     * Sets the texturizer to be drawn during subsequent addQuads.\n     * @param {ElementTexturizer} texturizer\n     */\n    setTexturizer(texturizer, cache = false) {\n        this._texturizer = texturizer;\n        this._cacheTexturizer = cache;\n    }\n\n    set isCachingTexturizer(v) {\n        this._isCachingTexturizer = v;\n    }\n\n    get isCachingTexturizer() {\n        return this._isCachingTexturizer;\n    }\n\n    addQuad(elementCore) {\n        if (!this._quadOperation) {\n            this._createQuadOperation();\n        } else if (this._check && this._hasChanges()) {\n            this._finishQuadOperation();\n            this._check = false;\n        }\n\n        let nativeTexture = null;\n        if (this._texturizer) {\n            nativeTexture = this._texturizer.getResultTexture();\n\n            if (!this._cacheTexturizer) {\n                // We can release the temporary texture immediately after finalizing this quad operation.\n                this._temporaryTexturizers.push(this._texturizer);\n            }\n        }\n\n        if (!nativeTexture) {\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\n        }\n\n        if (this._renderTextureInfo) {\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\n                this._renderTextureInfo.nativeTexture = nativeTexture;\n                this._renderTextureInfo.offset = this.length;\n            } else {\n                // It is not possible to reuse another texture when there is more than one quad.\n                this._renderTextureInfo.nativeTexture = null;\n            }\n            this._renderTextureInfo.empty = false;\n        }\n\n        this.quads.quadTextures.push(nativeTexture);\n        this.quads.quadElements.push(elementCore);\n\n        this._quadOperation.length++;\n\n        this.renderer.addQuad(this, this.quads, this.length - 1)\n    }\n\n    finishedRenderTexture() {\n        if (this._renderTextureInfo.nativeTexture) {\n            // There was only one texture drawn in this render texture.\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\n            // (it should exactly span this render texture).\n            if (!this._isRenderTextureReusable()) {\n                this._renderTextureInfo.nativeTexture = null;\n            }\n        }\n    }\n\n    _isRenderTextureReusable() {\n        const offset = this._renderTextureInfo.offset;\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\n    }\n\n    _hasChanges() {\n        let q = this._quadOperation;\n        if (this._shader !== q.shader) return true;\n        if (this._shaderOwner !== q.shaderOwner) return true;\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\n        if (this._scissor !== q.scissor) {\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _finishQuadOperation(create = true) {\n        if (this._quadOperation) {\n            if (this._quadOperation.length || this._shader.addEmpty()) {\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\n                    // Ignore empty clipping regions.\n                    this.quadOperations.push(this._quadOperation);\n                }\n            }\n\n            if (this._temporaryTexturizers.length) {\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\n                    // We can now reuse these render-to-textures in subsequent stages.\n                    // Huge performance benefit when filtering (fast blur).\n                    this._temporaryTexturizers[i].releaseRenderTexture();\n                }\n                this._temporaryTexturizers = [];\n            }\n\n            this._quadOperation = null;\n        }\n\n        if (create) {\n            this._createQuadOperation();\n        }\n    }\n\n    _createQuadOperation() {\n        this._quadOperation = this.renderer.createCoreQuadOperation(\n            this.ctx,\n            this._shader,\n            this._shaderOwner,\n            this._renderTextureInfo,\n            this._scissor,\n            this.length\n        );\n        this._check = false;\n    }\n\n    finish() {\n        if (this._quadOperation) {\n            // Add remaining.\n            this._finishQuadOperation(false);\n        }\n\n        this.renderer.finishRenderState(this);\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base functionality for shader setup/destroy.\n */\nexport default class WebGLShaderProgram {\n\n    constructor(vertexShaderSource, fragmentShaderSource) {\n\n        this.vertexShaderSource = vertexShaderSource;\n        this.fragmentShaderSource = fragmentShaderSource;\n\n        this._program = null;\n        this.gl = null;\n\n        this._uniformLocations = new Map();\n        this._attributeLocations = new Map();\n\n        this._currentUniformValues = {};\n    }\n\n    compile(gl) {\n        if (this._program) return;\n\n        this.gl = gl;\n\n        this._program = gl.createProgram();\n\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\n\n        gl.attachShader(this._program, glVertShader);\n        gl.attachShader(this._program, glFragShader);\n        gl.linkProgram(this._program);\n\n        // if linking fails, then log and cleanup\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\n            console.error('[Lightning] Error: Could not initialize shader.');\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\n            console.error('[Lightning] gl.getError()', gl.getError());\n\n            // if there is a program info log, log it\n            if (gl.getProgramInfoLog(this._program) !== '') {\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\n            }\n\n            gl.deleteProgram(this._program);\n            this._program = null;\n        }\n\n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    }\n\n    _glCompile(type, src) {\n        let shader = this.gl.createShader(type);\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\n            let idx = 0;\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\n            return null;\n        }\n\n        return shader;\n    }\n\n    getUniformLocation(name) {\n        let location = this._uniformLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getUniformLocation(this._program, name);\n            this._uniformLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    getAttribLocation(name) {\n        let location = this._attributeLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getAttribLocation(this._program, name);\n            this._attributeLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    destroy() {\n        if (this._program) {\n            this.gl.deleteProgram(this._program);\n        }\n\n        this._attributeLocations = null;\n        this._currentUniformValues = null;\n        this.fragmentShaderSource = null;\n        this._program = null;\n        this.gl = null;\n        this._uniformLocations = null;\n        this.vertexShaderSource = null;  \n\n        delete this.vertexShaderSource;\n        delete this._program;        \n        delete this._currentUniformValues;\n        delete this.fragmentShaderSource;\n        delete this.gl;\n        delete this._uniformLocations;\n        delete this._attributeLocations;\n\n    }\n\n    get glProgram() {\n        return this._program;\n    }\n\n    get compiled() {\n        return !!this._program;\n    }\n\n    _valueEquals(v1, v2) {\n        // Uniform value is either a typed array or a numeric value.\n        if (v1.length && v2.length) {\n            for (let i = 0, n = v1.length; i < n; i++) {\n                if (v1[i] !== v2[i]) return false;\n            }\n            return true;\n        } else {\n            return (v1 === v2);\n        }\n    }\n\n    _valueClone(v) {\n        if (v.length) {\n            return v.slice(0);\n        } else {\n            return v;\n        }\n    }\n\n    setUniformValue(name, value, glFunction) {\n        let v = this._currentUniformValues[name];\n        if (v === undefined || !this._valueEquals(v, value)) {\n            let clonedValue = this._valueClone(value);\n            this._currentUniformValues[name] = clonedValue;\n\n            let loc = this.getUniformLocation(name);\n            if (loc) {\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\n                if (isMatrix) {\n                    glFunction.call(this.gl, loc, false, clonedValue);\n                } else {\n                    glFunction.call(this.gl, loc, clonedValue);\n                }\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class WebGLShader extends Shader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        const stage = ctx.stage;\n\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\n        if (!this._program) {\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\n\n            // Let the vbo context perform garbage collection.\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\n        }\n\n        this.gl = stage.gl;\n    }\n\n    get glProgram() {\n        return this._program.glProgram;\n    }\n\n    _init() {\n        if (!this._initialized) {\n            this.initialize();\n            this._initialized = true;\n        }\n    }\n\n    initialize() {\n        this._program.compile(this.gl);\n    }\n\n    get initialized() {\n        return this._initialized;\n    }\n\n    _uniform(name) {\n        return this._program.getUniformLocation(name);\n    }\n\n    _attrib(name) {\n        return this._program.getAttribLocation(name);\n    }\n\n    _setUniform(name, value, glFunction) {\n        this._program.setUniformValue(name, value, glFunction);\n    }\n\n    useProgram() {\n        this._init();\n        this.gl.useProgram(this.glProgram);\n        this.beforeUsage();\n        this.enableAttribs();\n    }\n\n    stopProgram() {\n        this.afterUsage();\n        this.disableAttribs();\n    }\n\n    hasSameProgram(other) {\n        // For performance reasons, we first check for identical references.\n        return (other && ((other === this) || (other._program === this._program)));\n    }\n\n    beforeUsage() {\n        // Override to set settings other than the default settings (blend mode etc).\n    }\n\n    afterUsage() {\n        // All settings changed in beforeUsage should be reset here.\n    }\n\n    enableAttribs() {\n\n    }\n\n    disableAttribs() {\n\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 0;\n    }\n\n    getVertexAttribPointerOffset(operation) {\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\n        // operation.extraAttribsBufferByteOffset.\n    }\n\n    setupUniforms(operation) {\n        // Set all shader-specific uniforms.\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\n        // The uniforms are shared by all shaders that have the same type (and shader program).\n    }\n\n    _getProjection(operation) {\n        return operation.getProjection();\n    }\n\n    getFlipY(operation) {\n        return this._getProjection(operation)[1] < 0;\n    }\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n    cleanup() {\n        this._initialized = false;\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../WebGLShader.mjs\";\n\nexport default class DefaultShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            \n            gl.bindTexture(gl.TEXTURE_2D, glTexture);\n            gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n        }\n    }\n\n}\n\nDefaultShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDefaultShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Renderer {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._defaultShader = undefined;\n    }\n\n    gc(aggressive) {\n    }\n\n    destroy() {\n    }\n\n    getDefaultShader(ctx = this.stage.ctx) {\n        if (!this._defaultShader) {\n            this._defaultShader = this._createDefaultShader(ctx);\n        }\n        return this._defaultShader;\n    }\n\n    _createDefaultShader(ctx) {\n    }\n\n    isValidShaderType(shaderType) {\n        return (shaderType.prototype instanceof this._getShaderBaseType());\n    }\n\n    createShader(ctx, settings) {\n        const shaderType = settings.type;\n        // If shader type is not correct, use a different platform.\n        if (!this.isValidShaderType(shaderType)) {\n            const convertedShaderType = this._getShaderAlternative(shaderType);\n            if (!convertedShaderType) {\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\n                return this._createDefaultShader(ctx);\n            }\n            return new convertedShaderType(ctx);\n        } else {\n            const shader = new shaderType(ctx);\n            Base.patchObject(this, settings);\n            return shader;\n        }\n    }\n\n    _getShaderBaseType() {\n    }\n\n    _getShaderAlternative(shaderType) {\n        return this.getDefaultShader();\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport WebGLShader from \"./WebGLShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\n\nexport default class WebGLRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n        this.shaderPrograms = new Map();\n        this._compressedTextureExtensions = {\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\n        }\n    }\n\n    getCompressedTextureExtensions() {\n        return this._compressedTextureExtensions\n    }\n\n    destroy() {\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\n\n        this.shaderPrograms = null;\n        this._compressedTextureExtensions = null;\n\n        delete this.shaderPrograms;\n        delete this._compressedTextureExtensions;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return WebGLShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getWebGL && shaderType.getWebGL();\n    }\n\n    createCoreQuadList(ctx) {\n        return new WebGLCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new WebGLCoreRenderExecutor(ctx);\n    }\n\n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const gl = this.stage.gl;\n        const glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        glTexture.params = {};\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\n\n        // We need a specific framebuffer for every render texture.\n        glTexture.framebuffer = gl.createFramebuffer();\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\n\n        return glTexture;\n    }\n\n    freeRenderTexture(glTexture) {\n        let gl = this.stage.gl;\n        gl.deleteFramebuffer(glTexture.framebuffer);\n        gl.deleteTexture(glTexture);\n    }\n\n    _getBytesPerPixel(fmt, type) {\n        const gl = this.stage.gl;\n\n        if (fmt === gl.RGBA) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 4;\n\n                case gl.UNSIGNED_SHORT_4_4_4_4:\n                    return 2;\n\n                case gl.UNSIGNED_SHORT_5_5_5_1:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGBA format');\n            }\n        }\n        else if (fmt === gl.RGB) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 3;\n\n                case gl.UNSIGNED_BYTE_5_6_5:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGB format');\n            }\n        }\n        else {\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\n        }\n    }\n\n    uploadTextureSource(textureSource, options) {\n        const gl = this.stage.gl;\n\n        const source = options.source;\n        let compressed = false;\n        if (options.renderInfo) {\n            compressed = options.renderInfo.compressed || false\n        }\n\n        const format = {\n            premultiplyAlpha: true,\n            hasAlpha: true\n        };\n\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\n            format.premultiplyAlpha = options.premultiplyAlpha;\n        }\n\n        if (options && options.hasOwnProperty('flipBlueRed')) {\n            format.flipBlueRed = options.flipBlueRed;\n        }\n\n        if (options && options.hasOwnProperty('hasAlpha')) {\n            format.hasAlpha = options.hasAlpha;\n        }\n\n        if (!format.hasAlpha) {\n            format.premultiplyAlpha = false;\n        }\n\n        format.texParams = options.texParams || {}\n        format.texOptions = options.texOptions || {}\n\n        let glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\n\n        if (Utils.isNode) {\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\n        }\n\n        const texParams = format.texParams;\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n\n        Object.keys(texParams).forEach(key => {\n            const value = texParams[key];\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\n        });\n\n        if (compressed) {\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\n            return glTexture;\n        }\n         \n        const texOptions = format.texOptions;\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\n        if (options && options.imageRef) {\n            texOptions.imageRef = options.imageRef;\n        }\n        \n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\n        \n        glTexture.params = Utils.cloneObjShallow(texParams);\n        glTexture.options = Utils.cloneObjShallow(texOptions);\n\n        // calculate bytes per pixel for vram usage tracking\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\n\n        return glTexture;\n    }\n\n    freeTextureSource(textureSource) {\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        let offset = (index * 20);\n        const elementCore = quads.quadElements[index];\n\n        let r = elementCore._renderContext;\n\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        const mca = StageUtils.mergeColorAlpha;\n\n        if (r.tb !== 0 || r.tc !== 0) {\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta;\n            floats[offset++] = r.py + elementCore._w * r.tc;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._h * r.td;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        } else {\n            // Simple.\n            let cx = r.px + elementCore._w * r.ta;\n            let cy = r.py + elementCore._h * r.td;\n\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        }\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        return ((floats[offset] === 0) &&\n            (floats[offset + 1] === 0) &&\n            (floats[offset + 2] === 0) &&\n            (floats[offset + 3] === 0) &&\n            (uints[offset + 4] === 0xFFFFFFFF) &&\n            (floats[offset + 5] === renderTextureInfo.w) &&\n            (floats[offset + 6] === 0) &&\n            (floats[offset + 7] === 1) &&\n            (floats[offset + 8] === 0) &&\n            (uints[offset + 9] === 0xFFFFFFFF) &&\n            (floats[offset + 10] === renderTextureInfo.w) &&\n            (floats[offset + 11] === renderTextureInfo.h) &&\n            (floats[offset + 12] === 1) &&\n            (floats[offset + 13] === 1) &&\n            (uints[offset + 14] === 0xFFFFFFFF) &&\n            (floats[offset + 15] === 0) &&\n            (floats[offset + 16] === renderTextureInfo.h) &&\n            (floats[offset + 17] === 0) &&\n            (floats[offset + 18] === 1) &&\n            (uints[offset + 19] === 0xFFFFFFFF));\n    }\n\n    finishRenderState(renderState) {\n        // Set extra shader attribute data.\n        let offset = renderState.length * 80;\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\n            offset += extra;\n            if (extra) {\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\n            }\n        }\n        renderState.quads.dataLength = offset;\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        const gl = this.stage.gl;\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\n        const precision = renderTexture.precision;\n        gl.copyTexSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            precision * (options.sx || 0),\n            precision * (options.sy || 0),\n            precision * (options.x || 0),\n            precision * (options.y || 0),\n            precision * (options.w || renderTexture.ow),\n            precision * (options.h || renderTexture.oh));\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class C2dCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this.renderContexts = [];\n        this.modes = [];\n    }\n\n    setRenderContext(index, v) {\n        this.renderContexts[index] = v;\n    }\n\n    setSimpleTc(index, v) {\n        if (v) {\n            this.modes[index] |= 1;\n        } else {\n            this.modes[index] -= (this.modes[index] & 1);\n        }\n    }\n\n    setWhite(index, v) {\n        if (v) {\n            this.modes[index] |= 2;\n        } else {\n            this.modes[index] -= (this.modes[index] & 2);\n        }\n    }\n\n    getRenderContext(index) {\n        return this.renderContexts[index];\n    }\n\n    getSimpleTc(index) {\n        return (this.modes[index] & 1);\n    }\n\n    getWhite(index) {\n        return (this.modes[index] & 2);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\n\n    getRenderContext(index) {\n        return this.quads.getRenderContext(this.index + index);\n    }\n\n    getSimpleTc(index) {\n        return this.quads.getSimpleTc(this.index + index);\n    }\n\n    getWhite(index) {\n        return this.quads.getWhite(this.index + index);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport Utils from \"../../tree/Utils.mjs\";\n\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\n\n    init() {\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            const target = this._renderTexture || this._mainRenderTexture;\n            shader.beforeDraw(op, target);\n            shader.draw(op, target);\n            shader.afterDraw(op, target);\n        }\n    }\n\n    _clearRenderTexture() {\n        const ctx = this._getContext();\n\n        let clearColor = [0, 0, 0, 0];\n        if (this._mainRenderTexture.ctx === ctx) {\n            clearColor = this.ctx.stage.getClearColor();\n        }\n\n        const renderTexture = ctx.canvas;\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\n        } else {\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\n            // Do not use fillRect because it produces artifacts.\n            ctx.globalCompositeOperation = 'copy';\n            ctx.beginPath();\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\n            ctx.closePath();\n            ctx.fill();\n            ctx.globalCompositeOperation = 'source-over';\n        }\n    }\n    \n    _getContext() {\n        if (this._renderTexture) {\n            return this._renderTexture.ctx;\n        } else {\n            return this._mainRenderTexture.ctx;\n        } \n    }\n\n    _restoreContext() {\n        const ctx = this._getContext();\n        ctx.restore();\n        ctx.save();\n        ctx._scissor = null;\n    }\n\n    _setScissor(area) {\n        const ctx = this._getContext();\n\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\n            // Clipping is stored in the canvas context state.\n            // We can't reset clipping alone so we need to restore the full context.\n            this._restoreContext();\n\n            let precision = this.ctx.stage.getRenderPrecision();\n            if (area) {\n                ctx.beginPath();\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n                ctx.closePath();\n                ctx.clip();\n            }\n            ctx._scissor = area;\n        }\n    }\n\n    static _equalScissorAreas(canvas, area, current) {\n        if (!area) {\n            area = [0, 0, canvas.width, canvas.height]\n        }\n        if (!current) {\n            current = [0, 0, canvas.width, canvas.height]\n        }\n        return Utils.equalValues(area, current)\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class C2dShader extends Shader {\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dShader from \"../C2dShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class DefaultShader extends C2dShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\n        this._tintManager = this.ctx.stage.renderer.tintManager;\n    }\n\n    draw(operation, target) {\n        const ctx = target.ctx;\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            const tx = operation.getTexture(i);\n            const vc = operation.getElementCore(i);\n            const rc = operation.getRenderContext(i);\n            const white = operation.getWhite(i);\n            const stc = operation.getSimpleTc(i);\n\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\n            const precision = this.ctx.stage.getRenderPrecision();\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\n\n            const rect = (tx === this._rectangleTexture);\n            const info = {operation, target, index: i, rect};\n\n            if (rect) {\n                // Check for gradient.\n                if (white) {\n                    ctx.fillStyle = 'white';\n                } else {\n                    this._setColorGradient(ctx, vc);\n                }\n\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n                ctx.fillRect(0, 0, vc.w, vc.h);\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            } else {\n                // @todo: set image smoothing based on the texture.\n\n                // @todo: optimize by registering whether identity texcoords are used.\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n\n                // @todo: test if rounding yields better performance.\n\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\n\n                let colorize = !white;\n                if (colorize) {\n                    // @todo: cache the tint texture for better performance.\n\n                    // Draw to intermediate texture with background color/gradient.\n                    // This prevents us from having to create a lot of render texture canvases.\n\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\n                    let color = vc._colorUl;\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\n                    }\n\n                    const alpha = ((color / 16777216) | 0) / 255.0;\n                    ctx.globalAlpha *= alpha;\n\n                    const rgb = color & 0x00FFFFFF;\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\n\n                    // Actually draw result.\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                } else {\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                }\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            }\n        }\n    }\n\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\n        let color = vc._colorUl;\n        let gradient;\n        //@todo: quick single color check.\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\n\n        if (vc._colorUl === vc._colorUr) {\n            if (vc._colorBl === vc._colorBr) {\n                if (vc._colorUl === vc.colorBl) {\n                    // Single color.\n                } else {\n                    // Vertical gradient.\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\n                    if (transparency) {\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\n                    } else {\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\n\n                    }\n                }\n            } else {\n                // Not supported gradient.\n            }\n        } else {\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\n                // Horizontal gradient.\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\n                if (transparency) {\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\n                } else {\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\n                }\n            }\n        }\n\n        if (gradient) {\n            ctx.fillStyle = gradient;\n        } else {\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\n        }\n    }\n\n    _beforeDrawEl(info) {\n    }\n\n    _afterDrawEl(info) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class C2dTextureTintManager {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._usedMemory = 0;\n        this._cachedNativeTextures = new Set();\n    }\n\n    destroy() {\n        this.gc(true);\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n\n        this.stage.addMemoryUsage(delta);\n    }\n\n    delete(nativeTexture) {\n        // Should be called when native texture is cleaned up.\n        if (this._hasCache(nativeTexture)) {\n            const cache = this._getCache(nativeTexture);\n            const prevMemUsage = cache.memoryUsage;\n            cache.clear();\n            this._cachedNativeTextures.delete(nativeTexture);\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\n        }\n    }\n\n    getTintTexture(nativeTexture, color) {\n        const frame = this.stage.frameCounter;\n\n        this._cachedNativeTextures.add(nativeTexture);\n\n        const cache = this._getCache(nativeTexture);\n\n        const item = cache.get(color);\n        item.lf = frame;\n\n        if (item.tx) {\n            if (nativeTexture.update > item.u) {\n                // Native texture was updated in the mean time: renew.\n                this._tintTexture(item.tx, nativeTexture, color)\n            }\n\n            return item.tx;\n        } else {\n            const before = cache.memoryUsage;\n\n            // Find blanco tint texture.\n            let target = cache.reuseTexture(frame);\n            if (target) {\n                target.ctx.clearRect(0, 0, target.width, target.height);\n            } else {\n                // Allocate new.\n                target = document.createElement('canvas');\n                target.width = nativeTexture.w;\n                target.height = nativeTexture.h;\n                target.ctx = target.getContext('2d');\n            }\n\n            this._tintTexture(target, nativeTexture, color);\n            cache.set(color, target, frame);\n\n            const after = cache.memoryUsage;\n\n            if (after !== before) {\n                this._addMemoryUsage(after - before);\n            }\n\n            return target;\n        }\n    }\n\n    _tintTexture(target, source, color) {\n        let col = color.toString(16);\n        while (col.length < 6) {\n            col = \"0\" + col;\n        }\n        target.ctx.fillStyle = '#' + col;\n        target.ctx.globalCompositeOperation = 'copy';\n        target.ctx.fillRect(0, 0, source.w, source.h);\n        target.ctx.globalCompositeOperation = 'multiply';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n\n        // Alpha-mix the texture.\n        target.ctx.globalCompositeOperation = 'destination-in';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n    }\n\n    _hasCache(nativeTexture) {\n        return !!nativeTexture._tintCache;\n    }\n\n    _getCache(nativeTexture) {\n        if (!nativeTexture._tintCache) {\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\n        }\n        return nativeTexture._tintCache;\n    }\n\n    gc(aggressive = false) {\n        const frame = this.stage.frameCounter;\n        let delta = 0;\n        this._cachedNativeTextures.forEach(texture => {\n            const cache = this._getCache(texture);\n            if (aggressive) {\n                delta += cache.memoryUsage;\n                cache.clear();\n            } else {\n                const before = cache.memoryUsage;\n                cache.cleanup(frame);\n                cache.releaseBlancoTextures();\n                delta += (cache.memoryUsage - before);\n            }\n        });\n\n        if (aggressive) {\n            this._cachedNativeTextures.clear();\n        }\n\n        if (delta) {\n            this._addMemoryUsage(delta);\n        }\n    }\n\n}\n\nclass C2dTintCache {\n\n    constructor(nativeTexture) {\n        this._tx = nativeTexture;\n        this._colors = new Map();\n        this._blancoTextures = null;\n        this._lastCleanupFrame = 0;\n        this._memTextures = 0;\n    }\n\n    get memoryUsage() {\n        return this._memTextures * this._tx.w * this._tx.h;\n    }\n\n    releaseBlancoTextures() {\n        this._memTextures -= this._blancoTextures.length;\n        this._blancoTextures = [];\n    }\n\n    clear() {\n        // Dereference the textures.\n        this._blancoTextures = null;\n        this._colors.clear();\n        this._memTextures = 0;\n    }\n\n    get(color) {\n        let item = this._colors.get(color);\n        if (!item) {\n            item = {lf: -1, tx: undefined, u: -1};\n            this._colors.set(color, item);\n        }\n        return item;\n    }\n\n    set(color, texture, frame) {\n        const item = this.get(color);\n        item.lf = frame;\n        item.tx = texture;\n        item.u = frame;\n        this._memTextures++;\n    }\n\n    cleanup(frame) {\n        // We only need to clean up once per frame.\n        if (this._lastCleanupFrame !== frame) {\n\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\n            this._blancoTextures = [];\n\n            this._colors.forEach((item, color) => {\n                // Clean up entries that were not used last frame.\n                if (item.lf < frame - 1) {\n                    if (item.tx) {\n                        // Keep as reusable blanco texture.\n                        this._blancoTextures.push(item.tx);\n                    }\n                    this._colors.delete(color);\n                }\n            });\n\n            this._lastCleanupFrame = frame;\n        }\n    }\n\n    reuseTexture(frame) {\n        // Try to reuse textures, because creating them every frame is expensive.\n        this.cleanup(frame);\n        if (this._blancoTextures && this._blancoTextures.length) {\n            this._memTextures--;\n            return this._blancoTextures.pop();\n        }\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport C2dShader from \"./C2dShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\n\nexport default class C2dRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n\n        this.tintManager = new TextureTintManager(stage);\n\n        this.setupC2d(this.stage.c2d.canvas);\n    }\n\n    destroy() {\n        this.tintManager.destroy();\n\n        this.tintManager = null;\n        delete this.tintManager;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return C2dShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getC2d && shaderType.getC2d();\n    }\n\n    createCoreQuadList(ctx) {\n        return new C2dCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new C2dCoreRenderExecutor(ctx);\n    }\n    \n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const canvas = document.createElement('canvas');\n        canvas.width = pw;\n        canvas.height = ph;\n        this.setupC2d(canvas);\n        return canvas;\n    }\n    \n    freeRenderTexture(nativeTexture) {\n        this.tintManager.delete(nativeTexture);\n    }\n\n    gc(aggressive) {\n        this.tintManager.gc(aggressive);\n    }\n\n    uploadTextureSource(textureSource, options) {\n        // For canvas, we do not need to upload.\n        if (options.source.buffer) {\n            // Convert RGBA buffer to canvas.\n            const canvas = document.createElement('canvas');\n            canvas.width = options.w;\n            canvas.height = options.h;\n\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\n            return canvas;\n        }\n\n        return options.source;\n    }\n\n    freeTextureSource(textureSource) {\n        this.tintManager.delete(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        // Render context changes while traversing so we save it by ref.\n        const elementCore = quads.quadElements[index];\n        quads.setRenderContext(index, elementCore._renderContext);\n        quads.setWhite(index, elementCore.isWhite());\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        // @todo: check render coords/matrix, maybe move this to core?\n        return false;\n    }\n\n    finishRenderState(renderState) {\n    }\n\n    setupC2d(canvas) {\n        const ctx = canvas.getContext('2d');\n        canvas.ctx = ctx;\n\n        ctx._scissor = null;\n\n        // Save base state so we can restore the defaults later.\n        canvas.ctx.save();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\n\nexport default class SparkShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    if (glTexture.options && glTexture.options.imageRef) {\n                        let elementPostion = (i > 0) ? (i - 1) : i;\n                        const precision = this.ctx.stage.getOption('precision');\n                        let vc = operation.getElementCore(elementPostion);\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                    } else {\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    }\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                if (glTexture.options && glTexture.options.imageRef) {\n                    const precision = this.ctx.stage.getOption('precision');\n                    let vc = operation.getElementCore(pos);\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                } else {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                }\n            }\n        }\n    }\n\n}\n\nSparkShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nSparkShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\nimport SparkShader from \"./shaders/SparkShader.mjs\";\n\nexport default class SparkRenderer extends WebGLRenderer {\n\n    constructor(stage) {\n        super(stage);\n    }\n\n    _createDefaultShader(ctx) {\n        return new SparkShader(ctx);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        global.beginDrawing();\n        let ret = super.createCoreRenderExecutor(ctx);\n        global.endDrawing();\n        return ret;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ImageWorker {\n\n    constructor(options = {}) {\n        this._items = new Map();\n        this._id = 0;\n\n        this._initWorker();\n    }\n\n    destroy() {\n        if (this._worker) {\n            this._worker.terminate();\n        }\n\n        this._items = null;\n        this._worker = null;\n\n        delete this._items;\n        delete this._worker;        \n    }\n\n    _initWorker() {\n        const code = `(${createWorker.toString()})()`;\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\n            type: 'application/javascript; charset=utf-8'\n        });\n        this._worker = new Worker(blobURL);\n\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\n\n        this._worker.onmessage = (e) => {\n            if (e.data && e.data.id) {\n                const id = e.data.id;\n                const item = this._items.get(id);\n                if (item) {\n                    if (e.data.type == 'data') {\n                        this.finish(item, e.data.info);\n                    } else {\n                        this.error(item, e.data.info);\n                    }\n                }\n            }\n        }\n    }\n\n    create(src) {\n        const id = ++this._id;\n        const item = new ImageWorkerImage(this, id, src);\n        this._items.set(id, item);\n        this._worker.postMessage({type: \"add\", id: id, src: src});\n        return item;\n    }\n\n    cancel(image) {\n        this._worker.postMessage({type: \"cancel\", id: image.id});\n        this._items.delete(image.id);\n    }\n\n    error(image, info) {\n        image.error(info);\n        this._items.delete(image.id);\n    }\n\n    finish(image, info) {\n        image.load(info);\n        this._items.delete(image.id);\n    }\n\n}\n\nclass ImageWorkerImage {\n\n    constructor(manager, id, src) {\n        this._manager = manager;\n        this._id = id;\n        this._src = src;\n        this._onError = null;\n        this._onLoad = null;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set onError(f) {\n        this._onError = f;\n    }\n\n    set onLoad(f) {\n        this._onLoad = f;\n    }\n\n    cancel() {\n        this._manager.cancel(this);\n    }\n\n    load(info) {\n        if (this._onLoad) {\n            this._onLoad(info);\n        }\n    }\n\n    error(info) {\n        if (this._onError) {\n            this._onError(info);\n        }\n    }\n\n}\n\n/**\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\n */\nconst createWorker = function() {\n\n    function ImageWorkerServer() {\n\n        this.items = new Map();\n\n        var t = this;\n        onmessage = function(e) {\n            t._receiveMessage(e);\n        }\n\n    }\n\n    ImageWorkerServer.isPathAbsolute = function(path) {\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\n    };\n\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\n        if (e.data.type === 'config') {\n            this.config = e.data.config;\n\n            var base = this.config.path;\n            // the constructing of the basepath fails\n            // if location.hash contains a slash\n            var hasHashPath = /#.*?\\//;\n            if(hasHashPath.test(base)){\n                base = base.replace(/#.*$/,'');\n            }\n\n            var parts = base.split(\"/\");\n            parts.pop();\n            this._relativeBase = parts.join(\"/\") + \"/\";\n\n        } else if (e.data.type === 'add') {\n            this.add(e.data.id, e.data.src);\n        } else if (e.data.type === 'cancel') {\n            this.cancel(e.data.id);\n        }\n    };\n\n    ImageWorkerServer.prototype.add = function(id, src) {\n        // Convert relative URLs.\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\n            src = this._relativeBase + src;\n        }\n\n        if (src.substr(0,2) === \"//\") {\n            // This doesn't work for image workers.\n            src = this.config.protocol + src;\n        }\n\n        var item = new ImageWorkerServerItem(id, src);\n        var t = this;\n        item.onFinish = function(result) {\n            t.finish(item, result);\n        };\n        item.onError = function(info) {\n            t.error(item, info);\n        };\n        this.items.set(id, item);\n        item.start();\n    };\n\n    ImageWorkerServer.prototype.cancel = function(id) {\n        var item = this.items.get(id);\n        if (item) {\n            item.cancel();\n            this.items.delete(id);\n        }\n    }\n\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\n        postMessage({\n            type: \"data\",\n            id: item.id,\n            info: {\n                imageBitmap,\n                hasAlphaChannel\n            }\n        }, [imageBitmap]);\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\n        postMessage({\n            type: \"error\",\n            id: item.id,\n            info: {\n                type,\n                message\n            }\n        });\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.isWPEBrowser = function() {\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\n    };\n\n    function ImageWorkerServerItem(id, src) {\n\n        this._onError = undefined;\n        this._onFinish = undefined;\n        this._id = id;\n        this._src = src;\n        this._xhr = undefined;\n        this._mimeType = undefined;\n        this._canceled = false;\n\n    }\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\n        get: function() {\n            return this._id;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\n        get: function() {\n            return this._onFinish;\n        },\n        set: function(f) {\n            this._onFinish = f;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\n        get: function() {\n            return this._onError;\n        },\n        set: function(f) {\n            this._onError = f;\n        }\n    });\n\n    ImageWorkerServerItem.prototype.start = function() {\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open(\"GET\", this._src, true);\n        this._xhr.responseType = \"blob\";\n\n        var t = this;\n        this._xhr.onerror = function(oEvent) {\n            t.error({type: \"connection\", message: \"Connection error\"});\n        };\n\n        this._xhr.onload = function(oEvent) {\n            var blob = t._xhr.response;\n            t._mimeType = blob.type;\n\n            t._createImageBitmap(blob);\n        };\n\n        this._xhr.send();\n    };\n\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\n        var t = this;\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\n            t.finish({\n                imageBitmap,\n                hasAlphaChannel: t._hasAlphaChannel()\n            });\n        }).catch(function(e) {\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\n        });\n    };\n\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\n        if (ImageWorkerServer.isWPEBrowser()) {\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\n            return true;\n        } else {\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\n        }\n    };\n\n    ImageWorkerServerItem.prototype.cancel = function() {\n        if (this._canceled) return;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._canceled = true;\n    };\n\n    ImageWorkerServerItem.prototype.error = function(type, message) {\n        if (!this._canceled && this._onError) {\n            this._onError({type, message});\n        }\n    };\n\n    ImageWorkerServerItem.prototype.finish = function(info) {\n        if (!this._canceled && this._onFinish) {\n            this._onFinish(info);\n        }\n    };\n\n    var worker = new ImageWorkerServer();\n};\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport ImageWorker from \"./ImageWorker.mjs\";\n\n/**\n * Platform-specific functionality.\n */\nexport default class WebPlatform {\n\n    init(stage) {\n        this.stage = stage;\n        this._looping = false;\n        this._awaitingLoop = false;\n\n        // Alternative handler to avoid RAF when idle\n        this._loopHandler = null;\n        this._idleLoopCounter = 0;\n        this._idleLoopDelay = 60;\n\n        if (this.stage.getOption(\"useImageWorker\")) {\n            if (!window.createImageBitmap || !window.Worker) {\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\n            } else {\n                this._imageWorker = new ImageWorker();\n            }\n        }\n\n        this._registerVisibilityChangeHandler();\n    }\n\n    destroy() {\n        if (this._imageWorker) {\n            this._imageWorker.destroy();\n        }\n\n        clearInterval(this._loopHandler);\n\n        this._removeKeyHandler();\n        this._removeClickHandler();\n        this._removeHoverHandler();\n        this._removeScrollWheelHandler();\n        this._removeVisibilityChangeHandler();\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    startLoop() {\n        this._looping = true;\n        if (!this._awaitingLoop) {\n            this.loop();\n        }\n    }\n\n    stopLoop() {\n        this._looping = false;\n    }\n\n    switchLoop() {\n        if (this._idleLoopCounter < this._idleLoopDelay) {\n            this._idleLoopCounter++;\n            return;\n        }\n        if (!this.stage.ctx.hasRenderUpdates()) {\n            this.stopLoop();\n            this._loopHandler = setInterval(() => {\n                this.stage.updateFrame();\n                this.stage.idleFrame();\n                if (this.stage.ctx.hasRenderUpdates()) {\n                    clearInterval(this._loopHandler);\n                    this.startLoop();\n                };\n            }, 1000 / 60);\n        } else {\n            this._idleLoopCounter = 0;\n        }\n    }\n\n    loop() {\n        let self = this;\n        let lp = function () {\n            self._awaitingLoop = false;\n            if (self._looping) {\n                self.stage.updateFrame();\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\n                    self.switchLoop();\n                }\n                self.stage.renderFrame();\n                requestAnimationFrame(lp);\n                self._awaitingLoop = true;\n            }\n        }\n        requestAnimationFrame(lp);\n    }\n\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\n        gl.compressedTexImage2D(\n            gl.TEXTURE_2D,\n            0,\n            source.glInternalFormat,\n            source.pixelWidth,\n            source.pixelHeight,\n            0,\n            view,\n        )\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    uploadGlTexture(gl, textureSource, source, options) {\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\n            // Web-specific data types.\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n        } else if (source instanceof HTMLCanvasElement) {\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n            } else if (source.width > 0 && source.height > 0) {\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\n                const ctx = source.getContext('2d');\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\n        }\n    }\n\n    /**\n     * KTX File format specification\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\n     **/\n    handleKtxLoad(cb, src) {\n        var self = this;\n        return function () {\n            var arraybuffer = this.response;\n            var view = new DataView(arraybuffer);\n\n            // identifier, big endian\n            var targetIdentifier = 3632701469\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\n                cb('Parsing failed: identifier ktx mismatch:', src)\n            }\n\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\n            var data = {\n                glType: view.getUint32(16, littleEndian),\n                glTypeSize: view.getUint32(20, littleEndian),\n                glFormat: view.getUint32(24, littleEndian),\n                glInternalFormat: view.getUint32(28, littleEndian),\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\n                pixelWidth: view.getUint32(36, littleEndian),\n                pixelHeight: view.getUint32(40, littleEndian),\n                pixelDepth: view.getUint32(44, littleEndian),\n                numberOfArrayElements: view.getUint32(48, littleEndian),\n                numberOfFaces: view.getUint32(52, littleEndian),\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\n                kvps: [],\n                mipmaps: [],\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            const props = (obj) => {\n                const p = [];\n                for (let v in obj) {\n                    p.push(obj[v]);\n                }\n                return p;\n            }\n\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\n                .filter((obj) => obj != null)\n                .map((obj) => props(obj))\n                .reduce((prev, current) => prev.concat(current));\n\n            if (!formats.includes(data.glInternalFormat)) {\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\n            }\n\n            var offset = 64\n            // Key Value Pairs of data start at byte offset 64\n            // But the only known kvp is the API version, so skipping parsing.\n            offset += data.bytesOfKeyValueData;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                var imageSize = view.getUint32(offset);\n                offset += 4;\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\n                offset += imageSize\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    handlePvrLoad(cb, src) {\n        return function () {\n            // pvr header length in 32 bits\n            const pvrHeaderLength = 13;\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n            const pvrFormatEtc1 = 0x8D64;\n            const pvrWidth = 7;\n            const pvrHeight = 6;\n            const pvrMipmapCount = 11;\n            const pvrMetadata = 12;\n            const arrayBuffer = this.response;\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n            const dataOffset = header[pvrMetadata] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            var data = {\n                glInternalFormat: pvrFormatEtc1,\n                pixelWidth: header[pvrWidth],\n                pixelHeight: header[pvrHeight],\n                numberOfMipmapLevels: header[pvrMipmapCount],\n                mipmaps: [],\n                pvr: true,\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            let offset = 0\n            let width = data.pixelWidth;\n            let height = data.pixelHeight;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n                data.mipmaps.push(view);\n                offset += level;\n                width = width >> 1;\n                height = height >> 1;\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    loadSrcTexture({ src, hasAlpha }, cb) {\n        let cancelCb = undefined;\n        let isPng = (src.toLowerCase().indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\n        let isKtx = src.indexOf('.ktx') >= 0;\n        let isPvr = src.indexOf('.pvr') >= 0;\n        if (isKtx || isPvr) {\n            let request = new XMLHttpRequest();\n            request.addEventListener(\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\n            );\n            request.open(\"GET\", src);\n            request.responseType = \"arraybuffer\";\n            request.send();\n            cancelCb = function () {\n                request.abort();\n            }\n        } else if (this._imageWorker) {\n            // WPE-specific image parser.\n            const image = this._imageWorker.create(src);\n            image.onError = function (err) {\n                return cb(\"Image load error\");\n            };\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\n                cb(null, {\n                    source: imageBitmap,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: hasAlphaChannel,\n                    premultiplyAlpha: true\n                });\n            };\n            cancelCb = function () {\n                image.cancel();\n            }\n        } else {\n            let image = new Image();\n\n            // On the PS4 platform setting the `crossOrigin` attribute on\n            // images can cause CORS failures.\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\n                // Base64.\n                image.crossOrigin = \"Anonymous\";\n            }\n            image.onerror = function (err) {\n                // Ignore error message when cancelled.\n                if (image.src) {\n                    return cb(\"Image load error\");\n                }\n            };\n            image.onload = function () {\n                cb(null, {\n                    source: image,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: isPng || hasAlpha\n                });\n            };\n            image.src = src;\n\n            cancelCb = function () {\n                image.onerror = null;\n                image.onload = null;\n                image.removeAttribute('src');\n            }\n        }\n\n        return cancelCb;\n    }\n\n    createWebGLContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let opts = {\n            alpha: true,\n            antialias: false,\n            premultipliedAlpha: true,\n            stencil: true,\n            preserveDrawingBuffer: false\n        };\n\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts) || canvas.getContext('webgl2', opts);\n\n        if (!gl) {\n            throw new Error('This browser does not support webGL.');\n        }\n\n        return gl;\n    }\n\n    createCanvasContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let c2d = canvas.getContext('2d');\n        if (!c2d) {\n            throw new Error('This browser does not support 2d canvas.');\n        }\n\n        return c2d;\n    }\n\n    getHrTime() {\n        return window.performance ? window.performance.now() : (new Date()).getTime();\n    }\n\n    getDrawingCanvas() {\n        // We can't reuse this canvas because textures may load async.\n        return document.createElement('canvas');\n    }\n\n    getTextureOptionsForDrawingCanvas(canvas) {\n        let options = {};\n        options.source = canvas;\n        return options;\n    }\n\n    nextFrame(changes) {\n        /* WebGL blits automatically */\n    }\n\n    registerKeydownHandler(keyhandler) {\n        this._keydownListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keydown', this._keydownListener);\n    }\n\n    registerKeyupHandler(keyhandler) {\n        this._keyupListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keyup', this._keyupListener);\n    }\n\n    _removeKeyHandler() {\n        if (this._keydownListener) {\n            window.removeEventListener('keydown', this._keydownListener);\n        }\n\n        if (this._keyupListener) {\n            window.removeEventListener('keyup', this._keyupListener);\n        }\n    }\n\n    registerClickHandler(clickHandler) {\n        this._clickListener = e => {\n            clickHandler(e);\n        };\n        window.addEventListener('mousedown', this._clickListener);\n    }\n\n    _removeClickHandler() {\n        if (this._clickListener) {\n            window.removeEventListener('mousedown', this._clickListener);\n        }\n    }\n\n    registerHoverHandler(hoverHandler) {\n        this._hoverListener = e => {\n            hoverHandler(e);\n        };\n        window.addEventListener('mousemove', this._hoverListener);\n    }\n\n    _removeHoverHandler() {\n        if (this._hoverListener) {\n            window.removeEventListener('mousemove', this._hoverListener);\n        }\n    }\n\n    registerScrollWheelHandler(registerScrollWheelHandler) {\n        this._scrollWheelListener = e => {\n            registerScrollWheelHandler(e);\n        }\n        window.addEventListener('wheel', this._scrollWheelListener);\n    }\n\n    _removeScrollWheelHandler() {\n        if (this._scrollWheelListener) {\n            window.removeEventListener('wheel', this._scrollWheelListener);\n        }\n    }\n\n    /**\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\n     */\n    _registerVisibilityChangeHandler() {\n        this._visibilityChangeHandler = () => {\n            if (document.visibilityState === 'visible') {\n                this.stage.root.core.setHasRenderUpdates(2);\n                this.stage.renderFrame();\n            }\n        }\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\n    }\n\n    _removeVisibilityChangeHandler() {\n        if (this._visibilityChangeHandler) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\n\nexport default class PlatformLoader {\n    static load(options) {\n        if (options.platform) {\n            return options.platform;\n        } else {\n            return WebPlatform;\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value == 'string';\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\n        } else {\n            return v1 === v2\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n}\n\n/**\n * Maintains the state of a WebGLRenderingContext.\n */\nclass WebGLState {\n\n    constructor(id, gl) {\n        this._id = id;\n        this._gl = gl;\n        this._program = undefined;\n        this._buffers = new Map();\n        this._framebuffers = new Map();\n        this._renderbuffers = new Map();\n\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\n        this._vertexAttribs = new Array(16);\n        this._nonDefaultFlags = new Set();\n        this._settings = new Map();\n        this._textures = new Array(8);\n        this._maxTexture = 0;\n        this._activeTexture = gl.TEXTURE0;\n        this._pixelStorei = new Array(5);\n    }\n\n    _getDefaultFlag(cap) {\n        return (cap === this._gl.DITHER);\n    }\n\n    setFlag(cap, v) {\n        const def = this._getDefaultFlag(cap);\n        if (v === def) {\n            return this._nonDefaultFlags.delete(cap);\n        } else {\n            if (!this._nonDefaultFlags.has(cap)) {\n                this._nonDefaultFlags.add(cap);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    setBuffer(target, buffer) {\n        const change = this._buffers.get(target) !== buffer;\n        this._buffers.set(target, buffer);\n\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\n            // When the array buffer is changed all attributes are cleared.\n            this._vertexAttribs = [];\n        }\n\n        return change;\n    }\n\n    setFramebuffer(target, buffer) {\n        const change = this._framebuffers.get(target) !== buffer;\n        this._framebuffers.set(target, buffer);\n        return change;\n    }\n\n    setRenderbuffer(target, buffer) {\n        const change = this._renderbuffers.get(target) !== buffer;\n        this._renderbuffers.set(target, buffer);\n        return change;\n    }\n\n    setProgram(program) {\n        const change = this._program !== program;\n        this._program = program;\n        return change\n    }\n\n    setSetting(func, v) {\n        const s = this._settings.get(func);\n        const change = !s || !Utils.equalValues(s, v);\n        this._settings.set(func, v);\n        return change\n    }\n\n    disableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va && va[5]) {\n            va[5] = false;\n            return true;\n        }\n        return false;\n    }\n\n    enableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va) {\n            if (!va[0]) {\n                va[0] = true;\n                return true;\n            }\n        } else {\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\n            return true;\n        }\n        return false;\n    }\n\n    vertexAttribPointer(index, props) {\n        let va = this._vertexAttribs[index];\n        let equal = false;\n        if (va) {\n            equal = va[0] === props[0] &&\n                va[1] === props[1] &&\n                va[2] === props[2] &&\n                va[3] === props[3] &&\n                va[4] === props[4];\n        }\n\n        if (equal) {\n            return false;\n        } else {\n            props[5] = va ? va[5] : false;\n            return true;\n        }\n    }\n\n    setActiveTexture(texture) {\n        const changed = this._activeTexture !== texture;\n        this._activeTexture = texture;\n        return changed;\n    }\n\n    bindTexture(target, texture) {\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\n        const current = this._textures[activeIndex];\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\n        if (current) {\n            if (current[targetIndex] === texture) {\n                return false;\n            }\n            current[targetIndex] = texture;\n            return true;\n        } else {\n            if (texture) {\n                this._textures[activeIndex] = [];\n                this._textures[activeIndex][targetIndex] = texture;\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n\n    setPixelStorei(pname, param) {\n        const i = WebGLState._getPixelStoreiIndex(pname);\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\n        this._pixelStorei[i] = param;\n        return change;\n    }\n\n    migrate(s) {\n        const t = this;\n\n        // Warning: migrate should call the original prototype methods directly.\n\n        this._migrateFlags(t, s);\n\n        // useProgram\n        if (s._program !== t._program) {\n            this._gl._useProgram(s._program);\n        }\n\n        this._migrateFramebuffers(t, s);\n        this._migrateRenderbuffers(t, s);\n\n        const buffersChanged = this._migrateBuffers(t, s);\n        this._migrateAttributes(t, s, buffersChanged);\n\n        this._migrateFlags(t, s);\n\n        this._migrateSettings(t, s);\n\n        this._migratePixelStorei(t, s);\n        \n        this._migrateTextures(t, s);\n        \n    }\n\n    _migratePixelStorei(t, s) {\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\n            }\n        }\n    }\n\n    _migrateTextures(t, s) {\n        const max = Math.max(t._maxTexture, s._maxTexture);\n\n        let activeTexture = t._activeTexture;\n\n        for (let i = 0; i < max; i++) {\n            const sTargets = s._textures[i];\n            const tTargets = t._textures[i];\n            const textureNumb = WebGLState._getTextureByIndex(i);\n\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\n            for (let j = 0, n = targetMax; j < n; j++) {\n                const target = WebGLState._getTextureTargetByIndex(j);\n                if (activeTexture !== textureNumb) {\n                    this._gl._activeTexture(textureNumb);\n                    activeTexture = textureNumb;\n                }\n\n                const texture = (sTargets && sTargets[j]) || null;\n                this._gl._bindTexture(target, texture);\n            }\n        }\n\n        if (s._activeTexture !== activeTexture) {\n            this._gl._activeTexture(s._activeTexture);\n        }\n    }\n\n    _migrateBuffers(t, s) {\n        s._buffers.forEach((framebuffer, target) => {\n            if (t._buffers.get(target) !== framebuffer) {\n                this._gl._bindBuffer(target, framebuffer);\n            }\n        });\n\n        t._buffers.forEach((buffer, target) => {\n            const b = s._buffers.get(target);\n            if (b === undefined) {\n                this._gl._bindBuffer(target, null);\n            }\n        });\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\n    }\n\n    _migrateFramebuffers(t, s) {\n        s._framebuffers.forEach((framebuffer, target) => {\n            if (t._framebuffers.get(target) !== framebuffer) {\n                this._gl._bindFramebuffer(target, framebuffer);\n            }\n        });\n\n        t._framebuffers.forEach((framebuffer, target) => {\n            const fb = s._framebuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindFramebuffer(target, null);\n            }\n        });\n    }\n\n    _migrateRenderbuffers(t, s) {\n        s._renderbuffers.forEach((renderbuffer, target) => {\n            if (t._renderbuffers.get(target) !== renderbuffer) {\n                this._gl._bindRenderbuffer(target, renderbuffer);\n            }\n        });\n\n        t._renderbuffers.forEach((renderbuffer, target) => {\n            const fb = s._renderbuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindRenderbuffer(target, null);\n            }\n        });\n    }\n\n    _migrateAttributes(t, s, buffersChanged) {\n\n        if (!buffersChanged) {\n            t._vertexAttribs.forEach((attrib, index) => {\n                if (!s._vertexAttribs[index]) {\n                    // We can't 'delete' a vertex attrib so we'll disable it.\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n\n            s._vertexAttribs.forEach((attrib, index) => {\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                } else {\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n        } else {\n            // When buffers are changed, previous attributes were reset automatically.\n            s._vertexAttribs.forEach((attrib, index) => {\n                if (attrib[0]) {\n                    // Do not set vertex attrib pointer when it was just the default value.\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\n                }\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                }\n            });\n        }\n    }\n\n    _migrateSettings(t, s) {\n        const defaults = this.constructor.getDefaultSettings();\n        t._settings.forEach((value, func) => {\n            const name = func.name || func.xname;\n            if (!s._settings.has(func)) {\n                let args = defaults.get(name);\n                if (Utils.isFunction(args)) {\n                    args = args(this._gl);\n                }\n                // We are actually setting the setting for optimization purposes.\n                s._settings.set(func, args);\n                func.apply(this._gl, args);\n            }\n        });\n        s._settings.forEach((value, func) => {\n            const tValue = t._settings.get(func);\n            if (!tValue || !Utils.equalValues(tValue, value)) {\n                func.apply(this._gl, value);\n            }\n        });\n    }\n\n    _migrateFlags(t, s) {\n        t._nonDefaultFlags.forEach(setting => {\n            if (!s._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._enable(setting);\n                } else {\n                    this._gl._disable(setting);\n                }\n            }\n        });\n        s._nonDefaultFlags.forEach(setting => {\n            if (!t._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._disable(setting);\n                } else {\n                    this._gl._enable(setting);\n                }\n            }\n        });\n    }\n\n    static getDefaultSettings() {\n        if (!this._defaultSettings) {\n            this._defaultSettings = new Map();\n            const d = this._defaultSettings;\n            const g = WebGLRenderingContext.prototype;\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"blendColor\", [0, 0, 0, 0]);\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\n            d.set(\"clearColor\", [0, 0, 0, 0]);\n            d.set(\"clearDepth\", [1]);\n            d.set(\"clearStencil\", [0]);\n            d.set(\"colorMask\", [true, true, true, true]);\n            d.set(\"cullFace\", [g.BACK]);\n            d.set(\"depthFunc\", [g.LESS]);\n            d.set(\"depthMask\", [true]);\n            d.set(\"depthRange\", [0, 1]);\n            d.set(\"frontFace\", [g.CCW]);\n            d.set(\"lineWidth\", [1]);\n            d.set(\"polygonOffset\", [0, 0]);\n            d.set(\"sampleCoverage\", [1, false]);\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"stencilMask\", [1]);\n            d.set(\"_stencilMaskSeparateFront\", [1]);\n            d.set(\"_stencilMaskSeparateBack\", [1]);\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"vertexAttrib1f\", []);\n            d.set(\"vertexAttrib1fv\", []);\n            d.set(\"vertexAttrib2f\", []);\n            d.set(\"vertexAttrib2fv\", []);\n            d.set(\"vertexAttrib3f\", []);\n            d.set(\"vertexAttrib3fv\", []);\n            d.set(\"vertexAttrib4f\", []);\n            d.set(\"vertexAttrib4fv\", []);\n        }\n        return this._defaultSettings\n    }\n\n    static _getTextureTargetIndex(target) {\n        switch(target) {\n            case 0x0DE1:\n                /* TEXTURE_2D */\n                return 0;\n            case 0x8513:\n                /* TEXTURE_CUBE_MAP */\n                return 1;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown texture target: ' + target);\n        }\n    }\n\n    static _getTextureTargetByIndex(index) {\n        if (!this._textureTargetIndices) {\n            this._textureTargetIndices = [0x0DE1, 0x8513];\n        }\n        return this._textureTargetIndices[index]\n    }\n\n    static _getTextureIndex(index) {\n        return index - 0x84C0 /* GL_TEXTURE0 */;\n    }\n\n    static _getTextureByIndex(index) {\n        return index + 0x84C0;\n    }\n\n    static _getPixelStoreiIndex(pname) {\n        switch(pname) {\n            case 0x0D05:\n                /* PACK_ALIGNMENT */\n                return 0;\n            case 0x0CF5:\n                /* UNPACK_ALIGNMENT */\n                return 1;\n            case 0x9240:\n                /* UNPACK_FLIP_Y_WEBGL */\n                return 2;\n            case 0x9241:\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\n                return 3;\n            case 0x9243:\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\n                return 4;\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n            case 0x9245:\n                /* UNPACK_FLIP_BLUE_RED */\n                return 5;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown pixelstorei: ' + pname);\n        }\n    }\n\n    static _getPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiIndices) {\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\n        }\n        return this._pixelStoreiIndices[index]\n    }\n\n    static _getDefaultPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiDefaults) {\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\n        }\n        return this._pixelStoreiDefaults[index]\n    }\n}\n\nclass WebGLStateManager {\n\n    _initStateManager(id = \"default\") {\n        this._states = {};\n        this._state = this._getState(id);\n    }\n\n    _getState(id) {\n        if (!this._states[id]) {\n            this._states[id] = new WebGLState(id, this);\n        }\n        return this._states[id];\n    }\n\n    switchState(id = \"default\") {\n        if (this._state._id !== id) {\n            const newState = this._getState(id);\n            this._state.migrate(newState);\n            this._state = newState;\n        }\n    }\n\n    $useProgram(program) {\n        if (this._state.setProgram(program))\n            this._useProgram(program);\n    }\n\n    $bindBuffer(target, fb) {\n        if (this._state.setBuffer(target, fb))\n            this._bindBuffer(target, fb);\n    }\n\n    $bindFramebuffer(target, fb) {\n        if (this._state.setFramebuffer(target, fb))\n            this._bindFramebuffer(target, fb);\n    }\n\n    $bindRenderbuffer(target, fb) {\n        if (this._state.setRenderbuffer(target, fb))\n            this._bindRenderbuffer(target, fb);\n    }\n\n    $enable(cap) {\n        if (this._state.setFlag(cap, true))\n            this._enable(cap);\n    }\n\n    $disable(cap) {\n        if (this._state.setFlag(cap, false))\n            this._disable(cap);\n    }\n\n    $viewport(x, y, w, h) {\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\n            this._viewport(x, y, w, h);\n    }\n\n    $scissor(x, y, w, h) {\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\n            this._scissor(x, y, w, h);\n    }\n\n    $disableVertexAttribArray(index) {\n        if (this._state.disableVertexAttribArray(index))\n            this._disableVertexAttribArray(index);\n    }\n\n    $enableVertexAttribArray(index) {\n        if (this._state.enableVertexAttribArray(index))\n            this._enableVertexAttribArray(index);\n    }\n\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n\n    $activeTexture(texture) {\n        if (this._state.setActiveTexture(texture))\n            this._activeTexture(texture);\n    }\n\n    $bindTexture(target, texture) {\n        if (this._state.bindTexture(target, texture))\n            this._bindTexture(target, texture);\n    }\n\n    $pixelStorei(pname, param) {\n        if (this._state.setPixelStorei(pname, param)) {\n            this._pixelStorei(pname, param);\n        }\n    }\n\n    $stencilFuncSeparate(face, func, ref, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilFuncSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilFuncSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilFuncSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [func, ref, mask]))\n            f.apply(this, [func, ref, mask]);\n    }\n\n    _stencilFuncSeparateFront(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\n    }\n\n    _stencilFuncSeparateBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\n    }\n\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\n    }\n\n    $stencilMaskSeparate(face, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilMaskSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilMaskSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilMaskSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [mask]))\n            f.apply(this, [mask]);\n    }\n\n    _stencilMaskSeparateFront(mask) {\n        this._stencilMaskSeparate(this.FRONT, mask);\n    }\n\n    _stencilMaskSeparateBack(mask) {\n        this._stencilMaskSeparate(this.BACK, mask);\n    }\n\n    _stencilMaskSeparateFrontAndBack(mask) {\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\n    }\n\n    $stencilOpSeparate(face, fail, zfail, zpass) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilOpSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilOpSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilOpSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\n            f.apply(this, [fail, zfail, zpass]);\n    }\n\n    _stencilOpSeparateFront(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\n    }\n\n    $blendColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\n            this._blendColor(red, green, blue, alpha);\n    }\n\n    $blendEquation(mode) {\n        if (this._state.setSetting(this._blendEquation, [mode]))\n            this._blendEquation(mode);\n    }\n\n    $blendEquationSeparate(modeRGB, modeAlpha) {\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\n            this._blendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    $blendFunc(sfactor, dfactor) {\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\n            this._blendFunc(sfactor, dfactor);\n    }\n\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n    }\n\n    $clearColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\n            this._clearColor(red, green, blue, alpha);\n    }\n\n    $clearDepth(depth) {\n        if (this._state.setSetting(this._clearDepth, [depth]))\n            this._clearDepth(depth);\n    }\n\n    $clearStencil(s) {\n        if (this._state.setSetting(this._clearStencil, [s]))\n            this._clearStencil(s);\n    }\n\n    $colorMask(red, green, blue, alpha) {\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\n            this._colorMask(red, green, blue, alpha);\n    }\n\n    $cullFace(mode) {\n        if (this._state.setSetting(this._cullFace, [mode]))\n            this._cullFace(mode);\n    }\n\n    $depthFunc(func) {\n        if (this._state.setSetting(this._depthFunc, [func]))\n            this._depthFunc(func);\n    }\n\n    $depthMask(flag) {\n        if (this._state.setSetting(this._depthMask, [flag]))\n            this._depthMask(flag);\n    }\n\n    $depthRange(zNear, zFar) {\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\n            this._depthRange(zNear, zFar);\n    }\n\n    $frontFace(mode) {\n        if (this._state.setSetting(this._frontFace, [mode]))\n            this._frontFace(mode);\n    }\n\n    $lineWidth(width) {\n        if (this._state.setSetting(this._lineWidth, [width]))\n            this._lineWidth(width);\n    }\n\n    $polygonOffset(factor, units) {\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\n            this._polygonOffset(factor, units);\n    }\n\n    $sampleCoverage(value, invert) {\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\n            this._sampleCoverage(value, invert);\n    }\n\n    $stencilFunc(func, ref, mask) {\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\n            this._stencilFunc(func, ref, mask);\n    }\n\n    $stencilMask(mask) {\n        if (this._state.setSetting(this._stencilMask, [mask]))\n            this._stencilMask(mask);\n    }\n\n    $stencilOp(fail, zfail, zpass) {\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\n            this._stencilOp(fail, zfail, zpass);\n    }\n\n    $vertexAttrib1f(indx, x) {\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\n            this._vertexAttrib1f(indx, x);\n    }\n\n    $vertexAttrib1fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\n            this._vertexAttrib1fv(indx, values);\n    }\n\n    $vertexAttrib2f(indx, x, y) {\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\n            this._vertexAttrib2f(indx, x, y);\n    }\n\n    $vertexAttrib2fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\n            this._vertexAttrib2fv(indx, values);\n    }\n\n    $vertexAttrib3f(indx, x, y, z) {\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\n            this._vertexAttrib3f(indx, x, y, z);\n    }\n\n    $vertexAttrib3fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\n            this._vertexAttrib3fv(indx, values);\n    }\n\n    $vertexAttrib4f(indx, x, y, z, w) {\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\n            this._vertexAttrib4f(indx, x, y, z, w);\n    }\n\n    $vertexAttrib4fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\n            this._vertexAttrib4fv(indx, values);\n    }\n\n    /**\n     * Sets up the rendering context for context sharing.\n     * @param {WebGLRenderingContext} gl\n     * @param {string} id\n     */\n    static enable(gl, id = \"default\") {\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\n        const WebGLRenderingContextProto = gl.__proto__;\n        names.forEach(name => {\n            if (name !== \"constructor\") {\n                const method = WebGLStateManager.prototype[name];\n                if (name.charAt(0) === \"$\") {\n                    name = name.substr(1);\n                }\n                if (gl[name] !== method) {\n                    if (gl[name]) {\n                        if (!gl[name].name) {\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\n                            gl[name].xname = name;\n                        }\n                        gl['_' + name] = gl[name];\n                    }\n                    gl[name] = method;\n                }\n            }\n        });\n\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\n\n        return gl;\n    }\n\n}\n\nexport default WebGLStateManager;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from \"./TextureSource.mjs\";\nimport Stage from './Stage.mjs';\n\nexport default class TextureManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        /**\n         * The currently used amount of texture memory.\n         * @type {number}\n         */\n        this._usedMemory = 0;\n\n        /**\n         * All uploaded texture sources.\n         * @type {TextureSource[]}\n         */\n        this._uploadedTextureSources = [];\n\n        /**\n         * The texture source lookup id to texture source hashmap.\n         * @type {Map<String, TextureSource>}\n         */\n        this.textureSourceHashmap = new Map();\n\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\n        }\n        \n        this.textureSourceHashmap.clear();\n        this._usedMemory = 0;\n    }\n\n    getReusableTextureSource(id) {\n        return this.textureSourceHashmap.get(id);\n    }\n\n    getTextureSource(func, id) {\n        // Check if texture source is already known.\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\n        if (!textureSource) {\n            // Create new texture source.\n            textureSource = new TextureSource(this, func);\n\n            if (id) {\n                textureSource.lookupId = id;\n                this.textureSourceHashmap.set(id, textureSource);\n            }\n        }\n\n        return textureSource;\n    }\n\n    uploadTextureSource(textureSource, options) {\n        if (textureSource.isLoaded()) return;\n\n        this._addMemoryUsage(textureSource.w * textureSource.h);\n\n        // Load texture.\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\n\n        textureSource._nativeTexture = nativeTexture;\n\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\n        nativeTexture.w = textureSource.w;\n        nativeTexture.h = textureSource.h;\n\n        nativeTexture.update = this.stage.frameCounter;\n\n        this._uploadedTextureSources.push(textureSource);\n        \n        this.addToLookupMap(textureSource);\n\n        // add VRAM tracking if using the webgl renderer\n        this._updateVramUsage(textureSource, 1);\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    _updateVramUsage(textureSource, sign) {\n        const nativeTexture = textureSource.nativeTexture;\n        var usage;\n\n        // do nothing if webgl isn't even supported\n        if (!Stage.isWebglSupported())\n            return;\n\n        // or if there is no native texture\n        if (!textureSource.isLoaded())\n            return;\n\n        // or, finally, if there is no bytes per pixel specified\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\n            return;\n\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\n\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\n    }\n\n    addToLookupMap(textureSource) {\n        const lookupId = textureSource.lookupId;\n        if (lookupId) {\n            if (!this.textureSourceHashmap.has(lookupId)) {\n                this.textureSourceHashmap.set(lookupId, textureSource);\n            }\n        }\n    }\n\n    gc() {\n        this.freeUnusedTextureSources();\n        this._cleanupLookupMap();\n    }\n    \n    freeUnusedTextureSources() {\n        let remainingTextureSources = [];\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            let ts = this._uploadedTextureSources[i];\n            if (ts.allowCleanup()) {\n                this._freeManagedTextureSource(ts);\n            } else {\n                remainingTextureSources.push(ts);\n            }\n        }\n\n        this._uploadedTextureSources = remainingTextureSources;\n\n        this._cleanupLookupMap();\n    }\n\n    _freeManagedTextureSource(textureSource) {\n        if (textureSource.isLoaded()) {\n            this._nativeFreeTextureSource(textureSource);\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\n\n            // add VRAM tracking if using the webgl renderer\n            this._updateVramUsage(textureSource, -1);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _cleanupLookupMap() {\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\n                this.textureSourceHashmap.delete(lookupId);\n            }\n        });\n    }\n\n    /**\n     * Externally free texture source.\n     * @param textureSource\n     */\n    freeTextureSource(textureSource) {\n        const index = this._uploadedTextureSources.indexOf(textureSource);\n        const managed = (index !== -1);\n\n        if (textureSource.isLoaded()) {\n            if (managed) {\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\n                this._uploadedTextureSources.splice(index, 1);\n            }\n            this._nativeFreeTextureSource(textureSource);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _nativeUploadTextureSource(textureSource, options) {\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\n    }\n\n    _nativeFreeTextureSource(textureSource) {\n        this.stage.renderer.freeTextureSource(textureSource);\n        textureSource.clearNativeTexture();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows throttling of loading texture sources, keeping the app responsive.\n */\nexport default class TextureThrottler {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.genericCancelCb = (textureSource) => {\n            this._remove(textureSource);\n        };\n\n        this._sources = [];\n        this._data = [];\n    }\n\n    destroy() {\n        this._sources = [];\n        this._data = [];\n        this.stage = null;\n\n        delete this._sources;\n        delete this._data;\n        delete this.stage;\n    }\n\n    processSome() {\n        if (this._sources.length) {\n            const start = Date.now();\n            do {\n                this._processItem();\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\n        }\n    }\n\n    _processItem() {\n        const source = this._sources.pop();\n        const data = this._data.pop();\n        if (source.isLoading()) {\n            source.processLoadedSource(data);\n        }\n    }\n\n    add(textureSource, data) {\n        this._sources.push(textureSource);\n        this._data.push(data);\n    }\n\n    _remove(textureSource) {\n        const index = this._sources.indexOf(textureSource);\n        if (index >= 0) {\n            this._sources.splice(index, 1);\n            this._data.splice(index, 1);\n        }\n    }\n\n}\n\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreContext {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.root = null;\n\n        this.updateTreeOrder = 0;\n\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\n\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\n        this.renderExec.init();\n\n        this._usedMemory = 0;\n        this._renderTexturePool = [];\n\n        this._renderTextureId = 1;\n\n        this._zSorts = [];\n\n        this.renderToTextureCount = 0;\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\n        this._usedMemory = 0;\n\n        this.stage = null;\n        this.root = null;\n\n        this.renderState = null;\n        this.renderExec = null;\n        this._renderTexturePool = null;\n        this._zSorts = null;\n\n        delete this.stage;\n        delete this.root;\n        delete this.renderState;\n        delete this.renderExec;\n        delete this._renderTexturePool;\n        delete this._zSorts;\n    }\n\n    hasRenderUpdates() {\n        return !!this.root._parent._hasRenderUpdates;\n    }\n\n    render() {\n        // Clear flag to identify if anything changes before the next frame.\n        this.root._parent._hasRenderUpdates = 0;\n\n        this._render();\n    }\n\n    update() {\n        this._update();\n\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\n        // (but not recursively to prevent infinite loops).\n        if (this.root._hasUpdates) {\n            this._update();\n        }\n\n        this._performForcedZSorts();\n    }\n\n    /**\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\n     */\n    _performForcedZSorts() {\n        const n = this._zSorts.length;\n        if (n) {\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\n                if (this._zSorts[i].zSort) {\n                    this._zSorts[i].sortZIndexedChildren();\n                }\n            }\n            this._zSorts = [];\n        }\n    }\n\n    _update() {\n        this.updateTreeOrder = 0;\n\n        this.root.update();\n    }\n\n    _render() {\n        const debugFrame = this.stage.getOption('debugFrame');\n        // Obtain a sequence of the quad operations.\n        this._fillRenderState();\n\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\n            this._readPixels();\n        }\n\n        // Now run them with the render executor.\n        this._performRender();\n\n        if (debugFrame) {\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\n        }\n\n        // Block OpenGL pipeline to prevent framebuffer flickering\n        // on certain devices\n        if (this.stage.getOption('readPixelsAfterDraw') &&\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\n        ) {\n            if (debugFrame) {\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\n            }\n            this._readPixels();\n        }\n\n        this.renderToTextureCount = 0;\n    }\n\n    _readPixels() {\n        const pixels = new Uint8Array(4);\n        const gl = this.stage.gl;\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n\n    _fillRenderState() {\n        this.renderState.reset();\n        this.root.render();\n        this.renderState.finish();\n    }\n\n    _performRender() {\n        this.renderExec.execute();\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    allocateRenderTexture(w, h) {\n        let prec = this.stage.getRenderPrecision();\n        let pw = Math.max(1, Math.round(w * prec));\n        let ph = Math.max(1, Math.round(h * prec));\n\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\n        const n = this._renderTexturePool.length;\n        for (let i = n - 1; i >= 0; i--) {\n            const texture = this._renderTexturePool[i];\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\n                texture.f = this.stage.frameCounter;\n                this._renderTexturePool.splice(i, 1);\n                return texture;\n            }\n        }\n\n        const texture = this._createRenderTexture(w, h, pw, ph);\n        texture.precision = prec;\n        return texture;\n    }\n\n    releaseRenderTexture(texture) {\n        this._renderTexturePool.push(texture);\n    }\n\n    freeUnusedRenderTextures(maxAge = 60) {\n        // Clean up all textures that are no longer used.\n        // This cache is short-lived because it is really just meant to supply running shaders that are\n        // updated during a number of frames.\n        let limit = this.stage.frameCounter - maxAge;\n\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\n            if (texture.f <= limit) {\n                this._freeRenderTexture(texture);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    _createRenderTexture(w, h, pw, ph) {\n        this._addMemoryUsage(pw * ph);\n\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\n        texture.id = this._renderTextureId++;\n        texture.f = this.stage.frameCounter;\n        texture.ow = w;\n        texture.oh = h;\n        texture.w = pw;\n        texture.h = ph;\n\n        return texture;\n    }\n\n    _freeRenderTexture(nativeTexture) {\n        this.stage.renderer.freeRenderTexture(nativeTexture);\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\n    }\n\n    forceZSort(elementCore) {\n        this._zSorts.push(elementCore);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class TransitionSettings {\n    constructor(stage) {\n        this.stage = stage;\n        this._timingFunction = 'ease';\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\n        this.delay = 0;\n        this.duration = 0.2;\n        this.merger = null;\n    }\n\n    get timingFunction() {\n        return this._timingFunction;\n    }\n\n    set timingFunction(v) {\n        this._timingFunction = v;\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get timingFunctionImpl() {\n        return this._timingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n}\n\nTransitionSettings.prototype.isTransitionSettings = true;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TransitionManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All transitions that are running and attached.\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\n         * @type {Set<Transition>}\n         */\n        this.active = new Set();\n\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                a.progress(dt);\n                if (!a.isRunning()) {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\n            }\n        }\n    }\n\n    createSettings(settings) {\n        const transitionSettings = new TransitionSettings();\n        Base.patchObject(transitionSettings, settings);\n        return transitionSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n\n    removeActive(transition) {\n        this.active.delete(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport TransitionSettings from \"./TransitionSettings.mjs\";\nimport Transition from \"./Transition.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class MultiSpline {\n\n    constructor() {\n        this._clear();\n    }\n\n    _clear() {\n        this._p = [];\n        this._pe = [];\n        this._idp = [];\n        this._f = [];\n        this._v = [];\n        this._lv = [];\n        this._sm = [];\n        this._s = [];\n        this._ve = [];\n        this._sme = [];\n        this._se = [];\n\n        this._length = 0;\n    }\n\n    parse(rgba, def) {\n        let i, n;\n        if (!Utils.isObjectLiteral(def)) {\n            def = {0: def}\n        }\n\n        let defaultSmoothness = 0.5;\n\n        let items = [];\n        for (let key in def) {\n            if (def.hasOwnProperty(key)) {\n                let obj = def[key];\n                if (!Utils.isObjectLiteral(obj)) {\n                    obj = {v: obj}\n                }\n\n                let p = parseFloat(key);\n\n                if (key === \"sm\") {\n                    defaultSmoothness = obj.v;\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\n                    obj.p = p;\n\n                    obj.f = Utils.isFunction(obj.v);\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\n\n                    items.push(obj);\n                }\n            }\n        }\n\n        // Sort by progress value.\n        items = items.sort(function(a, b) {return a.p - b.p});\n\n        n = items.length;\n\n        for (i = 0; i < n; i++) {\n            let last = (i === n - 1);\n            if (!items[i].hasOwnProperty('pe')) {\n                // Progress.\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\n            } else {\n                // Prevent multiple items at the same time.\n                const max = i < n - 1 ? items[i + 1].p : 1;\n                if (items[i].pe > max) {\n                    items[i].pe = max;\n                }\n            }\n            if (items[i].pe === items[i].p) {\n                items[i].idp = 0;\n            } else {\n                items[i].idp = 1 / (items[i].pe - items[i].p);\n            }\n        }\n\n        // Color merger: we need to split/combine RGBA components.\n\n        // Calculate bezier helper values.;\n        for (i = 0; i < n; i++) {\n            if (!items[i].hasOwnProperty('sm')) {\n                // Smoothness.;\n                items[i].sm = defaultSmoothness;\n            }\n            if (!items[i].hasOwnProperty('s')) {\n                // Slope.;\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\n                    // Horizontal slope at start and end.;\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                } else {\n                    const pi = items[i - 1];\n                    const ni = items[i + 1];\n                    if (pi.p === ni.p) {\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                    } else {\n                        if (rgba) {\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\n                            const d = 1 / (ni.p - pi.p);\n                            items[i].s = [\n                                d * (nc[0] - pc[0]),\n                                d * (nc[1] - pc[1]),\n                                d * (nc[2] - pc[2]),\n                                d * (nc[3] - pc[3])\n                            ];\n                        } else {\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < n - 1; i++) {\n            // Calculate value function.;\n            if (!items[i].f) {\n\n                let last = (i === n - 1);\n                if (!items[i].hasOwnProperty('ve')) {\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\n                }\n\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\n                    if (!items[i].hasOwnProperty('sme')) {\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\n                    }\n                    if (!items[i].hasOwnProperty('se')) {\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\n                    }\n\n                    // Generate spline.;\n                    if (rgba) {\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    } else {\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    }\n\n                    items[i].f = true;\n                }\n            }\n        }\n\n        if (this.length) {\n            this._clear();\n        }\n\n        for (i = 0, n = items.length; i < n; i++) {\n            this._add(items[i]);\n        }\n    }\n\n    _add(item) {\n        this._p.push(item.p || 0);\n        this._pe.push(item.pe || 0);\n        this._idp.push(item.idp || 0);\n        this._f.push(item.f || false);\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\n        this._lv.push(item.lv || 0);\n        this._sm.push(item.sm || 0);\n        this._s.push(item.s || 0);\n        this._ve.push(item.ve || 0);\n        this._sme.push(item.sme || 0);\n        this._se.push(item.se || 0);\n        this._length++;\n    }\n\n    _getItem(p) {\n        const n = this._length;\n        if (!n) {\n            return -1;\n        }\n\n        if (p < this._p[0]) {\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (this._p[i] <= p && p < this._pe[i]) {\n                return i;\n            }\n        }\n\n        return n - 1;\n    }\n\n    getValue(p) {\n        const i = this._getItem(p);\n        if (i === -1) {\n            return undefined;\n        } else {\n            if (this._f[i]) {\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\n                return this._v[i](o);\n            } else {\n                return this._v[i];\n            }\n        }\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1 *= dp;\n        s2 *= dp;\n\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\n        if (!helpers) {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return v2 * p + v1 * (1 - p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n                return MultiSpline.calculateSpline(helpers, p);\n            };\n        }\n    };\n\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1[0] *= dp;\n        s1[1] *= dp;\n        s1[2] *= dp;\n        s1[3] *= dp;\n        s2[0] *= dp;\n        s2[1] *= dp;\n        s2[2] *= dp;\n        s2[3] *= dp;\n\n        let cv1 = MultiSpline.getRgbaComponents(v1);\n        let cv2 = MultiSpline.getRgbaComponents(v2);\n\n        let helpers = [\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\n        ];\n\n        if (!helpers[0]) {\n            return function (p) {\n                // Linear.\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.mergeColors(v2, v1, p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.getArgbNumber([\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\n                ]);\n            };\n        }\n\n    };\n\n    /**\n     * Creates helpers to be used in the spline function.\n     * @param {number} v1\n     *   From value.\n     * @param {number} v2\n     *   To value.\n     * @param {number} o1\n     *   From smoothness (0 = linear, 1 = smooth).\n     * @param {number} s1\n     *   From slope (0 = horizontal, infinite = vertical).\n     * @param {number} i2\n     *   To smoothness.\n     * @param {number} s2\n     *   To slope.\n     * @returns {Number[]}\n     *   The helper values to be supplied to the spline function.\n     *   If the configuration is actually linear, null is returned.\n     */\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\n        if (!o1 && !i2) {\n            // Linear.\n            return null;\n        }\n\n        // Cubic bezier points.\n        // http://cubic-bezier.com/\n        let csx = o1;\n        let csy = v1 + s1 * o1;\n        let cex = 1 - i2;\n        let cey = v2 - s2 * i2;\n\n        let xa = 3 * csx - 3 * cex + 1;\n        let xb = -6 * csx + 3 * cex;\n        let xc = 3 * csx;\n\n        let ya = 3 * csy - 3 * cey + v2 - v1;\n        let yb = 3 * (cey + v1) - 6 * csy;\n        let yc = 3 * (csy - v1);\n        let yd = v1;\n\n        return [xa, xb, xc, ya, yb, yc, yd];\n    };\n\n    /**\n     * Calculates the intermediate spline value based on the specified helpers.\n     * @param {number[]} helpers\n     *   Obtained from getSplineHelpers.\n     * @param {number} p\n     * @return {number}\n     */\n    static calculateSpline(helpers, p) {\n        let xa = helpers[0];\n        let xb = helpers[1];\n        let xc = helpers[2];\n        let ya = helpers[3];\n        let yb = helpers[4];\n        let yc = helpers[5];\n        let yd = helpers[6];\n\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\n            // Linear.\n            return p;\n        }\n\n        // Find t for p.\n        let t = 0.5, cbx, dx;\n\n        for (let it = 0; it < 20; it++) {\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n\n            t += dx / cbxd;\n        }\n\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            if (dx < 0) {\n                maxT = t;\n            } else {\n                minT = t;\n            }\n        }\n\n        return t;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationActionSettings {\n\n    constructor(animationSettings) {\n\n        this.animationSettings = animationSettings;\n\n        /**\n         * The selector that selects the elements.\n         * @type {string}\n         */\n        this._selector = \"\";\n\n        /**\n         * The value items, ordered by progress offset.\n         * @type {MultiSpline}\n         * @private;\n         */\n        this._items = new MultiSpline();\n\n        /**\n         * The affected properties (paths).\n         * @private;\n         */\n        this._props = [];\n\n        /**\n         * Property setters, indexed according to props.\n         * @private;\n         */\n        this._propSetters = [];\n\n        this._resetValue = undefined;\n        this._hasResetValue = false;\n\n        this._hasColorProperty = undefined;\n    }\n\n    getResetValue() {\n        if (this._hasResetValue) {\n            return this._resetValue;\n        } else {\n            return this._items.getValue(0);\n        }\n    }\n\n    apply(element, p, factor) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this._items.getValue(p);\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        if (factor !== 1) {\n            // Stop factor.;\n            let sv = this.getResetValue();\n\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\n                if (this.hasColorProperty()) {\n                    v = StageUtils.mergeColors(v, sv, factor);\n                } else {\n                    v = StageUtils.mergeNumbers(v, sv, factor);\n                }\n            }\n        }\n\n        // Apply transformation to all components.;\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    getAnimatedElements(element) {\n        return element.select(this._selector);\n    }\n\n    reset(element) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this.getResetValue();\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        // Apply transformation to all components.\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    set selector(v) {\n        this._selector = v;\n    }\n\n    set t(v) {\n        this.selector = v;\n    }\n\n    get resetValue() {\n        return this._resetValue;\n    }\n    \n    set resetValue(v) {\n        this._resetValue = v;\n        this._hasResetValue = (v !== undefined);\n    }\n\n    set rv(v) {\n        this.resetValue = v;\n    }\n\n    set value(v) {\n        this._items.parse(this.hasColorProperty(), v);\n    }\n\n    set v(v) {\n        this.value = v;\n    }\n\n    set properties(v) {\n        if (!Array.isArray(v)) {\n            v = [v];\n        }\n\n        this._props = [];\n\n        v.forEach((prop) => {\n            this._props.push(prop);\n            this._propSetters.push(Element.getSetter(prop));\n        });\n    }\n\n    set property(v) {\n        this._hasColorProperty = undefined;\n        this.properties = v;\n    }\n\n    set p(v) {\n        this.properties = v;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    hasColorProperty() {\n        if (this._hasColorProperty === undefined) {\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\n        }\n        return this._hasColorProperty;\n    }\n}\n\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\n\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\nimport Element from \"../tree/Element.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class AnimationSettings {\n    constructor() {\n        /**\n         * @type {AnimationActionSettings[]}\n         */\n        this._actions = [];\n\n        this.delay = 0;\n        this.duration = 1;\n\n        this.repeat = 0;\n        this.repeatOffset = 0;\n        this.repeatDelay = 0;\n\n        this.autostop = false;\n\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\n        this._stopTimingFunction = 'ease';\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\n        this.stopDuration = 0;\n        this.stopDelay = 0;\n    }\n\n    get actions() {\n        return this._actions;\n    }\n\n    set actions(v) {\n        this._actions = [];\n        for (let i = 0, n = v.length; i < n; i++) {\n            const e = v[i];\n            if (!e.isAnimationActionSettings) {\n                const aas = new AnimationActionSettings(this);\n                aas.patch(e);\n                this._actions.push(aas);\n            } else {\n                this._actions.push(e);\n            }\n        }\n    }\n\n    /**\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\n     * @param {Element} element;\n     * @param {number} p;\n     * @param {number} factor;\n     */\n    apply(element, p, factor = 1) {\n        this._actions.forEach(function(action) {\n            action.apply(element, p, factor);\n        });\n    }\n\n    /**\n     * Resets the animation to the reset values.\n     * @param {Element} element;\n     */\n    reset(element) {\n        this._actions.forEach(function(action) {\n            action.reset(element);\n        });\n    }\n\n    get stopTimingFunction() {\n        return this._stopTimingFunction;\n    }\n\n    set stopTimingFunction(v) {\n        this._stopTimingFunction = v;\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get stopTimingFunctionImpl() {\n        return this._stopTimingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nAnimationSettings.STOP_METHODS = {\n    FADE: 'fade',\n    REVERSE: 'reverse',\n    FORWARD: 'forward',\n    IMMEDIATE: 'immediate',\n    ONETOTWO: 'onetotwo'\n};\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\n\nexport default class Animation extends EventEmitter {\n\n    constructor(manager, settings, element) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._state = Animation.STATES.IDLE;\n\n        this._p = 0;\n        this._delayLeft = 0;\n        this._repeatsLeft = 0;\n\n        this._stopDelayLeft = 0;\n        this._stopP = 0;\n    }\n\n    start() {\n        if (this._element && this._element.attached) {\n            this._p = 0;\n            this._delayLeft = this.settings.delay;\n            this._repeatsLeft = this.settings.repeat;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('start');\n            this.checkActive();\n        } else {\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\n        }\n    }\n\n    play() {\n        if (this._state === Animation.STATES.PAUSED) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.checkActive();\n            this.emit('resume');\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('stopContinue');\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\n            // Restart.;\n            this.start();\n        }\n    }\n\n    pause() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._state = Animation.STATES.PAUSED;\n            this.emit('pause');\n        }\n    }\n\n    replay() {\n        if (this._state == Animation.STATES.FINISHED) {\n            this.start();\n        } else {\n            this.play();\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n        this._stopDelayLeft = 0;\n    }\n\n    finish() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._delayLeft = 0;\n            this._p = 1;\n        } else if (this._state === Animation.STATES.STOPPING) {\n            this._stopDelayLeft = 0;\n            this._p = 0;\n        }\n    }\n\n    stop() {\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\n\n        this._stopDelayLeft = this.settings.stopDelay || 0;\n\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\n            // Stop upon next progress.;\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        } else {\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                this._stopP = 0;\n            }\n\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        }\n\n        this.checkActive();\n    }\n\n    stopNow() {\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\n            this._state = Animation.STATES.STOPPING;\n            this._p = 0;\n            this.emit('stop');\n            this.reset();\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        }\n    }\n\n    isPaused() {\n        return this._state === Animation.STATES.PAUSED;\n    }\n\n    isPlaying() {\n        return this._state === Animation.STATES.PLAYING;\n    }\n\n    isStopping() {\n        return this._state === Animation.STATES.STOPPING;\n    }\n\n    isFinished() {\n        return this._state === Animation.STATES.FINISHED;\n    }\n\n    checkActive() {\n        if (this.isActive()) {\n            this.manager.addActive(this);\n        }\n    }\n\n    isActive() {\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\n    }\n\n    progress(dt) {\n        if (!this._element) return;\n        this._progress(dt);\n        this.apply();\n    }\n\n    _progress(dt) {\n        if (this._state == Animation.STATES.STOPPING) {\n            this._stopProgress(dt);\n            return;\n        }\n\n        if (this._state != Animation.STATES.PLAYING) {\n            return;\n        }\n\n        if (this._delayLeft > 0) {\n            this._delayLeft -= dt;\n\n            if (this._delayLeft < 0) {\n                dt = -this._delayLeft;\n                this._delayLeft = 0;\n\n                this.emit('delayEnd');\n            } else {\n                return;\n            }\n        }\n\n        if (this.settings.duration === 0) {\n            this._p = 1;\n        } else if (this.settings.duration > 0) {\n            this._p += dt / this.settings.duration;\n        }\n        if (this._p >= 1) {\n            // Finished!;\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\n                if (this._repeatsLeft > 0) {\n                    this._repeatsLeft--;\n                }\n                this._p = this.settings.repeatOffset;\n                this.emit('progress', this._p);\n                \n                if (this.settings.repeatDelay) {\n                    this._delayLeft = this.settings.repeatDelay;\n                }\n\n                this.emit('repeat', this._repeatsLeft);\n            } else {\n                this._p = 1;\n                this.emit('progress', this._p);\n                \n                this._state = Animation.STATES.FINISHED;\n                this.emit('finish');\n                if (this.settings.autostop) {\n                    this.stop();\n                }\n            }\n        } else {\n            this.emit('progress', this._p);\n        }\n    }\n    \n    _stopProgress(dt) {\n        let duration = this._getStopDuration();\n\n        if (this._stopDelayLeft > 0) {\n            this._stopDelayLeft -= dt;\n\n            if (this._stopDelayLeft < 0) {\n                dt = -this._stopDelayLeft;\n                this._stopDelayLeft = 0;\n\n                this.emit('stopDelayEnd');\n            } else {\n                return;\n            }\n        }\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            if (duration === 0) {\n                this._p = 0;\n            } else if (duration > 0) {\n                this._p -= dt / duration;\n            }\n\n            if (this._p <= 0) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\n            this._progressStopTransition(dt);\n            if (this._stopP >= 1) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\n            if (this._p < 2) {\n                if (duration === 0) {\n                    this._p = 2;\n                } else if (duration > 0) {\n                    if (this._p < 1) {\n                        this._p += dt / this.settings.duration;\n                    } else {\n                        this._p += dt / duration;\n                    }\n                }\n                if (this._p >= 2) {\n                    this._p = 2;\n                    this._state = Animation.STATES.STOPPED;\n                    this.emit('stopFinish');\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n            if (this._p < 1) {\n                if (this.settings.duration == 0) {\n                    this._p = 1;\n                } else {\n                    this._p += dt / this.settings.duration;\n                }\n                if (this._p >= 1) {\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n                        this._p = 1;\n                        this._state = Animation.STATES.STOPPED;\n                        this.emit('stopFinish');\n                    } else {\n                        if (this._repeatsLeft > 0) {\n                            this._repeatsLeft--;\n                            this._p = 0;\n                            this.emit('repeat', this._repeatsLeft);\n                        } else {\n                            this._p = 1;\n                            this._state = Animation.STATES.STOPPED;\n                            this.emit('stopFinish');\n                        }\n                    }\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        }\n        \n    }\n    \n    _progressStopTransition(dt) {\n        if (this._stopP < 1) {\n            if (this._stopDelayLeft > 0) {\n                this._stopDelayLeft -= dt;\n\n                if (this._stopDelayLeft < 0) {\n                    dt = -this._stopDelayLeft;\n                    this._stopDelayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n            \n            const duration = this._getStopDuration();\n\n            if (duration == 0) {\n                this._stopP = 1;\n            } else {\n                this._stopP += dt / duration;\n            }\n            if (this._stopP >= 1) {\n                // Finished!;\n                this._stopP = 1;\n            }\n        }\n    }\n\n    _getStopDuration() {\n        return this.settings.stopDuration || this.settings.duration;\n    }\n\n    apply() {\n        if (this._state === Animation.STATES.STOPPED) {\n            this.reset();\n        } else {\n            let factor = 1;\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\n            }\n            this._settings.apply(this._element, this._p, factor);\n        }\n    }\n\n    reset() {\n        this._settings.reset(this._element);\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get frame() {\n        return Math.round(this._p * this._settings.duration * 60);\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n}\n\nAnimation.STATES = {\n    IDLE: 0,\n    PLAYING: 1,\n    STOPPING: 2,\n    STOPPED: 3,\n    FINISHED: 4,\n    PAUSED: 5\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All running animations on attached subjects.\n         * @type {Set<Animation>}\n         */\n        this.active = new Set();\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                if (a.isActive()) {\n                    a.progress(dt);\n                } else {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => t.isActive()));\n            }\n        }\n    }\n\n    createAnimation(element, settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            // Convert plain object to proper settings object.\n            settings = this.createSettings(settings);\n        }\n\n        return new Animation(\n            this,\n            settings,\n            element\n        );\n    }\n\n    createSettings(settings) {\n        const animationSettings = new AnimationSettings();\n        Base.patchObject(animationSettings, settings);\n        return animationSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\nimport Animation from \"./Animation.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class RectangleTexture extends Texture {\n\n    _getLookupId() {\n        return '__whitepix';\n    }\n\n    _getSourceLoader() {\n        return function(cb) {\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\n        }\n    }\n\n    isAutosizeTexture() {\n        return false;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Application render tree.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Utils from \"./Utils.mjs\";\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Stage extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n        this._setOptions(options);\n\n        this._usedMemory = 0;\n        this._lastGcFrame = 0;\n\n        // attempt to track VRAM usage more accurately by accounting for different color channels\n        this._usedVramAlpha = 0;\n        this._usedVramNonAlpha = 0;\n\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\n        this.platform = new platformType();\n\n        if (this.platform.init) {\n            this.platform.init(this);\n        }\n\n        this.gl = null;\n        this.c2d = null;\n\n        const context = this.getOption('context');\n        if (context) {\n            if (context.useProgram) {\n                this.gl = context;\n            } else {\n                this.c2d = context;\n            }\n        } else {\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\n            } else {\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\n            }\n        }\n\n        if (this.gl) {\n            // Wrap in WebGLStateManager.\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\n            // Context switching is necessary when reusing the same context for Three.js.\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\n            //  when manually passing over a canvas or context in the options.\n            WebGLStateManager.enable(this.gl, \"lightning\")\n        }\n\n        this._mode = this.gl ? 0 : 1;\n\n        // Override width and height.\n        if (this.getCanvas()) {\n            if (this.getOption('devicePixelRatio') !== 1) {\n                const ratio = this.getOption('devicePixelRatio');\n                // set correct display sie\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\n            }\n\n            // set display buffer size\n            this._options.w = this.getCanvas().width;\n            this._options.h = this.getCanvas().height;\n        }\n\n        if (this._mode === 0) {\n            if (Utils.isSpark) {\n                this._renderer = new SparkRenderer(this);\n            } else {\n                this._renderer = new WebGLRenderer(this);\n            }\n        } else {\n            this._renderer = new C2dRenderer(this);\n        }\n\n        this.setClearColor(this.getOption('clearColor'));\n\n        this.frameCounter = 0;\n\n        this.transitions = new TransitionManager(this);\n        this.animations = new AnimationManager(this);\n\n        this.textureManager = new TextureManager(this);\n        this.textureThrottler = new TextureThrottler(this);\n\n        this.startTime = 0;\n        this.currentTime = 0;\n        this.dt = 0;\n\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\n        this.rectangleTexture = new RectangleTexture(this);\n        this.rectangleTexture.load();\n\n        // Never clean up because we use it all the time.\n        this.rectangleTexture.source.permanent = true;\n\n        this.ctx = new CoreContext(this);\n\n        this._updateSourceTextures = new Set();\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    static isWebglSupported() {\n        if (Utils.isNode) {\n            return true;\n        }\n\n        try {\n            return !!window.WebGLRenderingContext;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns the rendering mode.\n     * @returns {number}\n     *  0: WebGL\n     *  1: Canvas2d\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    isWebgl() {\n        return this.mode === 0;\n    }\n\n    isC2d() {\n        return this.mode === 1;\n    }\n\n    getOption(name) {\n        return this._options[name];\n    }\n\n    _setOptions(o) {\n        this._options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this._options[name] = def;\n            } else {\n                this._options[name] = value;\n            }\n        }\n\n        opt('canvas', null);\n        opt('context', null);\n        opt('w', 1920);\n        opt('h', 1080);\n        opt('srcBasePath', null);\n        opt('memoryPressure', 24e6);\n        opt('bufferMemory', 2e6);\n        opt('textRenderIssueMargin', 0);\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\n        opt('clearColor', [0, 0, 0, 0]);\n        opt('defaultFontFace', 'sans-serif');\n        opt('fixedDt', 0);\n        opt('useImageWorker', true);\n        opt('autostart', true);\n        opt('precision', 1);\n        opt('canvas2d', false);\n        opt('platform', null);\n        opt('readPixelsBeforeDraw', false);\n        opt('devicePixelRatio', 1)       \n        opt('readPixelsAfterDraw', false);\n        opt('readPixelsAfterDrawThreshold', 0);\n        opt('debugFrame', false);\n        opt('forceTxCanvasSource', false);\n        opt('pauseRafLoopOnIdle', false);\n        opt('RTL', false);\n\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\n            this._options['precision'] *= o['devicePixelRatio']\n            this._options['w'] *= o['devicePixelRatio']\n            this._options['h'] *= o['devicePixelRatio']\n        }\n    }\n\n    setApplication(app) {\n        this.application = app;\n    }\n\n    init() {\n\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\n            console.log('[Lightning] Using image worker!');\n        }\n\n        if (this.application.getOption('debug') && this.c2d) {\n            console.log('[Lightning] Using canvas2d renderer');\n        }\n\n        this.application.setAsRoot();\n        if (this.getOption('autostart')) {\n            this.platform.startLoop();\n        }\n    }\n\n    destroy() {\n        this.platform.stopLoop();\n        this.platform.destroy();\n        this.ctx.destroy();\n        this.textureManager.destroy();\n        this._renderer.destroy();\n\n        // clear last rendered frame\n        if (this.gl) {\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        } else if (this.c2d) {\n            this.c2d.clearRect(\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\n            );\n        }\n\n        this.gl = null;\n        this.c2d = null;\n        this.ctx = null;\n        this._options = null;\n        this.platform = null;\n        this.textureManager = null;\n        this._renderer = null;\n\n        delete this.gl;\n        delete this.c2d;\n        delete this.ctx;\n        delete this._options;\n        delete this.platform;\n        delete this.textureManager;\n        delete this._renderer;\n    }\n\n    stop() {\n        this.platform.stopLoop();\n    }\n\n    resume() {\n        this.platform.startLoop();\n    }\n\n    get root() {\n        return this.application;\n    }\n\n    getCanvas() {\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\n    }\n\n    getRenderPrecision() {\n        return this._options.precision;\n    }\n\n    /**\n     * Marks a texture for updating it's source upon the next drawFrame.\n     * @param texture\n     */\n    addUpdateSourceTexture(texture) {\n        if (this._updatingFrame) {\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\n            texture._performUpdateSource();\n        } else {\n            this._updateSourceTextures.add(texture);\n        }\n    }\n\n    removeUpdateSourceTexture(texture) {\n        if (this._updateSourceTextures) {\n            this._updateSourceTextures.delete(texture);\n        }\n    }\n\n    hasUpdateSourceTexture(texture) {\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\n    }\n\n\n    _performUpdateSource() {\n        if (this._updateSourceTextures.size) {\n            this._updateSourceTextures.forEach(texture => {\n                texture._performUpdateSource();\n            });\n            this._updateSourceTextures = new Set();\n        }\n    }\n\n    _calculateDt() {\n        this.startTime = this.currentTime;\n        this.currentTime = this.platform.getHrTime();\n\n        if (this._options.fixedDt) {\n            this.dt = this._options.fixedDt;\n        } else {\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\n        }\n    }\n\n    updateFrame() {\n        this._calculateDt();\n        this.emit('frameStart');\n        this._performUpdateSource();\n        this.emit('update');\n    }\n\n    idleFrame() {\n        this.textureThrottler.processSome();\n        this.emit('frameEnd');\n        this.frameCounter++;\n    }\n\n    renderFrame() {\n        const changes = this.ctx.hasRenderUpdates();\n\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\n        // during the current frame already.\n        this.textureThrottler.processSome();\n\n        if (changes) {\n            this._updatingFrame = true;\n            this.ctx.update();\n            this.ctx.render();\n            this._updatingFrame = false;\n        }\n\n        this.platform.nextFrame(changes);\n\n        this.emit('frameEnd');\n\n        this.frameCounter++;\n    }\n\n    isUpdatingFrame() {\n        return this._updatingFrame;\n    }\n\n    drawFrame() {\n        // Maintain original functionality of `drawFrame()` while retaining the\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\n        // The full functionality of this method is relied directly by our own unit tests and\n        // the unit tests of third party users\n        this.updateFrame();\n        this.renderFrame();\n    }\n\n    forceRenderUpdate() {\n        // Enforce re-rendering.\n        if (this.root) {\n            this.root.core._parent.setHasRenderUpdates(1);\n        }\n    }\n\n    setClearColor(clearColor) {\n        this.forceRenderUpdate();\n        if (clearColor === null) {\n            // Do not clear.\n            this._clearColor = null;\n        } else if (Array.isArray(clearColor)) {\n            this._clearColor = clearColor;\n        } else {\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\n        }\n    }\n\n    getClearColor() {\n        return this._clearColor;\n    }\n\n    createElement(settings) {\n        if (settings) {\n            return this.element(settings);\n        } else {\n            return new Element(this);\n        }\n    }\n\n    createShader(settings) {\n        return Shader.create(this, settings);\n    }\n\n    element(settings) {\n        if (settings.isElement) return settings;\n\n        let element;\n        if (settings.type) {\n            element = new settings.type(this);\n        } else {\n            element = new Element(this);\n        }\n\n        element.patch(settings);\n\n        return element;\n    }\n\n    c(settings) {\n        return this.element(settings);\n    }\n\n    get w() {\n        return this._options.w;\n    }\n\n    get h() {\n        return this._options.h;\n    }\n\n    get coordsWidth() {\n        return this.w / this._options.precision;\n    }\n\n    get coordsHeight() {\n        return this.h / this._options.precision;\n    }\n\n    addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        if (this._lastGcFrame !== this.frameCounter) {\n            if (this._usedMemory > this.getOption('memoryPressure')) {\n                this.gc(false);\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\n                    // Too few released. Aggressive cleanup.\n                    this.gc(true);\n                }\n            }\n        }\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    addVramUsage(delta, alpha) {\n        if (alpha) {\n            this._usedVramAlpha += delta;\n        }\n        else {\n            this._usedVramNonAlpha += delta;\n        }\n    }\n\n    get usedVramAlpha() {\n        return this._usedVramAlpha;\n    }\n\n    get usedVramNonAlpha() {\n        return this._usedVramNonAlpha;\n    }\n\n    get usedVram() {\n        return this._usedVramAlpha + this._usedVramNonAlpha;\n    }\n\n    gc(aggressive) {\n        if (this._lastGcFrame !== this.frameCounter) {\n            this._lastGcFrame = this.frameCounter;\n            const memoryUsageBefore = this._usedMemory;\n            this.gcTextureMemory(aggressive);\n            this.gcRenderTextureMemory(aggressive);\n            this.renderer.gc(aggressive);\n\n            if (this.application.getOption('debug')) {\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\n            }\n        }\n    }\n\n    gcTextureMemory(aggressive = false) {\n        if (aggressive && this.ctx.root.visible) {\n            // Make sure that ALL textures are cleaned;\n            this.ctx.root.visible = false;\n            this.textureManager.gc();\n            this.ctx.root.visible = true;\n        } else {\n            this.textureManager.gc();\n        }\n    }\n\n    gcRenderTextureMemory(aggressive = false) {\n        if (aggressive && this.root.visible) {\n            // Make sure that ALL render textures are cleaned;\n            this.root.visible = false;\n            this.ctx.freeUnusedRenderTextures(0);\n            this.root.visible = true;\n        } else {\n            this.ctx.freeUnusedRenderTextures(0);\n        }\n    }\n\n    getDrawingCanvas() {\n        return this.platform.getDrawingCanvas();\n    }\n\n    update() {\n        this.ctx.update()\n    }\n\n    addServiceProvider(serviceprovider) {\n        if (Utils.isSpark) {\n            this.platform.addServiceProvider(serviceprovider);\n        }\n    }\n\n    getChildrenByPosition(x, y) {\n        const children = [];\n        this.root.core.update();\n        this.root.core.collectAtCoord(x, y, children);\n\n        return children;\n    }\n}\n\nimport Element from \"./Element.mjs\";\nimport StageUtils from \"./StageUtils.mjs\";\nimport TextureManager from \"./TextureManager.mjs\";\nimport TextureThrottler from \"./TextureThrottler.mjs\";\nimport CoreContext from \"./core/CoreContext.mjs\";\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"./Component.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class Application extends Component {\n\n    constructor(options = {}, properties) {\n        // Save options temporarily to avoid having to pass it through the constructor.\n        Application._temp_options = options;\n\n        // Booting flag is used to postpone updateFocusSettings;\n        Application.booting = true;\n        const stage = new Stage(options.stage);\n        super(stage, properties);\n        Application.booting = false;\n\n        this.__updateFocusCounter = 0;\n        this.__keypressTimers = new Map();\n        this.__hoveredChild = null;\n\n        // We must construct while the application is not yet attached.\n        // That's why we 'init' the stage later (which actually emits the attach event).\n        this.stage.init();\n\n        // Initially, the focus settings are updated after both the stage and application are constructed.\n        this.updateFocusSettings();\n\n        this.__keymap = this.getOption('keys');\n\n        if (this.__keymap) {\n            this.stage.platform.registerKeydownHandler((e) => {\n                this._receiveKeydown(e);\n            });\n\n            this.stage.platform.registerKeyupHandler((e) => {\n                this._receiveKeyup(e);\n            });\n        }\n\n        if (this.getOption(\"enablePointer\")) {\n            this.stage.platform.registerClickHandler((e) => {\n                this._receiveClick(e);\n            });\n\n            this.stage.platform.registerHoverHandler((e) => {\n                this._receiveHover(e);\n            });\n\n            this.stage.platform.registerScrollWheelHandler((e) => {\n                this._recieveScrollWheel(e);\n            });\n\n            this.cursor = 'default';\n        }\n    }\n\n    getOption(name) {\n        return this.__options[name];\n    }\n\n    _setOptions(o) {\n        this.__options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this.__options[name] = def;\n            } else {\n                this.__options[name] = value;\n            }\n        }\n\n        opt('debug', false);\n        opt('keys', {\n            38: \"Up\",\n            40: \"Down\",\n            37: \"Left\",\n            39: \"Right\",\n            13: \"Enter\",\n            8: \"Back\",\n            27: \"Exit\"\n        });\n        opt('enablePointer', false);\n    }\n\n    __construct() {\n        this.stage.setApplication(this);\n\n        this._setOptions(Application._temp_options);\n        delete Application._temp_options;\n\n        super.__construct();\n    }\n\n    __init() {\n        super.__init();\n        this.__updateFocus();\n    }\n\n    updateFocusPath() {\n        this.__updateFocus();\n    }\n\n    __updateFocus() {\n        const notOverridden = this.__updateFocusRec();\n\n        if (!Application.booting && notOverridden) {\n            this.updateFocusSettings();\n        }\n    }\n\n    __updateFocusRec() {\n        const updateFocusId = ++this.__updateFocusCounter;\n        this.__updateFocusId = updateFocusId;\n\n        const newFocusPath = this.__getFocusPath();\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\n\n        if (!prevFocusedComponent) {\n            // Focus events.\n            this._focusPath = [];\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\n                this._focusPath.push(newFocusPath[i]);\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                if (focusOverridden) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\n            let index;\n            for (index = 0; index < m; index++) {\n                if (this._focusPath[index] !== newFocusPath[index]) {\n                    break;\n                }\n            }\n\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\n\n                if (this.getOption('debug')) {\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\n                }\n\n                // Unfocus events.\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\n                    const unfocusedElement = this._focusPath.pop();\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus events.\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\n                    this._focusPath.push(newFocusPath[i]);\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus changed events.\n                for (let i = 0; i < index; i++) {\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    updateFocusSettings() {\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\n\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\n        // focus directly (such as the application background).\n        const focusSettings = {};\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\n                this._focusPath[i]._setFocusSettings(focusSettings);\n            }\n        }\n\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\n            }\n        }\n\n        this.__prevFocusSettings = focusSettings;\n    }\n\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\n        // Override to handle focus-based settings.\n    }\n\n    __getFocusPath() {\n        const path = [this];\n        let current = this;\n        do {\n            const nextFocus = current._getFocused();\n            if (!nextFocus || (nextFocus === current)) {\n                // Found!;\n                break;\n            }\n\n\n            let ptr = nextFocus.cparent;\n            if (ptr === current) {\n                path.push(nextFocus);\n            } else {\n                // Not an immediate child: include full path to descendant.\n                const newParts = [nextFocus];\n                do {\n                    if (!ptr) {\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\n                    }\n                    newParts.push(ptr);\n                    ptr = ptr.cparent;\n                } while (ptr !== current);\n\n                // Add them reversed.\n                for (let i = 0, n = newParts.length; i < n; i++) {\n                    path.push(newParts[n - i - 1]);\n                }\n            }\n\n            current = nextFocus;\n        } while (true);\n\n        return path;\n    }\n\n    get focusPath() {\n        return this._focusPath;\n    }\n\n    /**\n     * Injects an event in the state machines, top-down from application to focused component.\n     */\n    focusTopDownEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = 0; i < n; i++) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Injects an event in the state machines, bottom-up from focused component to application.\n     */\n    focusBottomUpEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = n - 1; i >= 0; i--) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _receiveKeydown(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n        const path = this.focusPath;\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                const hasTimer = this.__keypressTimers.has(keys[i]);\n                // prevent event from getting fired when the timeout is still active\n                if (path[path.length - 1].longpress && hasTimer) {\n                    return;\n                }\n\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        const consumer = path[path.length - 1];\n\n        if (keys && consumer.longpress) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                this._startLongpressTimer(keys[i], consumer);\n            }\n        }\n    }\n\n    /**\n     * Keyup listener\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\n     *\n     * @param e\n     * @private\n     */\n    _receiveKeyup(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (this.__keypressTimers.has(keys[i])) {\n                    // keyup has fired before end of timeout so we clear it\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\n                    // delete so we can register it again\n                    this.__keypressTimers.delete(keys[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\n     * before the timer goes off.\n     *\n     * If key is not release (keyup) the longpress handler will be fired.\n     * Configuration can be via the Components template:\n     *\n     * static _template() {\n     *     return {\n     *         w:100, h:100,\n     *         longpress:{up:700, down:500}\n     *     }\n     * }     *\n     * // this will get called when up has been pressed for 700ms\n     * _handleUpLong() {\n     *\n     * }\n     *\n     * @param key\n     * @param element\n     * @private\n     */\n    _startLongpressTimer(key, element) {\n        const config = element.longpress;\n        const lookup = key.toLowerCase();\n\n        if (config[lookup]) {\n            const timeout = config[lookup];\n            if (!Utils.isNumber(timeout)) {\n                element._throwError(\"config value for longpress must be a number\");\n            } else {\n                this.__keypressTimers.set(key, setTimeout(() => {\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\n                    }\n\n                    this.__keypressTimers.delete(key);\n                }, timeout || 500 /* prevent 0ms */));\n            }\n        }\n        return;\n    }\n\n    _recieveScrollWheel(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\n            }\n        }\n    }\n\n    fireTopDownScrollWheelHandler(event, obj) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children).reverse();\n        let n = affected.length;\n\n        while (n--) {\n            const child = affected[n];\n            if (child && child[event]) {\n                child._captureScroll(obj);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    fireBottomUpScrollWheelHandler(event, obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[event]) {\n                child._handleScroll(obj);\n                return true;\n            }\n            child = child.parent;\n        }\n        return false;\n    }\n\n    _receiveClick(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpClickHandler(obj);\n        }\n    }\n\n    fireBottomUpClickHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[\"_handleClick\"]) {\n                const { px, py } = child.core._worldContext;\n                const cx = px * precision;\n                const cy = py * precision;\n\n                const localCoords = {\n                    x: clientX - cx,\n                    y: clientY - cy\n                }\n\n                const returnValue = child._handleClick(target, localCoords);\n                if (returnValue !== false) {\n                    break;\n                }\n            }\n            child = child.parent;\n        }\n    }\n\n    _receiveHover(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpHoverHandler(obj);\n        }\n    }\n\n    fireBottomUpHoverHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n\n        // Only fire handlers when pointer target changes\n        if (target !== this.__hoveredChild) {\n\n            let hoveredBranch = new Set();\n            let newHoveredBranch = new Set();\n\n            if (target) {\n                newHoveredBranch = new Set(target.getAncestors());\n            }\n\n            if (this.__hoveredChild) {\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\n                    const c = Component.getComponent(elem);\n                    if (c[\"_handleUnhover\"]) {\n                        c._handleUnhover(elem);\n                    }\n                    if (elem.parent && elem.parent.cursor) {\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\n                    }\n                }\n            }\n\n            this.__hoveredChild = target;\n\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\n            for (const elem of diffBranch) {\n                const c = Component.getComponent(elem);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(elem);\n                }\n            }\n\n            // New element hover cursor\n            const lastElement = diffBranch[0];\n            if (lastElement && lastElement.cursor) {\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\n            }\n\n            // Rerun _handleHover for target element in case it's been hovered\n            // back from its child\n            if (diffBranch.length === 0 && target) {\n                const c = Component.getComponent(target);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(target);\n                }\n            }\n        }\n    }\n\n    _getTargetChild(clientX, clientY) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children);\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\n\n        hoverableChildren.sort((a, b) => {\n            // Sort by zIndex and then id\n            if (a.zIndex > b.zIndex) {\n                return 1;\n            } else if (a.zIndex < b.zIndex) {\n                return -1;\n            } else {\n                return a.id > b.id ? 1 : -1;\n            }\n        });\n\n        if (hoverableChildren.length) {\n            // Assume target has highest zIndex (id when zIndex equal)\n            return hoverableChildren.slice(-1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    _findChildren(bucket, children) {\n        let n = children.length;\n        while (n--) {\n            const child = children[n];\n            // only add active children\n            if (child.__active && child.collision) {\n                if (child.collision === true) {\n                    bucket.push(child);\n                }\n                if (child.hasChildren()) {\n                    this._findChildren(bucket, child.children);\n                }\n            }\n        }\n        return bucket;\n    }\n\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\n        let n = affectedChildren.length;\n        const candidates = [];\n\n        // loop through affected children\n        // and perform collision detection\n        while (n--) {\n            const child = affectedChildren[n];\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n            const ctx = child.core._worldContext;\n\n            const cx = ctx.px * precision;\n            const cy = ctx.py * precision;\n            const cw = child.finalW * ctx.ta * precision;\n            const ch = child.finalH * ctx.td * precision;\n\n            if (cx > this.stage.w || cy > this.stage.h) {\n                continue;\n            }\n\n            if (child.parent.core._scissor) {\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\n                    continue\n            }\n\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\n                candidates.push(child);\n            }\n        }\n        return candidates;\n    }\n\n    _testCollision(px, py, cx, cy, cw, ch) {\n        if (px >= cx &&\n            px <= cx + cw &&\n            py >= cy &&\n            py <= cy + ch) {\n            return true;\n        }\n        return false;\n    }\n\n    destroy() {\n        if (!this._destroyed) {\n            this._destroy();\n            this.stage.destroy();\n            this._destroyed = true;\n        }\n    }\n\n    _destroy() {\n        // This forces the _detach, _disabled and _active events to be called.\n        this.stage.setApplication(undefined);\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n\n        if (this.__keypressTimers.size) {\n            for (const timer of this.__keypressTimers.values()) {\n                clearTimeout(timer);\n            }\n\n            this.__keypressTimers.clear();\n        }\n    }\n\n    getCanvas() {\n        return this.stage.getCanvas();\n    }\n\n}\n\nimport Stage from \"../tree/Stage.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticCanvasTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._factory = undefined;\n        this._lookupId = undefined;\n    }\n\n    set content({factory, lookupId = undefined}) {\n        this._factory = factory;\n        this._lookupId = lookupId;\n        this._changed();\n    }\n\n    _getIsValid() {\n        return !!this._factory;\n    }\n\n    _getLookupId() {\n        return this._lookupId;\n    }\n\n    _getSourceLoader() {\n        const f = this._factory;\n        return (cb) => {\n            return f((err, canvas) => {\n                if (err) {\n                    return cb(err);\n                }\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\n            }, this.stage);\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\n\nexport default class Tools {\n\n    static getCanvasTexture(canvasFactory, lookupId) {\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\n    }\n\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\n            } else {\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\n            }\n        };\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (fill === undefined) fill = true;\n        if (strokeWidth === undefined) strokeWidth = 0;\n\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + strokeWidth + 2;\n        canvas.height = h + strokeWidth + 2;\n\n        ctx.beginPath();\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n\n        if (fill) {\n            if (Utils.isNumber(fillColor)) {\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\n            } else {\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fill();\n        }\n\n        if (strokeWidth) {\n            if (Utils.isNumber(strokeColor)) {\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\n            } else {\n                ctx.strokeStyle = \"white\";\n            }\n            ctx.lineWidth = strokeWidth;\n            ctx.stroke();\n        }\n\n        return canvas;\n    }\n\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\n            } else {\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\n            }\n        };\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createShadowRect(stage, w, h, radius, blur, margin) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + margin * 2;\n        canvas.height = h + margin * 2;\n\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\n        ctx.globalAlpha = 0.01;\n        ctx.fillRect(0, 0, 0.01, 0.01);\n        ctx.globalAlpha = 1.0;\n\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.shadowBlur = blur;\n        ctx.shadowOffsetX = (w + 10) + margin;\n        ctx.shadowOffsetY = margin;\n\n        ctx.beginPath();\n        const x = -(w + 10);\n        const y = 0;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n        ctx.fill();\n\n        return canvas;\n    }\n\n    static getSvgTexture(url, w, h) {\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createSvg(cb, stage, url, w, h);\n            } else {\n                this.createSvg(cb, stage, url, w, h);\n            }\n        };\n        let id = 'svg' + [w, h, url].join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createSvg(cb, stage, url, w, h) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        let img = new Image();\n        img.onload = () => {\n            canvas.width = w;\n            canvas.height = h;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            cb(null, canvas);\n        }\n        img.onError = (err) => {\n            cb(err);\n        }\n\n        // On the PS4 platform setting the `crossOrigin` attribute on images\n        // can cause CORS failures.\n        if (!Utils.isPS4) {\n            img.crossOrigin = \"Anonymous\";\n        }\n\n        img.src = url;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class ObjMerger {\n\n    static isMf(f) {\n        return Utils.isFunction(f) && f.__mf;\n    }\n\n    static mf(f) {\n        // Set as merge function.\n        f.__mf = true;\n        return f;\n    }\n\n    static merge(a, b) {\n        const aks = Object.keys(a);\n        const bks = Object.keys(b);\n\n        if (!bks.length) {\n            return a;\n        }\n\n        // Create index array for all elements.\n        const ai = {};\n        const bi = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n            ai[key] = -1;\n            bi[key] = i;\n        }\n        for (let i = 0, n = aks.length; i < n; i++) {\n            const key = aks[i];\n            ai[key] = i;\n            if (bi[key] === undefined) {\n                bi[key] = -1;\n            }\n        }\n\n        const aksl = aks.length;\n\n        const result = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n\n            // Prepend all items in a that are not in b - before the now added b attribute.\n            const aIndex = ai[key];\n            let curIndex = aIndex;\n            while(--curIndex >= 0) {\n                const akey = aks[curIndex];\n                if (bi[akey] !== -1) {\n                    // Already found? Stop processing.\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\n                    break;\n                }\n            }\n            while(++curIndex < aIndex) {\n                const akey = aks[curIndex];\n                result[akey] = a[akey];\n            }\n\n            const bv = b[key];\n            const av = a[key];\n            let r;\n            if (this.isMf(bv)) {\n                r = bv(av);\n            } else {\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\n                    r = bv;\n                } else {\n                    r = ObjMerger.merge(av, bv);\n                }\n            }\n\n            // When marked as undefined, property is deleted.\n            if (r !== undefined) {\n                result[key] = r;\n            }\n        }\n\n        // Append remaining final items in a.\n        let curIndex = aksl;\n        while(--curIndex >= 0) {\n            const akey = aks[curIndex];\n            if (bi[akey] !== -1) {\n                break;\n            }\n        }\n        while(++curIndex < aksl) {\n            const akey = aks[curIndex];\n            result[akey] = a[akey];\n        }\n\n        return result;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"../tree/ObjectList.mjs\";\n\nexport default class ObjectListProxy extends ObjectList {\n\n    constructor(target) {\n        super();\n        this._target = target;\n    }\n\n    onAdd(item, index) {\n        this._target.addAt(item, index);\n    }\n\n    onRemove(item, index) {\n        this._target.removeAt(index);\n    }\n\n    onSync(removed, added, order) {\n        this._target._setByArray(order);\n    }\n\n    onSet(item, index) {\n        this._target.setAt(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._target.setAt(item, toIndex);\n    }\n\n    createItem(object) {\n        return this._target.createItem(object);\n    }\n\n    isItem(object) {\n        return this._target.isItem(object);\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\n\nexport default class ObjectListWrapper extends ObjectListProxy {\n\n    constructor(target, wrap) {\n        super(target);\n        this._wrap = wrap;\n    }\n\n    wrap(item) {\n        let wrapper = this._wrap(item);\n        item._wrapper = wrapper;\n        return wrapper;\n    }\n\n    onAdd(item, index) {\n        item = this.wrap(item);\n        super.onAdd(item, index);\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n    }\n\n    onSync(removed, added, order) {\n        added.forEach(a => this.wrap(a));\n        order = order.map(a => a._wrapper);\n        super.onSync(removed, added, order);\n    }\n\n    onSet(item, index) {\n        item = this.wrap(item);\n        super.onSet(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        super.onMove(item, fromIndex, toIndex);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class NoiseTexture extends Texture {\n\n    _getLookupId() {\n        return '__noise';\n    }\n\n    _getSourceLoader() {\n        const gl = this.stage.gl;\n        return function(cb) {\n            const noise = new Uint8Array(128 * 128 * 4);\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\n                const v = Math.floor(Math.random() * 256);\n                noise[i] = v;\n                noise[i+1] = v;\n                noise[i+2] = v;\n                noise[i+3] = 255;\n            }\n            const texParams = {}\n\n            if (gl) {\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class HtmlTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._htmlElement = undefined;\n        this._scale = 1;\n    }\n\n    set htmlElement(v) {\n        this._htmlElement = v;\n        this._changed();\n    }\n\n    get htmlElement() {\n        return this._htmlElement;\n    }\n\n    set scale(v) {\n        this._scale = v;\n        this._changed();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set html(v) {\n        if (!v) {\n            this.htmlElement = undefined;\n        } else {\n            const d = document.createElement('div');\n            d.innerHTML = \"<div>\" + v + \"</div>\";\n            this.htmlElement = d.firstElementChild;\n        }\n    }\n\n    get html() {\n        return this._htmlElement.innerHTML;\n    }\n\n    _getIsValid() {\n        return this.htmlElement;\n    }\n\n    _getLookupId() {\n        return this._scale + \":\" + this._htmlElement.innerHTML;\n    }\n\n    _getSourceLoader() {\n        const htmlElement = this._htmlElement;\n        const scale = this._scale;\n        return function(cb) {\n            if (!window.html2canvas) {\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\n            }\n\n            const area = HtmlTexture.getPreloadArea();\n            area.appendChild(htmlElement);\n\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\n                area.removeChild(htmlElement);\n                if (canvas.height === 0) {\n                    return cb(new Error(\"Canvas height is 0\"));\n                }\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\n            }).catch(e => {\n                console.error('[Lightning]', e);\n            });\n        }\n    }\n\n    static getPreloadArea() {\n        if (!this._preloadArea) {\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\n            this._preloadArea = document.createElement('div');\n            if (this._preloadArea.attachShadow) {\n                // Use a shadow DOM if possible to prevent styling from interfering.\n                this._preloadArea.attachShadow({mode: 'closed'});\n            }\n            this._preloadArea.style.opacity = 0;\n            this._preloadArea.style.pointerEvents = 'none';\n            this._preloadArea.style.position = 'fixed';\n            this._preloadArea.style.display = 'block';\n            this._preloadArea.style.top = '100vh';\n            this._preloadArea.style.overflow = 'hidden';\n            document.body.appendChild(this._preloadArea);\n        }\n        return this._preloadArea;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticTexture extends Texture {\n\n    constructor(stage, options) {\n        super(stage);\n\n        this._options = options;\n    }\n\n    set options(v) {\n        if (this._options !== v) {\n            this._options = v;\n            this._changed();\n        }\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    _getIsValid() {\n        return !!this._options;\n    }\n\n    _getSourceLoader() {\n        return (cb) => {\n            cb(null, this._options);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class ListComponent extends Component {\n\n    constructor(stage) {\n        super(stage);\n\n        this._wrapper = super._children.a({});\n\n        this._reloadVisibleElements = false;\n\n        this._visibleItems = new Set();\n\n        this._index = 0;\n\n        this._started = false;\n\n        /**\n         * The transition definition that is being used when scrolling the items.\n         * @type TransitionSettings\n         */\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\n\n        /**\n         * The scroll area size in pixels per item.\n         */\n        this._itemSize = 100;\n\n        this._viewportScrollOffset = 0;\n\n        this._itemScrollOffset = 0;\n\n        /**\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\n         */\n        this._roll = false;\n\n        /**\n         * Allows restricting the start scroll position.\n         */\n        this._rollMin = 0;\n\n        /**\n         * Allows restricting the end scroll position.\n         */\n        this._rollMax = 0;\n\n        /**\n         * Definition for a custom animation that is applied when an item is (partially) selected.\n         * @type AnimationSettings\n         */\n        this._progressAnimation = null;\n\n        /**\n         * Inverts the scrolling direction.\n         * @type {boolean}\n         * @private\n         */\n        this._invertDirection = false;\n\n        /**\n         * Layout the items horizontally or vertically?\n         * @type {boolean}\n         * @private\n         */\n        this._horizontal = true;\n\n        this.itemList = new ListItems(this);\n    }\n\n    _allowChildrenAccess() {\n        return false;\n    }\n\n    get items() {\n        return this.itemList.get();\n    }\n\n    set items(children) {\n        this.itemList.patch(children);\n    }\n\n    start() {\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\n        this._scrollTransition = this._wrapper.transition(this.property);\n        this._scrollTransition.on('progress', p => this.update());\n\n        this.setIndex(0, true, true);\n\n        this._started = true;\n\n        this.update();\n    }\n\n    setIndex(index, immediate = false, closest = false) {\n        let nElements = this.length;\n        if (!nElements) return;\n\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\n\n        if (closest) {\n            // Scroll to same offset closest to the index.\n            let offset = Utils.getModuloIndex(index, nElements);\n            let o = Utils.getModuloIndex(this.index, nElements);\n            let diff = offset - o;\n            if (diff > 0.5 * nElements) {\n                diff -= nElements;\n            } else if (diff < -0.5 * nElements) {\n                diff += nElements;\n            }\n            this._index += diff;\n        } else {\n            this._index = index;\n        }\n\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\n            this._index = Utils.getModuloIndex(this._index, nElements);\n        }\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = direction * this._index * this._itemSize;\n\n        if (this._roll) {\n            let min, max, scrollDelta;\n            if (direction == 1) {\n                max = (nElements - 1) * this._itemSize;\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max -= scrollDelta;\n\n                min = this.viewportSize - (this._itemSize + scrollDelta);\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.max(Math.min(value, max), min);\n            } else {\n                max = (nElements * this._itemSize - this.viewportSize);\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max += scrollDelta;\n\n                let min = scrollDelta;\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.min(Math.max(-max, value), -min);\n            }\n        }\n\n        this._scrollTransition.start(value);\n\n        if (immediate) {\n            this._scrollTransition.finish();\n        }\n\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\n    }\n\n    getAxisPosition() {\n        let target = -this._scrollTransition._targetValue;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = -direction * this._index * this._itemSize;\n\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\n    }\n\n    update() {\n        if (!this._started) return;\n\n        let nElements = this.length;\n        if (!nElements) return;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n\n        // Map position to index value.\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\n\n        let viewportSize = this.viewportSize;\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\n        v += scrollDelta;\n\n        let s, e, ps, pe;\n        if (direction == -1) {\n            s = Math.floor(-v / this._itemSize);\n            ps = 1 - ((-v / this._itemSize) - s);\n            e = Math.floor((viewportSize - v) / this._itemSize);\n            pe = (((viewportSize - v) / this._itemSize) - e);\n        } else {\n            s = Math.ceil(v / this._itemSize);\n            ps = 1 + (v / this._itemSize) - s;\n            e = Math.ceil((v - viewportSize) / this._itemSize);\n            pe = e - ((v - viewportSize) / this._itemSize);\n        }\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\n            // Don't show additional items.\n            if (e >= nElements) {\n                e = nElements - 1;\n                pe = 1;\n            }\n            if (s >= nElements) {\n                s = nElements - 1;\n                ps = 1;\n            }\n            if (e <= -1) {\n                e = 0;\n                pe = 1;\n            }\n            if (s <= -1) {\n                s = 0;\n                ps = 1;\n            }\n        }\n\n        let offset = -direction * s * this._itemSize;\n\n        let item;\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n\n            let element = this.getElement(realIndex);\n            item = element.parent;\n            this._visibleItems.delete(item);\n            if (this._horizontal) {\n                item.x = offset + scrollDelta;\n            } else {\n                item.y = offset + scrollDelta;\n            }\n\n            let wasVisible = item.visible;\n            item.visible = true;\n\n            if (!wasVisible || this._reloadVisibleElements) {\n                // Turned visible.\n                this.emit('visible', index, realIndex);\n            }\n\n\n\n            if (this._progressAnimation) {\n                let p = 1;\n                if (index == s) {\n                    p = ps;\n                } else if (index == e) {\n                    p = pe;\n                }\n\n                // Use animation to progress.\n                this._progressAnimation.apply(element, p);\n            }\n\n            offset += this._itemSize;\n        }\n\n        // Handle item visibility.\n        let self = this;\n        this._visibleItems.forEach(function(invisibleItem) {\n            invisibleItem.visible = false;\n            self._visibleItems.delete(invisibleItem);\n        });\n\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n            this._visibleItems.add(this.getWrapper(realIndex));\n        }\n\n        this._reloadVisibleElements = false;\n    }\n\n    setPrevious() {\n        this.setIndex(this._index - 1);\n    }\n\n    setNext() {\n        this.setIndex(this._index + 1);\n    }\n\n    getWrapper(index) {\n        return this._wrapper.children[index];\n    }\n\n    getElement(index) {\n        let e = this._wrapper.children[index];\n        return e ? e.children[0] : null;\n    }\n\n    reload() {\n        this._reloadVisibleElements = true;\n        this.update();\n    }\n\n    get element() {\n        let e = this._wrapper.children[this.realIndex];\n        return e ? e.children[0] : null;\n    }\n\n    get length() {\n        return this._wrapper.children.length;\n    }\n\n    get property() {\n        return this._horizontal ? 'x' : 'y';\n    }\n\n    get viewportSize() {\n        return this._horizontal ? this.w : this.h;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get realIndex() {\n        return Utils.getModuloIndex(this._index, this.length);\n    }\n\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    set itemSize(v) {\n        this._itemSize = v;\n        this.update();\n    }\n\n    get viewportScrollOffset() {\n        return this._viewportScrollOffset;\n    }\n\n    set viewportScrollOffset(v) {\n        this._viewportScrollOffset = v;\n        this.update();\n    }\n\n    get itemScrollOffset() {\n        return this._itemScrollOffset;\n    }\n\n    set itemScrollOffset(v) {\n        this._itemScrollOffset = v;\n        this.update();\n    }\n\n    get scrollTransitionSettings() {\n        return this._scrollTransitionSettings;\n    }\n\n    set scrollTransitionSettings(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    set scrollTransition(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    get scrollTransition() {\n        return this._scrollTransition;\n    }\n\n    get progressAnimation() {\n        return this._progressAnimation;\n    }\n\n    set progressAnimation(v) {\n        if (Utils.isObjectLiteral(v)) {\n            this._progressAnimation = this.stage.animations.createSettings(v);\n        } else {\n            this._progressAnimation = v;\n        }\n        this.update();\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(v) {\n        this._roll = v;\n        this.update();\n    }\n\n    get rollMin() {\n        return this._rollMin;\n    }\n\n    set rollMin(v) {\n        this._rollMin = v;\n        this.update();\n    }\n\n    get rollMax() {\n        return this._rollMax;\n    }\n\n    set rollMax(v) {\n        this._rollMax = v;\n        this.update();\n    }\n\n    get invertDirection() {\n        return this._invertDirection;\n    }\n\n    set invertDirection(v) {\n        if (!this._started) {\n            this._invertDirection = v;\n        }\n    }\n\n    get horizontal() {\n        return this._horizontal;\n    }\n\n    set horizontal(v) {\n        if (v !== this._horizontal) {\n            if (!this._started) {\n                this._horizontal = v;\n            }\n        }\n    }\n\n}\n\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\nclass ListItems extends ObjectListWrapper {\n    constructor(list) {\n        let wrap = (item => {\n            let parent = item.stage.createElement();\n            parent.add(item);\n            parent.visible = false;\n            return parent;\n        })\n\n        super(list._wrapper._children, wrap);\n        this.list = list;\n    }\n\n    onAdd(item, index) {\n        super.onAdd(item, index);\n        this.checkStarted(index);\n    }\n\n    checkStarted(index) {\n        this.list._reloadVisibleElements = true;\n        if (!this.list._started) {\n            this.list.start();\n        } else {\n            if (this.list.length === 1) {\n                this.list.setIndex(0, true, true);\n            } else {\n                if (this.list._index >= this.list.length) {\n                    this.list.setIndex(0);\n                }\n            }\n            this.list.update();\n        }\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n        let ri = this.list.realIndex;\n        if (ri === index) {\n            if (ri === this.list.length) {\n                ri--;\n            }\n            if (ri >= 0) {\n                this.list.setIndex(ri);\n            }\n        } else if (ri > index) {\n            this.list.setIndex(ri - 1);\n        }\n\n        this.list._reloadVisibleElements = true;\n    }\n\n    onSet(item, index) {\n        super.onSet(item, index);\n        this.checkStarted(index);\n    }\n\n    onSync(removed, added, order) {\n        super.onSync(removed, added, order);\n        this.checkStarted(0);\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nimport Utils from \"../tree/Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class LinearBlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n\n        this._direction = new Float32Array([1, 0]);\n        this._kernelRadius = 1;\n    }\n\n    get x() {\n        return this._direction[0];\n    }\n\n    set x(v) {\n        this._direction[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._direction[1];\n    }\n\n    set y(v) {\n        this._direction[1] = v;\n        this.redraw();\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n\n    useDefault() {\n        return (this._kernelRadius === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\n\n        const w = operation.getRenderWidth();\n        const h = operation.getRenderHeight();\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\n    }\n}\n\nLinearBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 resolution;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 direction;\n    uniform int kernelRadius;\n    \n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3333333333333333) * direction;\n        color += texture2D(image, uv) * 0.29411764705882354;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n        return color; \n    }\n    \n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n    }\n    \n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.411764705882353) * direction;\n        vec2 off2 = vec2(3.2941176470588234) * direction;\n        vec2 off3 = vec2(5.176470588235294) * direction;\n        color += texture2D(image, uv) * 0.1964825501511404;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n        return color;\n    }    \n\n    void main(void){\n        if (kernelRadius == 1) {\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else if (kernelRadius == 2) {\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else {\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\n */\nexport default class BoxBlurShader extends DefaultShader {\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const dx = 1.0 / operation.getTextureWidth(0);\n        const dy = 1.0 / operation.getTextureHeight(0);\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\n    }\n\n}\n\nBoxBlurShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 stepTextureCoord;\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec4 vColor;\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nBoxBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class BlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._kernelRadius = 1;\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\nimport Shader from \"../tree/Shader.mjs\";\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\n\nexport default class FastBlurComponent extends Component {\n    static _template() {\n        return {}\n    }\n\n    get wrap() {\n        return this.tag(\"Wrap\");\n    }\n\n    set content(v) {\n        return this.wrap.content = v;\n    }\n\n    get content() {\n        return this.wrap.content;\n    }\n\n    set padding(v) {\n        this.wrap._paddingX = v;\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this.wrap._paddingX = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set amount(v) {\n        return this.wrap.amount = v;\n    }\n\n    get amount() {\n        return this.wrap.amount;\n    }\n\n    _onResize() {\n        this.wrap.w = this.renderWidth;\n        this.wrap.h = this.renderHeight;\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    _build() {\n        this.patch({\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\n        });\n    }\n\n}\n\n\nclass C2dFastBlurComponent extends Component {\n\n    static _template() {\n        return {\n            forceZIndexContext: true,\n            rtt: true,\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n\n    }\n\n    static getSpline() {\n        if (!this._multiSpline) {\n            this._multiSpline = new MultiSpline();\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\n        }\n        return this._multiSpline;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        this._wrapper.x = paddingX;\n        this._textwrap.x = -paddingX;\n\n        this._wrapper.y = paddingY;\n        this._textwrap.y = -paddingY;\n\n        this._textwrap.w = w + paddingX * 2;\n        this._textwrap.h = h + paddingY * 2;\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\n    }\n\n    static _amountToKernelRadius(v) {\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nclass WebGLFastBlurComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            },\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n        this._layers = this.sel(\"Layers\");\n        this._output = this.sel(\"Result\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _buildLayers() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._output.x = -paddingX;\n        this._textwrap.x = -paddingX;\n        this._output.w = fw;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._output.y = -paddingY;\n        this._textwrap.y = -paddingY;\n        this._output.h = fh;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v === 0) {\n            this._textwrap.renderToTexture = false;\n            this._output.shader.otherTextureSource = null;\n            this._output.visible = false;\n        } else {\n            this._textwrap.renderToTexture = true;\n            this._output.visible = true;\n\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n\n            if (v <= 1) {\n                this._output.texture = this._textwrap.getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\n                this._output.shader.a = v;\n            } else if (v <= 2) {\n                this._output.texture = this.getLayer(0).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\n                this._output.shader.a = v - 1;\n            } else if (v <= 3) {\n                this._output.texture = this.getLayer(1).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\n                this._output.shader.a = v - 2;\n            } else if (v <= 4) {\n                this._output.texture = this.getLayer(2).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\n                this._output.shader.a = v - 3;\n            }\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._buildLayers();\n    }\n\n}\n\n/**\n * Shader that combines two textures into one output.\n */\nclass FastBlurOutputShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._a = 0;\n        this._otherTextureSource = null;\n    }\n\n    get a() {\n        return this._a;\n    }\n\n    set a(v) {\n        this._a = v;\n        this.redraw();\n    }\n\n    set otherTextureSource(v) {\n        this._otherTextureSource = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\n    }\n\n    beforeDraw(operation) {\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\n\n        let gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n}\n\nFastBlurOutputShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uSampler2;\n    uniform float a;\n    void main(void){\n        if (a == 1.0) {\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\n        } else {\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\n\nexport default class BloomComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\n                BloomBase: {shader: {type: BloomBaseShader},\n                    Content: {}\n                }\n            },\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap.Content\");\n        this._layers = this.sel(\"Layers\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _build() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap.Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap.Content').patch(v);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._textwrap.x = -paddingX;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._textwrap.y = -paddingY;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v > 0) {\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._build();\n    }\n\n}\n\nclass BloomBaseShader extends DefaultShader {\n}\n\nBloomBaseShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float m = max(max(color.r, color.g), color.b);\n        float c = max(0.0, (m - 0.80)) * 5.0;\n        color = color * c;\n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class SmoothScaleComponent extends Component {\n\n    static _template() {\n        return {\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\n                Content: {}\n            },\n            Scale: {visible: false}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._smoothScale = 1;\n        this._iterations = 0;\n    }\n\n    get content() {\n        return this.tag('Content');\n    }\n\n    set content(v) {\n        this.tag('Content').patch(v, true);\n    }\n\n    get smoothScale() {\n        return this._smoothScale;\n    }\n\n    set smoothScale(v) {\n        if (this._smoothScale !== v) {\n            let its = 0;\n            while(v < 0.5 && its < 12) {\n                its++;\n                v = v * 2;\n            }\n\n            this.scale = v;\n            this._setIterations(its);\n\n            this._smoothScale = v;\n        }\n    }\n\n    _setIterations(its) {\n        if (this._iterations !== its) {\n            const scalers = this.sel(\"Scale\").childList;\n            const content = this.sel(\"ContentWrap\");\n            while (scalers.length < its) {\n                const first = scalers.length === 0;\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\n            }\n\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\n\n            const useScalers = (its > 0);\n            this.patch({\n                ContentWrap: {renderToTexture: useScalers},\n                Scale: {visible: useScalers}\n            });\n\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                scalers.getAt(i).patch({\n                    visible: i < its,\n                    renderOffscreen: i !== its - 1\n                });\n            }\n            this._iterations = its;\n        }\n    }\n\n    static _updateDimensions(contentWrap, force) {\n        const content = contentWrap.children[0];\n        let w = content.renderWidth;\n        let h = content.renderHeight;\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\n            contentWrap.w = w;\n            contentWrap.h = h;\n\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                w = w * 0.5;\n                h = h * 0.5;\n                scalers[i].w = w;\n                scalers[i].h = h;\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class BorderComponent extends Component {\n\n    static _template() {\n        return {\n            Content: {},\n            Borders: {\n                Top: {rect: true, visible: false, mountY: 1},\n                Right: {rect: true, visible: false},\n                Bottom: {rect: true, visible: false},\n                Left: {rect: true, visible: false, mountX: 1}\n            }\n        };\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._borderTop = this.tag(\"Top\");\n        this._borderRight = this.tag(\"Right\");\n        this._borderBottom = this.tag(\"Bottom\");\n        this._borderLeft = this.tag(\"Left\");\n\n        this.onAfterUpdate = function (element) {\n            const content = element.childList.first;\n            let w = element.core.w || content.renderWidth;\n            let h = element.core.h || content.renderHeight;\n            element._borderTop.w = w;\n            element._borderBottom.y = h;\n            element._borderBottom.w = w;\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderLeft.y = -element._borderTop.h;\n            element._borderRight.x = w;\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderRight.y = -element._borderTop.h;\n        };\n\n        this.borderWidth = 1;\n    }\n\n    get content() {\n        return this.sel('Content');\n    }\n\n    set content(v) {\n        this.sel('Content').patch(v, true);\n    }\n\n    get borderWidth() {\n        return this.borderWidthTop;\n    }\n\n    get borderWidthTop() {\n        return this._borderTop.h;\n    }\n\n    get borderWidthRight() {\n        return this._borderRight.w;\n    }\n\n    get borderWidthBottom() {\n        return this._borderBottom.h;\n    }\n\n    get borderWidthLeft() {\n        return this._borderLeft.w;\n    }\n\n    set borderWidth(v) {\n        this.borderWidthTop = v;\n        this.borderWidthRight = v;\n        this.borderWidthBottom = v;\n        this.borderWidthLeft = v;\n    }\n\n    set borderWidthTop(v) {\n        this._borderTop.h = v;\n        this._borderTop.visible = (v > 0);\n    }\n\n    set borderWidthRight(v) {\n        this._borderRight.w = v;\n        this._borderRight.visible = (v > 0);\n    }\n\n    set borderWidthBottom(v) {\n        this._borderBottom.h = v;\n        this._borderBottom.visible = (v > 0);\n    }\n\n    set borderWidthLeft(v) {\n        this._borderLeft.w = v;\n        this._borderLeft.visible = (v > 0);\n    }\n\n    get colorBorder() {\n        return this.colorBorderTop;\n    }\n\n    get colorBorderTop() {\n        return this._borderTop.color;\n    }\n\n    get colorBorderRight() {\n        return this._borderRight.color;\n    }\n\n    get colorBorderBottom() {\n        return this._borderBottom.color;\n    }\n\n    get colorBorderLeft() {\n        return this._borderLeft.color;\n    }\n\n    set colorBorder(v) {\n        this.colorBorderTop = v;\n        this.colorBorderRight = v;\n        this.colorBorderBottom = v;\n        this.colorBorderLeft = v;\n    }\n\n    set colorBorderTop(v) {\n        this._borderTop.color = v;\n    }\n\n    set colorBorderRight(v) {\n        this._borderRight.color = v;\n    }\n\n    set colorBorderBottom(v) {\n        this._borderBottom.color = v;\n    }\n\n    set colorBorderLeft(v) {\n        this._borderLeft.color = v;\n    }\n\n    get borderTop() {\n        return this._borderTop;\n    }\n\n    set borderTop(settings) {\n        this.borderTop.patch(settings);\n    }\n\n    get borderRight() {\n        return this._borderRight;\n    }\n\n    set borderRight(settings) {\n        this.borderRight.patch(settings);\n    }\n\n    get borderBottom() {\n        return this._borderBottom;\n    }\n\n    set borderBottom(settings) {\n        this.borderBottom.patch(settings);\n    }\n\n    get borderLeft() {\n        return this._borderLeft;\n    }\n\n    set borderLeft(settings) {\n        this.borderLeft.patch(settings);\n    }\n\n    set borders(settings) {\n        this.borderTop = settings;\n        this.borderLeft = settings;\n        this.borderBottom = settings;\n        this.borderRight = settings;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\n\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getC2d() {\n        return C2dGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nWebGLGrayscaleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\n    }\n`;\n\nexport class C2dGrayscaleShader extends C2dDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getWebGL() {\n        return WebGLGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * This shader can be used to fix a problem that is known as 'gradient banding'.\n */\nexport default class DitheringShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._noiseTexture = new NoiseTexture(ctx.stage);\n\n        this._graining = 1/256;\n\n        this._random = false;\n    }\n\n    set graining(v) {\n        this._graining = v;\n        this.redraw();\n    }\n\n    set random(v) {\n        this._random = v;\n        this.redraw();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Make sure that the noise texture is uploaded to the GPU.\n        this._noiseTexture.load();\n\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            // Calculate noise texture coordinates so that it spans the full element.\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\n\n            let ulx = 0;\n            let uly = 0;\n            if (this._random) {\n                ulx = Math.random();\n                uly = Math.random();\n\n                brx += ulx;\n                bry += uly;\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = ulx;\n                    ulx = brx;\n                    brx = t;\n                }\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = uly;\n                    uly = bry;\n                    bry = t;\n                }\n            }\n\n            // Specify all corner points.\n            floats[offset] = ulx;\n            floats[offset + 1] = uly;\n\n            floats[offset + 2] = brx;\n            floats[offset + 3] = uly;\n\n            floats[offset + 4] = brx;\n            floats[offset + 5] = bry;\n\n            floats[offset + 6] = ulx;\n            floats[offset + 7] = bry;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n\n        let glTexture = this._noiseTexture.source.nativeTexture;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    useDefault() {\n        return this._graining === 0;\n    }\n\n    afterDraw(operation) {\n        if (this._random) {\n            this.redraw();\n        }\n    }\n\n}\n\nDitheringShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec2 aNoiseTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vNoiseTextureCoord = aNoiseTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDitheringShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uNoiseSampler;\n    uniform float graining;\n    void main(void){\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../../tree/Utils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class CircularPushShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._inputValue = 0;\n\n        this._maxDerivative = 0.01;\n\n        this._normalizedValue = 0;\n\n        // The offset between buckets. A value between 0 and 1.\n        this._offset = 0;\n\n        this._amount = 0.1;\n\n        this._aspectRatio = 1;\n\n        this._offsetX = 0;\n\n        this._offsetY = 0;\n\n        this.buckets = 100;\n    }\n\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(v) {\n        this._aspectRatio = v;\n        this.redraw();\n    }\n\n    get offsetX() {\n        return this._offsetX;\n    }\n\n    set offsetX(v) {\n        this._offsetX = v;\n        this.redraw();\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        this._offsetY = v;\n        this.redraw();\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    set inputValue(v) {\n        this._inputValue = v;\n    }\n\n    get inputValue() {\n        return this._inputValue;\n    }\n\n    set maxDerivative(v) {\n        this._maxDerivative = v;\n    }\n\n    get maxDerivative() {\n        return this._maxDerivative;\n    }\n\n    set buckets(v) {\n        if (v > 100) {\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\n            v = 100;\n        }\n\n        // This should be set before starting.\n        this._buckets = v;\n\n        // Init values array in the correct length.\n        this._values = new Uint8Array(this._getValues(v));\n\n        this.redraw();\n    }\n\n    get buckets() {\n        return this._buckets;\n    }\n\n    _getValues(n) {\n        const v = [];\n        for (let i = 0; i < n; i++) {\n            v.push(this._inputValue);\n        }\n        return v;\n    }\n\n    /**\n     * Progresses the shader with the specified (fractional) number of buckets.\n     * @param {number} o;\n     *   A number from 0 to 1 (1 = all buckets).\n     */\n    progress(o) {\n        this._offset += o * this._buckets;\n        const full = Math.floor(this._offset);\n        this._offset -= full;\n        this._shiftBuckets(full);\n        this.redraw();\n    }\n\n    _shiftBuckets(n) {\n        for (let i = this._buckets - 1; i >= 0; i--) {\n            const targetIndex = i - n;\n            if (targetIndex < 0) {\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\n                this._values[i] = 255 * this._normalizedValue;\n            } else {\n                this._values[i] = this._values[targetIndex];\n            }\n        }\n    }\n\n    set offset(v) {\n        this._offset = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    beforeDraw(operation) {\n        const gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        if (!this._valuesTexture) {\n            this._valuesTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (Utils.isNode) {\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\n            }\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n        }\n\n        // Upload new values.\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    cleanup() {\n        if (this._valuesTexture) {\n            this.gl.deleteTexture(this._valuesTexture);\n        }\n    }\n\n\n}\n\nCircularPushShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    uniform float offsetX;\n    uniform float offsetY;\n    uniform float aspectRatio;\n    varying vec2 vTextureCoord;\n    varying vec2 vPos;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vPos = vTextureCoord * 2.0 - 1.0;\n        vPos.y = vPos.y * aspectRatio;\n        vPos.y = vPos.y + offsetY;\n        vPos.x = vPos.x + offsetX;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nCircularPushShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vPos;\n    uniform float amount;\n    uniform float offset;\n    uniform float values[100];\n    uniform float buckets;\n    uniform sampler2D uSampler;\n    uniform sampler2D uValueSampler;\n    void main(void){\n        float l = length(vPos);\n        float m = (l * buckets * 0.678 - offset) / buckets;\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\n        vec2 unit = vPos / l;\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\n    }\n`;\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class InversionShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nInversionShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class OutlineShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._width = 5;\n        this._col = 0xFFFFFFFF;\n        this._color = [1,1,1,1];\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    get color() {\n        return this._col;\n    }\n\n    set color(v) {\n        if (this._col !== v) {\n            const col = StageUtils.getRgbaComponentsNormalized(v);\n            col[0] = col[0] * col[3];\n            col[1] = col[1] * col[3];\n            col[2] = col[2] * col[3];\n\n            this._color = col;\n\n            this.redraw();\n\n            this._col = v;\n        }\n    }\n\n    useDefault() {\n        return (this._width === 0 || this._col[3] === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            const elementCore = operation.getElementCore(i);\n\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\n            const ddw = this._width / elementCore.w;\n            const dw = ddw / (1 - 2 * ddw);\n            const ddh = this._width / elementCore.h;\n            const dh = ddh / (1 - 2 * ddh);\n\n            // Specify all corner points.\n            floats[offset] = -dw;\n            floats[offset + 1] = -dh;\n\n            floats[offset + 2] = 1 + dw;\n            floats[offset + 3] = -dh;\n\n            floats[offset + 4] = 1 + dw;\n            floats[offset + 5] = 1 + dh;\n\n            floats[offset + 6] = -dw;\n            floats[offset + 7] = 1 + dh;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n}\n\nOutlineShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aCorner;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vCorner;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vCorner = aCorner;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nOutlineShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vCorner;\n    uniform vec4 color;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec2 m = min(vCorner, 1.0 - vCorner);\n        float value = step(0.0, min(m.x, m.y));\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\n */\nexport default class PixelateShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._size = new Float32Array([4, 4]);\n    }\n\n    get x() {\n        return this._size[0];\n    }\n\n    set x(v) {\n        this._size[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._size[1];\n    }\n\n    set y(v) {\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    get size() {\n        return this._size[0];\n    }\n\n    set size(v) {\n        this._size[0] = v;\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return ((this._size[0] === 0) && (this._size[1] === 0));\n    }\n\n    static getWebGLImpl() {\n        return WebGLPixelateShaderImpl;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            let w = operation.quads.getTextureWidth(operation.index + i);\n            let h = operation.quads.getTextureHeight(operation.index + i);\n\n            floats[offset] = w;\n            floats[offset + 1] = h;\n            floats[offset + 2] = w;\n            floats[offset + 3] = h;\n            floats[offset + 4] = w;\n            floats[offset + 5] = h;\n            floats[offset + 6] = w;\n            floats[offset + 7] = h;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\n    }\n}\n\nPixelateShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aTextureRes;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        vTextureRes = aTextureRes;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPixelateShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n\n    uniform vec2 size;\n    uniform sampler2D uSampler;\n    \n    vec2 mapCoord( vec2 coord )\n    {\n        coord *= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 unmapCoord( vec2 coord )\n    {\n        coord /= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 pixelate(vec2 coord, vec2 size)\n    {\n        return floor( coord / size ) * size;\n    }\n    \n    void main(void)\n    {\n        vec2 coord = mapCoord(vTextureCoord);\n        coord = pixelate(coord, size);\n        coord = unmapCoord(coord);\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class RadialFilterShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._radius = 0;\n        this._cutoff = 1;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set cutoff(v) {\n        this._cutoff = v;\n        this.redraw();\n    }\n\n    get cutoff() {\n        return this._cutoff;\n    }\n    \n    useDefault() {\n        return this._radius === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        // We substract half a pixel to get a better cutoff effect.\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\n    }\n\n}\n\nRadialFilterShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 pos;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n        pos = gl_Position.xy;\n    }\n`;\n\nRadialFilterShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 pos;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float radius;\n    uniform float cutoff;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RoundedRectangleShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._blend = 0;\n        this._radius = [1, 1, 1, 1];\n        this._stroke = 0;\n        this._fc = 0x00ffffff;\n        this._fillColor = this._getNormalizedColor(0xffffffff);\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\n    }\n\n    set blend(p) {\n        this._blend = Math.min(Math.max(p, 0), 1);\n    }\n\n    set radius(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._radius = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\n            }\n            else if (v.length === 4) {\n                this._radius = v;\n            }\n            else {\n                this._radius = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._radius = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set topLeft(num) {\n        this._radius[0] = num;\n        this.redraw();\n    }\n\n    get topLeft() {\n        return this._radius[0];\n    }\n\n    set topRight(num) {\n        this._radius[1] = num;\n        this.redraw();\n    }\n\n    get topRight() {\n        return this._radius[1];\n    }\n\n    set bottomRight(num) {\n        this._radius[2] = num;\n        this.redraw();\n    }\n\n    get bottomRight() {\n        return this._radius[2];\n    }\n\n    set bottomLeft(num) {\n        this._radius[3] = num;\n        this.redraw();\n    }\n\n    get bottomLeft() {\n        return this._radius[4];\n    }\n\n    set strokeColor(argb) {\n        this._sc = argb;\n        this._strokeColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get strokeColor() {\n        return this._sc;\n    }\n\n    set fillColor(argb) {\n        this._fc = argb;\n        this._fillColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get fillColor() {\n        return this._fc;\n    }\n\n    set stroke(num) {\n        this._stroke = num;\n        this.redraw();\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nRoundedRectangleShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nRoundedRectangleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n\n    #define PI 3.14159265359\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 radius;\n    uniform float stroke;\n    uniform vec4 strokeColor;\n    uniform vec4 fillColor;\n    uniform float alpha;\n    uniform float fill;\n    uniform float blend;\n    \n    float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    float innerBorderMask(float dist, float width){\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\n        float alpha2 = clamp(dist, 0.0, 1.0);\n        return alpha1 - alpha2;\n    }\n\n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        float r = 0.0;\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[0];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[1];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\n            r = radius[2];\n        } else {\n            r = radius[3];\n        }\n        \n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from './DefaultShader.mjs';\n\nexport default class FadeOutShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._fade = [0, 0, 0, 0];\n    }\n\n    set top(num) {\n        this._fade[0] = num;\n        this.redraw();\n    }\n\n    get top() {\n        return this._fade[0];\n    }\n\n    set right(num) {\n        this._fade[1] = num;\n        this.redraw();\n    }\n\n    get right() {\n        return this._fade[1];\n    }\n\n    set bottom(num) {\n        this._fade[2] = num;\n        this.redraw();\n    }\n\n    get bottom() {\n        return this._fade[2];\n    }\n\n    set left(num) {\n        this._fade[3] = num;\n        this.redraw();\n    }\n\n    get left() {\n        return this._fade[3];\n    }\n\n    set fade(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._fade = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\n            }\n            else if (v.length === 4) {\n                this._fade = v;\n            }\n            else {\n                this._fade = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._fade = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get fade() {\n        return this._fade;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const fade = this._fade.map((f) => f * renderPrecision);\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nFadeOutShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 fade;\n    \n    void main() {\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 point = vTextureCoord.xy * resolution.xy;\n        \n        vec2 pos1;\n        vec2 pos2;\n        vec2 d;\n        float c;\n        float t = 0.0;\n             \n        if(fade[0] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x, point.y + fade[0]);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[1] > 0.0) {\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[2] > 0.0) {\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[3] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x + fade[3], point.y);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class VignetteShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._magnitude = 1.3;\n        this._intensity = 0.7;\n        this._pivot = [0.5, 0.5];\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\n        this.redraw()\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v)) {\n            this._pivot = v;\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    set pivotX(v) {\n        this._pivot[0] = v;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotY(v) {\n        this._pivot[1] = v;\n        this.redraw();\n    }\n\n    get intensity() {\n        return this._intensity;\n    }\n\n    set intensity(v) {\n        this._intensity = v;\n        this.redraw();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n\n    }\n\n    set magnitude(v) {\n        this._magnitude = v;\n        this.redraw();\n    }\n}\n\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nVignetteShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float magnitude;\n    uniform float intensity;\n    uniform vec2 pivot;\n\n    void main() {\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\n        uv.x = clamp(uv.x, 0.0, 1.0);\n        uv.y = clamp(uv.y, 0.0, 1.0);\n   \n        uv *=  1.00 - uv.yx;\n        float vig = uv.x * uv.y * 25.0 * intensity;\n        vig = pow(vig, 0.45 * magnitude);\n        vec4 fragColor = vec4(vig) * vColor;\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\n\n    }\n`\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from '../../../tree/StageUtils.mjs'\n\nexport default class SpinnerShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._radius = 100;\n        this._width = 50;\n        this._period = 1;\n        this._angle = 0.5;\n        this._smooth = 0.005;\n        this._color = 0xffffffff;\n        this._backgroundColor = 0xff000000;\n        this._time = Date.now();\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    set period(v) {\n        this._period = v;\n        this.redraw();\n    }\n\n    set angle(v) {\n        this._angle = v\n        this.redraw();\n    }\n\n    set smooth(v) {\n        this._smooth = v;\n        this.redraw();\n    }\n\n    set color(v) {\n        this._color = v;\n        this.redraw();\n    }\n\n    set backgroundColor(v) {\n        this._backgroundColor = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner\n\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\n\n        this.redraw()\n    }\n}\n\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nSpinnerShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float iTime;\n    uniform float radius;\n    uniform float width;\n    uniform float period;\n    uniform float angle;\n    uniform float smooth;\n    uniform vec2 resolution;\n\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n\n    float ratio = resolution.y / resolution.x;\n\n    vec2 transpose_pos(vec2 pos) {\n        if (ratio < 1.) {\n            float diff = 0.5 - pos.x;\n            pos.x = 0.5 - diff / ratio;\n        } else {\n            float diff = 0.5 - pos.y;\n            pos.y = 0.5 - diff * ratio;\n        }\n        return pos;\n    }\n\n    float get_angle(vec2 pos) {\n        pos = transpose_pos(pos);\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\n        a = (1.0+a/3.14159)/2.0;\n        \n        return a;\n    }\n\n    float dist(vec2 pos1, vec2 pos2) {\n        pos1 = transpose_pos(pos1);\n        return distance(pos1, pos2);\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vTextureCoord;\n        vec4 fragColor = vColor;\n        \n        vec2 st = vTextureCoord;\n        float pct = dist(st, vec2(0.5));\n\n        float a = get_angle(st);\n        float t = iTime / 1000.0 / period;\n\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\n        float outer = max(radius / resolution.x, radius / resolution.y);\n\n        float x1 = mod(t, 1.0);\n        float x2 = mod(t + angle, 1.0);\n\n        if (x1 < x2) {\n            if (a > x1 && a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        } else {\n            if (a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else if (a > x1) {\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        }\n\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class HoleShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n        this._radius = 0;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        this._x = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        this._y = v;\n        this.redraw();\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        this._w = v;\n        this.redraw();\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        this._h = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\n\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n\n    useDefault() {\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\n    }\n}\n\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nHoleShader.fragmentShaderSource = `\n   #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float x;\n    uniform float y;\n    uniform float w;\n    uniform float h;\n    uniform vec2 resolution;\n    uniform float radius;\n\n    float roundBox(vec2 p, vec2 b, float r) {\n        float d = length(max(abs(p)-b+r, 0.1))-r;\n        return smoothstep(1.0, 0.0, d);\n    }\n\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n        vec2 size = vec2(w, h) / 2.0;\n        float b = roundBox(pos, size, radius);\n        gl_FragColor = mix(color, vec4(0.0), b) * vColor;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RadialGradientShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._pivot = [0, 0];\n        this._ic = 0xffffffff;\n        this._normalizedIC = this._getNormalizedColor(this._ic);\n        this._oc = 0x00ffffff;\n        this._normalizedOC = this._getNormalizedColor(this._oc);\n        this._radius = 0;\n    }\n\n    set radiusX(v) {\n        this.radius = v;\n    }\n\n    get radiusX() {\n        return this._radius;\n    }\n\n    set radiusY(v) {\n        this._radiusY = v;\n        this.redraw();\n    }\n\n    get radiusY() {\n        return this._radiusY;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set innerColor(argb) {\n        this._ic = argb;\n        this._normalizedIC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get innerColor() {\n        return this._ic;\n    }\n\n    set outerColor(argb) {\n        this._oc = argb;\n        this._normalizedOC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    set color(argb) {\n        this.innerColor = argb;\n    }\n\n    get color() {\n        return this.innerColor;\n    }\n\n    get outerColor() {\n        return this._ic;\n    }\n\n    set x(f) {\n        this._x = f;\n        this.redraw();\n    }\n\n    set y(f) {\n        this._y = f;\n        this.redraw();\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v) && v.length === 2) {\n            this._pivot = v;\n        }\n        else if(Array.isArray(v)) {\n            this._pivot = [v[0], v[1] || v[0]];\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivot() {\n        return this._pivot[0];\n    }\n\n    set pivotY(f) {\n        this._pivot[1] = f;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotX(f) {\n        this._pivot[0] = f;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        if(this._x) {\n            this._pivot[0] = this._x / owner.w;\n        }\n        if(this._y) {\n            this._pivot[1] = this._y / owner.h;\n        }\n\n        if(this._radius === 0) {\n            this._radius = owner.w * 0.5;\n        }\n\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\n    }\n}\n\nRadialGradientShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec2 pivot;\n    uniform vec4 innerColor;\n    uniform vec4 outerColor;\n    uniform float radius;\n    uniform float radiusY;\n    uniform float alpha;\n    uniform float fill;\n    uniform float aspectRatio;\n    \n    void main() {\n        vec2 point = vTextureCoord.xy * resolution;\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class Light3dShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._strength = 0.5;\n        this._ambient = 0.5;\n        this._fudge = 0.4;\n\n        this._rx = 0;\n        this._ry = 0;\n\n        this._z = 0;\n        this._pivotX = NaN;\n        this._pivotY = NaN;\n        this._pivotZ = 0;\n\n        this._lightY = 0;\n        this._lightZ = 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        let vr = operation.shaderOwner;\n        let element = vr.element;\n\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        let gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set strength(v) {\n        this._strength = v;\n        this.redraw();\n    }\n\n    get strength() {\n        return this._strength;\n    }\n\n    set ambient(v) {\n        this._ambient = v;\n        this.redraw();\n    }\n\n    get ambient() {\n        return this._ambient;\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        this._pivotX = v + 1;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        this._pivotY = v + 1;\n        this.redraw();\n    }\n\n    get lightY() {\n        return this._lightY;\n    }\n\n    set lightY(v) {\n        this._lightY = v;\n        this.redraw();\n    }\n\n    get pivotZ() {\n        return this._pivotZ;\n    }\n\n    set pivotZ(v) {\n        this._pivotZ = v;\n        this.redraw();\n    }\n\n    get lightZ() {\n        return this._lightZ;\n    }\n\n    set lightZ(v) {\n        this._lightZ = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\n    }\n\n}\n\nLight3dShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float fudge;\n    uniform float strength;\n    uniform float ambient;\n    uniform float z;\n    uniform float lightY;\n    uniform float lightZ;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Set depth perspective\n        float perspective = 1.0 + fudge * pos.z;\n\n        pos.z += lightZ * projection.x;\n\n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, perspective);\n\n        // Correct light source position.\n        pos.y += lightY * abs(projection.y);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nLight3dShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec3 pos;\n    uniform sampler2D uSampler;\n    uniform float ambient;\n    uniform float strength;\n    void main(void){\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\n        float d = length(pos);\n        float n = 1.0 / max(0.1, d);\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\n        gl_FragColor = rgba * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class PerspectiveShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._fudge = 0.2;\n        this._rx = 0;\n        this._ry = 0;\n        this._z = 1.0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const vr = operation.shaderOwner;\n        const element = vr.element;\n\n        const pivotX = element.pivotX * vr.w;\n        const pivotY = element.pivotY * vr.h;\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        const gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\n    }\n\n}\n\nPerspectiveShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float z;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, z);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPerspectiveShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform vec3 rot;\n    uniform float fudge;\n\n    void main(void) {\n        vec2 coords = vTextureCoord;\n\n        coords.xy -= vec2(0.5);\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\n        coords.xy += vec2(0.5);\n\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\n            gl_FragColor = vec4(0.0);\n        } else {\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class MagnifierShader extends DefaultShader {\n\tconstructor(context) {\n\t  super(context);\n\t  this._x = 0;\n\t  this._y = 0;\n\t  this._w = 0;\n\t  this._h = 0;\n\t  this._radius = 0;\n\t  this._magnification = 0.6;\n\t}\n  \n\tget x() {\n\t  return this._x;\n\t}\n  \n\tset x(v) {\n\t  this._x = v;\n\t  this.redraw();\n\t}\n  \n\tget y() {\n\t  return this._y;\n\t}\n  \n\tset y(v) {\n\t  this._y = v;\n\t  this.redraw();\n\t}\n  \n\tget w() {\n\t  return this._w;\n\t}\n  \n\tset w(v) {\n\t  this._w = v;\n\t  this.redraw();\n\t}\n  \n\tget h() {\n\t  return this._h;\n\t}\n  \n\tset h(v) {\n\t  this._h = v;\n\t  this.redraw();\n\t}\n  \n\tget magnification() {\n\t  return this._magnification;\n\t}\n  \n\tset magnification(v) {\n\t  this._magnification = v;\n\t  this.redraw();\n\t}\n  \n\tget radius() {\n\t  return this._radius;\n\t}\n  \n\tset radius(v) {\n\t  this._radius = v;\n\t  this.redraw();\n\t}\n  \n\tsetupUniforms(operation) {\n\t  super.setupUniforms(operation);\n  \n\t  const owner = operation.shaderOwner;\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\n\t  this._setUniform(\n\t\t'radius',\n\t\t(this._radius + 0.5) * renderPrecision,\n\t\tthis.gl.uniform1f\n\t  );\n\t  this._setUniform(\n\t\t'resolution',\n\t\tnew Float32Array([\n\t\t  owner._w * renderPrecision,\n\t\t  owner._h * renderPrecision\n\t\t]),\n\t\tthis.gl.uniform2fv\n\t  );\n\t}\n \n\tuseDefault() {\n\t  return this._w === 0 && this._h === 0;\n\t}\n  }\n  \n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n  \n  MagnifierShader.fragmentShaderSource = `\n\t  #ifdef GL_ES\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\t# else\n\t\tprecision lowp float;\n\t\t# endif\n\t  #endif\n\n\t  varying vec2 vTextureCoord;\n\t  varying vec4 vColor;\n\t  uniform sampler2D uSampler;\n\t  uniform float x;\n\t  uniform float y;\n\t  uniform float w;\n\t  uniform float h;\n\t  uniform vec2 resolution;\n\t  uniform float radius;\n\t  uniform float magnification;\n  \n\t  float roundBox(vec2 p, vec2 b, float r) {\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\n\t\t  return smoothstep(1.0, 0.0, d);\n\t  }\n\n\t  float inside(vec2 v) {\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\n\t\treturn s.x * s.y;   \n      }\n  \n\t  void main(void) {\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n\t\tvec2 size = vec2(w, h) / 2.0;\n\t\tfloat b = roundBox(pos, size, radius);\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\n\t  }\n  `;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class SpinnerShader2 extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._period = 1;\n        this._stroke = 0;\n        this._showDot = true;\n        this._clockwise = true;\n        this._bc = 0xff000000;\n        this._normalizedBC = this._getNormalizedColor(this._bc);\n        this._c = 0xffffffff;\n        this._normalizedC = this._getNormalizedColor(this._c);\n    }\n\n    set radius(v) {\n        if(v === 0) {\n            v = 1;\n        }\n        this._radius = v;\n    }\n\n    set stroke(value) {\n        this._stroke = Math.abs(value);\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    set color(argb) {\n        this._c = argb;\n        this._normalizedC = this._getNormalizedColor(argb);\n    }\n\n    get color() {\n        return this._c;\n    }\n\n    set backgroundColor(argb) {\n        this._bc = argb;\n        this._normalizedBC = this._getNormalizedColor(argb);\n    }\n\n    get backgroundColor() {\n        return this._sc;\n    }\n\n    set showDot(bool) {\n        this._showDot = bool;\n    }\n\n    get showDot() {\n        return this._showDot;\n    }\n\n    set clockwise(bool) {\n        this._clockwise = bool;\n    }\n\n    get clockwise() {\n        return this._clockwise;\n    }\n\n    set period(v) {\n        this._period = v;\n    }\n\n    get period() {\n        return this._period;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const radius = this._radius || (owner._w / 2);\n\n        if(this._stroke === 0) {\n            this._stroke = radius * 0.33;\n        }\n\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\n        this._setUniform('radius',  radius, this.gl.uniform1f);\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\n            this.redraw();\n        }\n    }\n}\n\nSpinnerShader2.spinSync = Date.now();\n\nSpinnerShader2.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    \n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n    uniform float direction;\n    uniform float radius;\n    uniform float time;\n    uniform float stroke;\n    uniform float showDot;\n    uniform float period;\n    uniform float alpha;\n    \n    float circleDist(vec2 p, float radius){\n        return length(p) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\n        \n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n        \n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\n        \n        float strokeRad = stroke * 0.5;\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Application from \"./application/Application.mjs\";\nimport Component from \"./application/Component.mjs\";\nimport Base from \"./tree/Base.mjs\";\nimport Utils from \"./tree/Utils.mjs\";\nimport StageUtils from \"./tree/StageUtils.mjs\";\nimport Element from \"./tree/Element.mjs\";\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\nimport Texture from \"./tree/Texture.mjs\";\n\nimport Tools from \"./tools/Tools.mjs\";\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\n\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\nimport TextTexture from \"./textures/TextTexture.mjs\";\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\n\nimport ListComponent from \"./components/ListComponent.mjs\";\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\nimport BloomComponent from \"./components/BloomComponent.mjs\";\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\nimport BorderComponent from \"./components/BorderComponent.mjs\";\nimport EventEmitter from \"./EventEmitter.mjs\";\n\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\n\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\n\nimport Stage from \"./tree/Stage.mjs\";\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\n\nconst lightning = {\n    Application,\n    Component,\n    Base,\n    Utils,\n    StageUtils,\n    Element,\n    Tools,\n    Stage,\n    ElementCore,\n    ElementTexturizer,\n    Texture,\n    EventEmitter,\n    shaders: {\n        Grayscale: WebGLGrayscaleShader,\n        BoxBlur: BoxBlurShader,\n        Dithering: DitheringShader,\n        CircularPush: CircularPushShader,\n        Inversion: InversionShader,\n        LinearBlur: LinearBlurShader,\n        Outline: OutlineShader,\n        Pixelate: PixelateShader,\n        RadialFilter: RadialFilterShader,\n        RoundedRectangle: RoundedRectangleShader,\n        Spinner2: SpinnerShader2,\n        FadeOut: FadeOutShader,\n        Hole: HoleShader,\n        Vignette: VignetteShader,\n        Spinner: SpinnerShader,\n        RadialGradient: RadialGradientShader,\n        Light3d: Light3dShader,\n        Perspective: PerspectiveShader,\n        Magnifier: MagnifierShader,\n        WebGLShader,\n        WebGLDefaultShader,\n        C2dShader,\n        C2dDefaultShader,\n        c2d: {\n            Grayscale: C2dGrayscaleShader,\n            Blur: C2dBlurShader\n        }\n    },\n    textures: {\n        RectangleTexture,\n        NoiseTexture,\n        TextTexture,\n        ImageTexture,\n        HtmlTexture,\n        StaticTexture,\n        StaticCanvasTexture,\n        SourceTexture\n    },\n    components: {\n        FastBlurComponent,\n        BloomComponent,\n        SmoothScaleComponent,\n        BorderComponent,\n        ListComponent\n    },\n    tools: {\n        ObjMerger,\n        ObjectListProxy,\n        ObjectListWrapper\n    }\n};\n\nif (Utils.isWeb) {\n    window.lng = lightning;\n}\n\nexport default lightning;\n"],"names":["StageUtils","_classCallCheck","_createClass","key","value","mergeNumbers","v1","v2","p","rgb","r","g","b","rgba","a","getRgbString","color","getRgbaString","toFixed","getRgbaStringFromArray","Math","floor","getRgbaComponentsNormalized","argb","getRgbComponentsNormalized","getRgbaComponents","getArgbNumber","max","min","v","mergeColors","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","mergeMultiColors","c","t","n","length","i","mergeMultiColorsEqual","mergeColorAlpha","alpha","rad","deg","PI","getTimingBezier","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","getTimingFunction","str","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","isFunction","isNumber","isInteger","isBoolean","isString","clone","isObjectLiteral","Array","isArray","getDeepClone","cloneObjShallow","obj","keys","Object","merge","obj1","obj2","isObject","type","isPlainObject","constructor","getArrayIndex","index","arr","getModuloIndex","len","ceil","equalValues","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","setToArray","result","forEach","push","iteratorToArray","iterator","iteratorResult","next","done","isUcChar","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","defaultSetter","name","patchObject","settings","error","names","patchObjectProperty","setter","setSetting","charAt","__local","local","func","SpacingCalculator","getSpacing","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","get","_lines","init","_getTotalCrossAxisSize","align","crossAxisSize","_this$_getSpacing","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","getParentAxisSizeWithPadding","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","getRelAxisSize","funcW","_allowRelAxisSizeFunction","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","isZeroAxisSize","getAxisLayoutPos","x","y","setAxisLayoutPos","pos","setAxisLayoutSize","size","getAxisMinSize","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","isShrinkable","flexItem","shrink","resizeAxis","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","getPaddingOffset","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","getMarginOffset","marginLeft","marginTop","getTotalMargin","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","getShrunkSize","SizeGrower","_grownSize","grow","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","getGrownSize","ItemPositioner","lineLayout","position","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","performLayout","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","shrinker","positioner","_calcCrossAxisMaxLayoutSize","getMainAxisMinSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","layoutLines","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","finalize","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","_reversed","_recalc","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","layoutTree","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","mainAxisContentSize","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_changedDimensions","changedDimensions","_changedContents","changedContents","f","direction","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","patch","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","_getCrossAxisLayoutSize","_getMainAxisPadding","_getMainAxisMargin","FlexTarget","_target","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","layoutFlexTree","isChanged","_disableFlex","_enableFlex","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","setParent","from","to","isFlexContainer","_changedChildren","setVisible","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","arguments","changeHeight","_updateRecalc","forceLayout","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","setOriginalXWithoutUpdatingLayout","setOriginalYWithoutUpdatingLayout","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","addTexture","has","add","removeTexture","delete","incActiveTextureCount","becomesUsed","decActiveTextureCount","becomesUnused","forEachEnabledElement","cb","_this","texture","_newArrowCheck","elements","bind","hasEnabledElements","forEachActiveElement","_this2","_this3","element","active","getRenderWidth","getRenderHeight","allowCleanup","isUsed","load","cancel","isLoading","isLoaded","isError","reload","free","_this4","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","_this5","forceRenderUpdate","update","frameCounter","forceUpdateRenderCoords","_updateTextureCoords","clearNativeTexture","replaceNativeTexture","newNativeTexture","_this6","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","_updateDimensions","e","_this7","onTextureSourceLoadError","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","_getTextureSource","textureManager","updateResultTexture","hasResultTexture","resultTextureInUse","resultTexture","getResultTexture","nativeTexture","core","mustRenderToTexture","_hasRenderUpdates","deactivate","release","releaseRenderTexture","reuseTextureAsRenderTexture","hasRenderTexture","getRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","_updateLocalTranslateDelta","_triggerRecalcTranslate","_disableFuncY","disableFuncW","disableFuncH","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","getOption","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setZParent","findZContext","disableZContext","enableZContext","enableZSort","newShaderOwner","_setShaderOwnerRecursive","force","forceZSort","addChildAt","splice","setChildAt","removeChildAt","removeChildren","syncChildren","removed","added","order","moveChild","fromIndex","toIndex","isEstimate","setTextureCoords","ulx","uly","brx","bry","setDisplayedTextureSource","textureSource","setAsRoot","root","coordsWidth","coordsHeight","isAncestorOf","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","_setShaderOwnerChildrenRecursive","_hasRenderContext","texturizer","_enableRenderToTexture","_disableRenderToTexture","_renderAdvanced","isWhite","hasSimpleTexCoords","_stashTexCoords","_stashedTexCoords","_unstashTexCoords","_stashColors","_stashedColors","_unstashColors","isVisible","_applyRelativeDimFuncs","pw","calculatedX","parentW","__parent","ta","td","tb","tc","pr","updateTreeOrder","useRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","renderToTextureCount","cleared","ignore","cache","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","renderTextureReused","setTexturizer","colorize","ptr","m","j","sort","mergeResult","getCornerPoints","getRenderTextureCoords","relX","relY","getAbsoluteCoords","collectAtCoord","inBound","inScissor","tx","ty","sc","_ensureLayout","EventEmitter","_hasEventListeners","on","listener","_eventFunction","_eventListeners","current","combiner","once","wrapper","arg1","arg2","arg3","off","__originalFunc","listeners","_iterator","_createForOfIteratorHelper","_step","l","map","removeListener","emit","listenerCount","removeAllListeners","object","_i","_arr","_toConsumableArray","addAsMixin","cls","Shader","coreContext","_initialized","_elements","addElement","removeElement","cleanup","redraw","useDefault","addEmpty","create","renderer","createShader","isShader","isValidShaderType","getWebGL","getC2d","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","incActiveCount","decActiveCount","_checkForNewerReusableTextureSource","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","_getLookupId","_getSourceLoader","_getIsValid","_updateSource","addUpdateSourceTexture","getTextureSource","getReusableTextureSource","newSource","oldSource","loadError","_ref","_ref$type","_ref$w","_ref$h","_ref$clipX","clipX","_ref$clipY","clipY","_clearResizeMode","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","enableClipping","disableClipping","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","getNonDefaults","nonDefaults","precision","isAutosizeTexture","isTexture","ImageTexture","_Texture","_inherits","_super","_createSuper","call","_src","src","fc","charCodeAt","platform","loadSrcTexture","_get","_getPrototypeOf","getFontSetting","fontFace","fontStyle","fontSize","defaultFontFace","ff","ffs","curFf","concat","isZeroWidthSpace","space","isSpace","tokenizeString","tokenRegex","text","delimeters","match","words","final","pop","filter","word","measureText","context","reduce","acc","char","wrapText","wordWrapWidth","letterSpacing","indent","spaceRegex","allLines","realNewlines","resultLines","spaceLeft","spaces","wordWidth","wordWidthWithSpace","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","getPrecision","setFontProperties","font","textBaseline","_load","document","fonts","fontSetting","check","catch","then","draw","loadPromise","drawText","_draw","_calculateRenderInfo","offsetY","lineHeight","cutSx","cutEx","cutSy","cutEy","textIndent","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","maxLines","usedLines","otherLines","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","textAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","drawLine","prevShadowSettings","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textColor","fillText","textSplit","suffixWidth","wordLen","cutoffIndex","truncWordWidth","substring","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","_iterator2","_step2","_iterator3","_step3","firstWord","lastWord","shift","_iterator4","_step4","apply","lastLineText","_iterator5","_step5","spl","alignLine","_iterator6","_step6","_iterator7","_step7","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","_iterator8","_step8","_iterator9","_step9","letters","_iterator10","_step10","tokens","italic","bold","colorStack","colorRegexp","test","matched","exec","o","applyFontStyle","parsed","_iterator11","_step11","_iterator12","_step12","_getBreakIndex","breakIndex","_this$_getBreakIndex","_objectSpread","totalWidth","_iterator13","_step13","initialX","prevWidth","prevX","_iterator14","_step14","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","_set","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","texParams","sharpCfg","sharpen","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","_EventEmitter","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","start","targetValue","isAttached","_updateDrawValue","reset","delay","finish","stop","removeActive","pause","play","addActive","getDrawValue","attached","isRunning","progress","dt","delayLeft","duration","invokeListeners","updateTargetValue","timingFunctionImpl","_timingFunctionImpl","startValue","skipDelay","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","replaceByRef","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","getAt","remove","removeAt","onRemove","clear","onSync","isItem","_getRefs","clearRef","setRef","_setByObject","_setByArray","refs","crefs","cref","idx","_equalsArray","array","same","marker","newItems","_setItems","prevItems","ElementChildList","_ObjectList","_connectParent","prevChildList","childList","_setParent","gc","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","_throwError","removeTag","_addTag","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","getDepth","depth","getAncestor","getAncestors","getAncestorAtDepth","levels","getSharedAncestor","o1","o2","l1","l2","_isAttached","_isEnabled","_isActive","withinBoundsMargin","newAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","_setActiveFlag","_unsetActiveFlag","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","_onInactive","_onResize","_getRenderWidth","_getRenderHeight","textureIsLoaded","loadTexture","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","unknownSize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","tag","parentTreeTags","tags","tagSet","_loop","comp","Map","_loop2","_getByTag","getTags","setTags","removes","adds","hasTag","currentTags","addTag","list","_tag","mtag","values","res","level","resn","stag","sel","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","getLocationString","localTags","getSettings","getPrettyString","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","_collision","collision","_allowChildrenAccess","hasChildren","rectangleTexture","enableTextTexture","onUpdate","onAfterCalcs","onAfterUpdate","forceUpdate","rtt","getTexture","paths","firstCharCode","message","animation","animations","createAnimation","transition","_getTransition","_setTransition","setSmooth","fastForward","_transitions","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","getSmooth","toJSON","tree","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","isColorProperty","toLowerCase","properties","props","getBoolean","StateMachine","setupStateMachine","fire","event","_hasMethod","_len","_key","_getState","_state","__path","_inState","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","_hasMember","member","_setState","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","_stateIndex","__index","_initStateMachine","_routedType","_getMostSpecificHandledMember","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","StateMachineRouter","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","_this8","_this9","stateMap","_this10","_getStateMemberNames","_this11","_getStateMemberNamesForType","_this12","_isStateLocalMember","_createStateMap","_addState","parentState","_this13","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","_Element","tagRoot","_assertThisInitialized","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","application","updateFocusPath","_refocus","__bindProperty","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","_step$value","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","_focus","newTarget","prevTarget","_unfocus","_focusChange","_getFocused","_setFocusSettings","_handleFocusSettings","hasFinalFocus","_focusPath","hasFocus","seekAncestorByType","cparent","getSharedAncestorComponent","ancestor","isComponent","signal","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","fireAncestors","startsWith","_len2","_key2","_doFireAncestors","bindProp","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","collectSubComponents","subs","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","getElement","getElementCore","getTextureWidth","getTextureHeight","WebGLCoreQuadList","_CoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","getAttribsDataByteOffset","getQuadContents","CoreQuadOperation","shaderOwner","scissor","quads","getElementWidth","renderWidth","getElementHeight","renderHeight","WebGLCoreQuadOperation","_CoreQuadOperation","extraAttribsDataByteOffset","getNormalRenderTextureCoords","coords","getProjection","renderExec","_projection","projection","CoreRenderExecutor","destroy","_reset","_bindRenderTexture","_setScissor","_clearRenderTexture","execute","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_CoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","getScissor","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","compile","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getUniformLocation","location","getAttribLocation","_valueEquals","_valueClone","setUniformValue","glFunction","clonedValue","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","WebGLShader","_Shader","shaderPrograms","glProgram","initialize","_uniform","_attrib","_setUniform","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getVertexAttribPointerOffset","setExtraAttribsInBuffer","_getProjection","getFlipY","DefaultShader","_WebGLShader","vertexAttribPointer","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","copyRenderTexture","WebGLRenderer","_Renderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","getCompressedTextureExtensions","shaderProgram","createCoreRenderExecutor","createCoreRenderState","createRenderTexture","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","freeRenderTexture","deleteFramebuffer","deleteTexture","_getBytesPerPixel","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","bytesPerPixel","mca","cx","cy","extra","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","setRenderContext","setSimpleTc","setWhite","getRenderContext","getSimpleTc","getWhite","C2dCoreQuadOperation","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","globalCompositeOperation","beginPath","rect","closePath","fill","_restoreContext","restore","save","_equalScissorAreas","clip","C2dShader","_C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","_addMemoryUsage","delta","addMemoryUsage","_delete","_hasCache","_getCache","prevMemUsage","memoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","SparkShader","elementPostion","paint","SparkRenderer","_WebGLRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","_ref2","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","startLoop","loop","stopLoop","switchLoop","setInterval","updateFrame","idleFrame","lp","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","handleKtxLoad","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","includes","imageSize","handlePvrLoad","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","Image","crossOrigin","removeAttribute","createWebGLContext","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","createCanvasContext","getHrTime","performance","now","nextFrame","changes","registerKeydownHandler","keyhandler","_keydownListener","registerKeyupHandler","_keyupListener","removeEventListener","registerClickHandler","clickHandler","_clickListener","registerHoverHandler","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","_getDefaultFlag","cap","DITHER","setFlag","def","setBuffer","change","setFramebuffer","setRenderbuffer","setProgram","program","va","equal","setActiveTexture","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","setPixelStorei","pname","param","_getPixelStoreiIndex","migrate","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","_initStateManager","switchState","$useProgram","$bindBuffer","$bindFramebuffer","$bindRenderbuffer","$enable","$disable","$viewport","$scissor","$disableVertexAttribArray","$enableVertexAttribArray","$vertexAttribPointer","normalized","stride","$activeTexture","$bindTexture","$pixelStorei","$stencilFuncSeparate","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","$stencilMaskSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","$stencilOpSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","$blendColor","red","green","blue","_blendColor","$blendEquation","_blendEquation","$blendEquationSeparate","modeRGB","modeAlpha","_blendEquationSeparate","$blendFunc","sfactor","dfactor","_blendFunc","$blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","$clearColor","_clearColor","$clearDepth","_clearDepth","$clearStencil","_clearStencil","$colorMask","_colorMask","$cullFace","_cullFace","$depthFunc","_depthFunc","$depthMask","flag","_depthMask","$depthRange","zNear","zFar","_depthRange","$frontFace","_frontFace","$lineWidth","_lineWidth","$polygonOffset","factor","units","_polygonOffset","$sampleCoverage","invert","_sampleCoverage","$stencilFunc","_stencilFunc","$stencilMask","_stencilMask","$stencilOp","_stencilOp","$vertexAttrib1f","indx","_vertexAttrib1f","$vertexAttrib1fv","_vertexAttrib1fv","$vertexAttrib2f","_vertexAttrib2f","$vertexAttrib2fv","_vertexAttrib2fv","$vertexAttrib3f","z","_vertexAttrib3f","$vertexAttrib3fv","_vertexAttrib3fv","$vertexAttrib4f","_vertexAttrib4f","$vertexAttrib4fv","_vertexAttrib4fv","__proto__","method","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","_cleanupLookupMap","remainingTextureSources","ts","_freeManagedTextureSource","managed","TextureThrottler","_remove","_sources","_data","processSome","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","prec","_createRenderTexture","freeUnusedRenderTextures","maxAge","limit","TransitionSettings","_timingFunction","TransitionManager","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","getValue","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getResetValue","getAnimatedElements","sv","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","replay","STOPPED","stopNow","isPaused","isPlaying","isStopping","isFinished","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","isWebgl","isC2d","opt","setApplication","app","resume","_updatingFrame","_calculateDt","fixedDt","drawFrame","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","addServiceProvider","serviceprovider","getChildrenByPosition","Application","_Component","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","_receiveKeydown","_receiveKeyup","_receiveClick","_receiveHover","_recieveScrollWheel","__options","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","focusOverridden","unfocusedElement","focusedComponent","focusSettings","defaultSetFocusSettings","defaultHandleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","newParts","focusTopDownEvent","events","focusPath","_path$i","returnValue","focusBottomUpEvent","_path$i2","keyCode","hasTimer","longpress","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","_child$core$_worldCon","localCoords","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_ret","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","_ref$lookupId","Tools","getCanvasTexture","canvasFactory","content","getRoundRect","radius","strokeWidth","strokeColor","fillColor","createRoundRect","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","getShadowRect","blur","margin","createShadowRect","getSvgTexture","url","createSvg","img","ObjMerger","isMf","__mf","mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","ObjectListProxy","ObjectListWrapper","_ObjectListProxy","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_thisSuper","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","getAxisPosition","ps","wasVisible","invisibleItem","getWrapper","setPrevious","setNext","_ObjectListWrapper","_super2","checkStarted","ri","LinearBlurShader","_DefaultShader","_direction","_kernelRadius","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_Component2","_textwrap","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","getSpline","_multiSpline","_Component3","_super3","_layers","_output","_buildLayers","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_super4","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","_WebGLDefaultShader","C2dGrayscaleShader","WebGLDefaultShader","_C2dDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","getWebGLImpl","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":"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"}