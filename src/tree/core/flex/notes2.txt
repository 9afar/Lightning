flex container properties:
flexDirection: 'row', 'column', 'row-reverse', 'column-reverse'
wrap: true/false; default is true
alignItems: post-line-build cross-axis y/h determination; default is flex-start instead of stretch because of texture rendering issues.
justifyContent: post-line-build application (distribution of remaining space)
alignContent: post-line-build application (distribution of remaining cross space)
  Stretch is also possible. In that case, all lines are stretched with an additional amount of pixels, same per line.
fitW: flex container reuses calculated width (could be the main or cross axis); default true if rw == 0
fitH: flex container reuses calculated height (could be the main or cross axis); default true if rh == 0

Optional: remove wrap and fitW,fitH: just use w:0 or h:0 to determine this automatically.

flex item properties:
basis: default: just use 'w' or 'h' depending on the direction. Otherwise this value in px overrules it.
shrink: default is 0 (only applicable in case of wrap:false)
grow: default is 0
alignSelf: individual align overrule for this item
minW/minH: min width/height that should be adhered to when 'shrink' (or alignItems: stretch) is set
maxW/maxH: max width/height that should be adhered to when 'grow' (or alignItems: stretch) is set
margin: left top right bottom; collapsable margin that pushes away other items on the main axis, cross axis and the container edge.

Idea:
ViewCore._flex : FlexContainer, with properties, patched by object keys. Also contains cache/state info.
ViewCore._flexItem : FlexItem, with properties

Layout wordt recursief over een flex container branch in één keer gedaan vanwege reflow.
Echter, hij wordt wel gestart vanuit de 'root' flex container van de branch, vanuit de update hook.
En alleen als de branch 'has updates', etc.

PROBLEEM: Beetje een clash met de onUpdate hook, aangezien deze op de root wel al is aangeroepen maar verderop nog niet.
Voor nu is dat wellicht prima: het is niet de bedoeling om de flexbox layout aan te passen hierop.
En waar flexbox wordt gebruikt, is het niet de bedoeling om te layouten.
Misschien moeten we onUpdate helemaal weggooien en flexbox die rol laten overnemen.
vanuit ViewCore.update: layout mag alleen worden aangeroepen op de root om rare zaken te voorkomen!

ViewCore.layout:
Save original ow = lw, oh = lh
Loop:
	If recalc 'new' or 'flex layout' flags set, re-layout: this._layout()
	Loop through all children, if 'flex layout' flag set, call layout function on them (also invisible because it may still affect visible parents). If any of the children returns true, then we must re-layout. If none of the children returns true, break the loop.
If finally, lw !== ow || lh !== oh, then return true (reflow parent)

ViewCore._layout:
Actually performs the layout: repositions/redimensions all children.
For all children that were changed (lx,ly,lw,lh) since last frame, set recalc flag 2 and _hasUpdates (recursive, but blocked?).
For children that are flex containers themselves:
set _recalc 'flex layout' flag if:
 - lw and/or lh has been changed for child since last time (FlexContainer.ow,oh)
 - OR shrink or grow or stretch properties are set

ViewCore._recalc: nieuwe flag voor 'flex layout'. Als geset dan moet de gehele container worden ge re-layout.
Wanneer: children configuratie wijzigt, of flex container property wordt aangepast, of children dimensies (als zelf flex container, dan wordt parent later wel geupdate) worden aangepast, of eigen dimensies worden aangepast.

Echter, moeten we ook alle children updaten?
We hoeven children niet te updaten als:
- Daarin zelf geen changes zijn.
- er geen sprake is van shrink/grow/stretch.
Van het niet-geupdate child blijft de _lw, _lh gelijk, maar de _lx, _ly moet (waarschijnlijk) worden aangepast.
Mocht dat laatste het geval zijn, dan moet recalc 2 worden ingesteld voor die bewuste child.

En als er een parent flex container in het spel is?
We kunnen aannemen dat de parent niet aangepast hoeft te worden als:
- de 'eigen' after-layout dimensies niet anders zijn dan de 'eigen' after-layout dims van de vorige keer.
- shrink/grow/stretch uit staan en niet zijn aangepast.
Als bovenstaande niet zo is, dan is er sprake van 'reflow': de parent moet worden ge-relayout.

